{"version":3,"file":"2557.4b5cb32d67411c3edcbf.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useImageLoader.ts","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/common/PeerChip.tsx","webpack://telegram-t/./src/components/common/PeerChip.module.scss?346e","webpack://telegram-t/./src/components/common/reactions/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/hooks/useResizeMessageObserver.ts","webpack://telegram-t/./src/hooks/schedulers/useTimeout.ts","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/util/events/getPointerPosition.ts","webpack://telegram-t/./src/components/common/reactions/ReactionStaticEmoji.tsx","webpack://telegram-t/./src/components/common/PremiumProgress.module.scss?8969","webpack://telegram-t/./src/components/common/PremiumProgress.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/hooks/useSchedule.tsx","webpack://telegram-t/./src/components/common/AvatarList.tsx","webpack://telegram-t/./src/components/common/AvatarList.module.scss?00d4","webpack://telegram-t/./src/components/common/MediaSpoiler.tsx","webpack://telegram-t/./src/components/common/MediaSpoiler.module.scss?4929","webpack://telegram-t/./src/util/resolveTransitionName.ts","webpack://telegram-t/./src/components/common/pickers/PickerStyles.module.scss?c0e4","webpack://telegram-t/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/Gift.tsx","webpack://telegram-t/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGift.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostApproval.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostBalanceTooLow.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostRejected.tsx","webpack://telegram-t/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://telegram-t/./src/components/middle/message/SimilarChannels.tsx","webpack://telegram-t/./src/hooks/useAverageColor.ts","webpack://telegram-t/./src/components/middle/message/ActionMessage.tsx","webpack://telegram-t/./src/hooks/useHorizontalScroll.ts","webpack://telegram-t/./src/components/common/profile/RadialPatternBackground.tsx","webpack://telegram-t/./src/components/common/profile/RadialPatternBackground.module.scss?0cfb","webpack://telegram-t/./src/util/visibility/isElementInViewport.ts","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/hooks/useCanvasBlur.ts","webpack://telegram-t/./src/components/common/pickers/PickerItem.tsx","webpack://telegram-t/./src/components/common/pickers/PickerItem.module.scss?49ce","webpack://telegram-t/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx","webpack://telegram-t/./src/components/common/helpers/renderMessageText.ts","webpack://telegram-t/./src/hooks/useEnsureMessage.ts","webpack://telegram-t/./src/components/common/pickers/PeerPicker.tsx","webpack://telegram-t/./src/hooks/useRunDebounced.ts","webpack://telegram-t/./src/util/animateHorizontalScroll.ts","webpack://telegram-t/./src/util/objects/customPeer.ts","webpack://telegram-t/./src/components/common/AnimatedIconWithPreview.module.scss?eca8","webpack://telegram-t/./src/components/common/AnimatedIconWithPreview.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/common/helpers/gifts.ts","webpack://telegram-t/./src/components/common/AnimatedCounter.tsx","webpack://telegram-t/./src/components/common/AnimatedCounter.module.scss?3640","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.module.scss?4249","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/hooks/useFolderManager.ts","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelectorReaction.module.scss?c7b9","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelectorCustomReaction.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionSelector.tsx","webpack://telegram-t/./src/hooks/useInputFocusOnOpen.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/common/AnimatedIconFromSticker.tsx","webpack://telegram-t/./src/components/common/helpers/sortChatIds.ts","webpack://telegram-t/./src/util/parseHtmlAsFormattedText.ts","webpack://telegram-t/./src/util/getMessageIdsForSelectedText.ts","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/util/animateScroll.ts","webpack://telegram-t/./src/components/common/reactions/CustomEmojiEffect.module.scss?b4fe","webpack://telegram-t/./src/components/common/reactions/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://telegram-t/./src/components/common/gift/GiftRibbon.tsx","webpack://telegram-t/./src/components/common/MiniTable.tsx","webpack://telegram-t/./src/components/common/MiniTable.module.scss?145f","webpack://telegram-t/./src/components/modals/prompt/PromptDialog.tsx","webpack://telegram-t/./src/components/modals/prompt/PromptDialog.module.scss?c2fd","webpack://telegram-t/./src/components/middle/message/reactions/SavedTagButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionAnimatedEmoji.module.scss?3a3d","webpack://telegram-t/./src/util/focusNoScroll.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSelectionAsFormattedText.ts","webpack://telegram-t/./src/components/common/PinMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/TimeMenuItem.module.scss?e6ff","webpack://telegram-t/./src/components/middle/message/LastEditTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/isSelectionRangeInsideMessage.ts"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport { preloadImage } from '../util/files';\nimport useAsync from './useAsync';\n\nexport type UseImageLoaderResult = {\n  image?: HTMLImageElement;\n};\n\nexport default function useImageLoader(file?: Blob): UseImageLoaderResult {\n  const urlRef = useRef<string | undefined>();\n\n  const { result: image } = useAsync(() => {\n    if (!file) {\n      return Promise.resolve(undefined);\n    }\n\n    if (urlRef.current) {\n      URL.revokeObjectURL(urlRef.current);\n    }\n\n    const url = URL.createObjectURL(file);\n    urlRef.current = url;\n\n    return preloadImage(url);\n  }, [file]);\n\n  useEffect(() => {\n    return () => {\n      if (urlRef.current) {\n        URL.revokeObjectURL(urlRef.current);\n        urlRef.current = undefined;\n      }\n    };\n  }, []);\n\n  return { image };\n}\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n\n  useMemo(() => {\n    if (!noAnimation) activeKey.current += 1;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...deps]);\n\n  return activeKey.current;\n}\n","import type { TeactNode } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport { getPeerTitle, isApiPeerChat } from '../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getPeerColorClass } from './helpers/peerColor';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from './Avatar';\nimport FullNameTitle from './FullNameTitle';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerChip.module.scss';\n\ntype OwnProps<T = undefined> = {\n\n  peerId?: string;\n\n  forceShowSelf?: boolean;\n  customPeer?: CustomPeer;\n  mockPeer?: ApiPeer;\n  icon?: IconName;\n  title?: string;\n  isMinimized?: boolean;\n  canClose?: boolean;\n  isCloseNonDestructive?: boolean;\n  className?: string;\n  withPeerColors?: boolean;\n  withEmojiStatus?: boolean;\n  clickArg?: T;\n  onClick?: (arg: T) => void;\n  itemClassName?: string;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  isSavedMessages?: boolean;\n};\n\nconst PeerChip = <T,>({\n  icon,\n  title,\n  isMinimized,\n  canClose,\n  isCloseNonDestructive,\n  clickArg,\n  peer,\n  mockPeer,\n  customPeer,\n  className,\n  isSavedMessages,\n  withPeerColors,\n  withEmojiStatus,\n  onClick,\n  itemClassName,\n}: OwnProps<T> & StateProps) => {\n  const lang = useOldLang();\n\n  const apiPeer = mockPeer || peer;\n  const anyPeer = customPeer || apiPeer;\n\n  const chat = apiPeer && isApiPeerChat(apiPeer) ? apiPeer : undefined;\n\n  let iconElement: TeactNode | undefined;\n  let titleElement: TeactNode | undefined;\n  let titleText: string | undefined;\n\n  if (icon && title) {\n    iconElement = (\n      <div className={styles.iconWrapper}>\n        <Icon name={icon} style={styles.icon} />\n      </div>\n    );\n\n    titleElement = title;\n  } else if (anyPeer) {\n    iconElement = (\n      <Avatar\n        className={styles.avatar}\n        peer={anyPeer}\n        size=\"small\"\n        isSavedMessages={isSavedMessages}\n      />\n    );\n\n    titleText = getPeerTitle(lang, anyPeer) || title;\n    titleElement = title || (\n      <FullNameTitle peer={anyPeer} isSavedMessages={isSavedMessages} withEmojiStatus={withEmojiStatus} />\n    );\n  }\n\n  const fullClassName = buildClassName(\n    styles.root,\n    (chat?.isForum || customPeer?.isAvatarSquare) && styles.squareAvatar,\n    isMinimized && styles.minimized,\n    canClose && styles.closeable,\n    isCloseNonDestructive && styles.nonDestructive,\n    !onClick && styles.notClickable,\n    withPeerColors && getPeerColorClass(customPeer || peer),\n    className,\n  );\n\n  return (\n    <div\n      className={fullClassName}\n      onClick={() => onClick?.(clickArg!)}\n      title={isMinimized ? titleText : undefined}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {iconElement}\n      {!isMinimized && (\n        <div className={buildClassName(styles.name, itemClassName)} dir=\"auto\">\n          {titleElement}\n        </div>\n      )}\n      {canClose && (\n        <div className={styles.remove}>\n          <Icon name=\"close\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, forceShowSelf }): Complete<StateProps> => {\n    if (!peerId) {\n      return {\n        peer: undefined,\n        isSavedMessages: undefined,\n      };\n    }\n\n    const peer = selectPeer(global, peerId);\n    const user = selectUser(global, peerId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n\n    return {\n      peer,\n      isSavedMessages,\n    };\n  },\n)(PeerChip)) as typeof PeerChip;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_Lq6_4e5\",\"minimized\":\"UhOZvxvs\",\"closeable\":\"uvvgSFUJ\",\"remove\":\"xVPG2UTy\",\"nonDestructive\":\"fAk5yEeV\",\"notClickable\":\"P8r3OoaX\",\"avatar\":\"La8BQ9yr\",\"iconWrapper\":\"NtoGLT22\",\"icon\":\"f91Ad80i\",\"name\":\"XPVuH29G\",\"squareAvatar\":\"JIHfTUVn\"};","import {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerHashById, isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { roundToNearestEven } from '../../../util/math';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useCustomEmoji from '../hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../AnimatedSticker';\nimport CustomEmoji from '../CustomEmoji';\nimport CustomEmojiEffect from './CustomEmojiEffect';\nimport ReactionStaticEmoji from './ReactionStaticEmoji';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReaction;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  withEffectOnly?: boolean;\n  shouldPause?: boolean;\n  shouldLoop?: boolean;\n  loopLimit?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst CENTER_ICON_MULTIPLIER = 1.9;\nconst EFFECT_SIZE = 6.5 * REM;\nconst CUSTOM_EMOJI_EFFECT_MULTIPLIER = 0.5;\nconst MIN_PARTICLE_SIZE = REM;\n\nconst ReactionAnimatedEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  availableReactions,\n  genericEffects,\n  withEffects,\n  withEffectOnly,\n  shouldPause,\n  shouldLoop,\n  loopLimit,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const isCustom = reaction.type === 'custom';\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && getStickerHashById(centerIconId);\n  const mediaHashEffect = effectId && getStickerHashById(effectId);\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon);\n  const mediaDataEffect = useMedia(mediaHashEffect);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect,\n  );\n  const shouldPlayCenter = isIntersecting && ((shouldPlayEffect && !withEffectOnly) || shouldLoop);\n  const {\n    shouldRender: shouldRenderEffect,\n    transitionClassNames: animationClassNames,\n  } = useShowTransitionDeprecated(shouldPlayEffect, undefined, true, 'slow');\n  const {\n    shouldRender: shouldRenderCenter,\n    transitionClassNames: centerAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldPlayCenter, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    stopActiveReaction({ containerId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldShowStatic = !isCustom && (!shouldPlayCenter || !isAnimationLoaded);\n  const {\n    shouldRender: shouldRenderStatic,\n    transitionClassNames: staticClassNames,\n  } = useShowTransitionDeprecated(shouldShowStatic, undefined, true);\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    withEffectOnly && styles.withEffectOnly,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref}>\n      {!withEffectOnly && shouldRenderStatic && (\n        <ReactionStaticEmoji\n          className={staticClassNames}\n          reaction={reaction}\n          availableReactions={availableReactions}\n          size={size}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {!withEffectOnly && isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          size={size}\n          noPlay={shouldPause}\n          noVideoOnMobile\n          loopLimit={loopLimit}\n          observeIntersectionForPlaying={observeIntersection}\n          forceAlways\n        />\n      )}\n      {shouldRenderCenter && !isCustom && (\n        <AnimatedSticker\n          key={`${centerIconId}-${size}`}\n          className={buildClassName(styles.animatedIcon, centerAnimationClassNames)}\n          size={roundToNearestEven(size * CENTER_ICON_MULTIPLIER)}\n          tgsUrl={mediaDataCenterIcon}\n          play={isIntersecting && !shouldPause}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n          onEnded={unmarkAnimationLoaded}\n          forceAlways\n        />\n      )}\n      {shouldRenderEffect && (\n        <>\n          <AnimatedSticker\n            key={`${effectId}-${effectSize}`}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={effectSize}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            onEnded={handleEnded}\n            forceAlways\n          />\n          {isCustom && !assignedEffectId && isIntersecting && (\n            <CustomEmojiEffect\n              reaction={reaction}\n              className={animationClassNames}\n              particleSize={Math.max(size * CUSTOM_EMOJI_EFFECT_MULTIPLIER, MIN_PARTICLE_SIZE)}\n              onEnded={handleEnded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { genericEmojiEffects, reactions } = global;\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      availableReactions: reactions.availableReactions,\n      genericEffects: genericEmojiEffects,\n      withEffects,\n    };\n  },\n)(ReactionAnimatedEmoji));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { beginHeavyAnimation, useRef } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport { isAnimatingScroll } from '../util/animateScroll';\nimport useLastCallback from './useLastCallback';\nimport useResizeObserver from './useResizeObserver';\nimport useThrottledCallback from './useThrottledCallback';\n\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nfunction useMessageResizeObserver(\n  ref: ElementRef<HTMLElement> | undefined,\n  shouldFocusOnResize = false,\n) {\n  const {\n    focusLastMessage,\n  } = getActions();\n  const messageHeightRef = useRef(0);\n\n  const handleResize = useLastCallback(\n    (entry) => {\n      const lastHeight = messageHeightRef.current;\n\n      const newHeight = entry.contentRect.height;\n      messageHeightRef.current = newHeight;\n\n      if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n      const container = entry.target.closest('.MessageList');\n      if (!container) return;\n\n      beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n      const resizeDiff = newHeight - lastHeight;\n      const { offsetHeight, scrollHeight, scrollTop } = container;\n      const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n      const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n      if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n        focusLastMessage();\n      }\n    },\n  );\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n}\n\nexport default useMessageResizeObserver;\n","import { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\nfunction useTimeout(callback: NoneToVoidFunction, delay?: number) {\n  const savedCallback = useLastCallback(callback);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n\n    const id = setTimeout(() => savedCallback(), delay);\n    return () => clearTimeout(id);\n  }, [delay]);\n}\n\nexport default useTimeout;\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  description?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  shouldShowSubmit?: boolean;\n  shouldResetValue?: boolean;\n  isPasswordVisible?: boolean;\n  noRipple?: boolean;\n  onClearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit?: (password: string) => void;\n};\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder,\n  submitLabel,\n  description,\n  shouldShowSubmit,\n  shouldResetValue,\n  shouldDisablePasswordManager = false,\n  noRipple = false,\n  onClearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  useEffect(() => {\n    if (shouldResetValue) {\n      setPassword('');\n    }\n  }, [shouldResetValue]);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, focusDelayTimeoutMs);\n\n  useEffect(() => {\n    if (error) {\n      requestMutation(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      onClearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit!(password);\n    }\n  }\n\n  function renderFakeInput() {\n    return (\n      <input\n        type=\"password\"\n        id=\"prevent_autofill\"\n        autoComplete=\"off\"\n        className=\"visually-hidden\"\n        tabIndex={-2}\n      />\n    );\n  }\n\n  return (\n    <form action=\"\" onSubmit={onSubmit ? handleSubmit : stopEvent} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldDisablePasswordManager && renderFakeInput()}\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete={shouldDisablePasswordManager ? 'one-time-code' : 'current-password'}\n          spellCheck={IS_TAURI ? false : undefined}\n          onChange={onPasswordChange}\n          maxLength={256}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder || lang('PasswordFormPlaceholder')}</label>\n        <div\n          className=\"div-button toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title={lang('AriaPasswordToggle')}\n          aria-label={lang('AriaPasswordToggle')}\n        >\n          <Icon name={isPasswordVisible ? 'eye' : 'eye-crossed'} />\n        </div>\n      </div>\n      {description && <p className=\"description\">{description}</p>}\n      {onSubmit && (canSubmit || shouldShowSubmit) && (\n        <Button type=\"submit\" ripple={!noRipple} isLoading={isLoading} disabled={!canSubmit}>\n          {submitLabel || lang('PasswordFormSubmit')}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","export default function getPointerPosition(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  if ('touches' in e) {\n    return {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY,\n    };\n  }\n\n  return {\n    x: e.clientX,\n    y: e.clientY,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport CustomEmoji from '../CustomEmoji';\nimport Icon from '../icons/Icon';\n\nimport './ReactionStaticEmoji.scss';\n\nimport blankUrl from '../../../assets/blank.png';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  size?: number;\n  withIconHeart?: boolean;\n  observeIntersection?: ObserveFn;\n};\n\nconst ReactionStaticEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  className,\n  size,\n  withIconHeart,\n  observeIntersection,\n}) => {\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const staticIconId = availableReaction?.staticIcon?.id;\n  const mediaHash = staticIconId ? `document${staticIconId}` : undefined;\n  const mediaData = useMedia(mediaHash);\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  const shouldApplySizeFix = reaction.type === 'emoji' && reaction.emoticon === '🦄';\n  const shouldReplaceWithHeartIcon = withIconHeart && reaction.type === 'emoji' && reaction.emoticon === '❤';\n\n  if (reaction.type === 'custom') {\n    return (\n      <CustomEmoji\n        documentId={reaction.documentId}\n        className={buildClassName('ReactionStaticEmoji', className)}\n        size={size}\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    );\n  }\n\n  if (shouldReplaceWithHeartIcon) {\n    return (\n      <Icon name=\"heart\" className=\"ReactionStaticEmoji\" style={`font-size: ${size}px; width: ${size}px`} />\n    );\n  }\n\n  return (\n    <img\n      className={buildClassName(\n        'ReactionStaticEmoji',\n        shouldApplySizeFix && 'with-unicorn-fix',\n        transitionClassNames,\n        className,\n      )}\n      style={size ? `width: ${size}px; height: ${size}px` : undefined}\n      src={mediaData || blankUrl}\n      alt={availableReaction?.title}\n      draggable={false}\n    />\n  );\n};\n\nexport default memo(ReactionStaticEmoji);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nY2ggBsF\",\"withBadge\":\"RYtVQAjM\",\"badgeContainer\":\"dhigNjAq\",\"slide-in\":\"YfcP52Ym\",\"slideIn\":\"YfcP52Ym\",\"floating-badge-wrapper\":\"cOpfCGPh\",\"floatingBadgeWrapper\":\"cOpfCGPh\",\"rotate-in\":\"AgMPRKbT\",\"rotateIn\":\"AgMPRKbT\",\"floating-badge\":\"uNwBLNOy\",\"floatingBadge\":\"uNwBLNOy\",\"noTransition\":\"HS9PzRKt\",\"floatingBadgeContent\":\"W4rqGyJl\",\"floating-badge-triangle\":\"qRwO7SZm\",\"floatingBadgeTriangle\":\"qRwO7SZm\",\"floating-badge-icon\":\"MJ7MTmxi\",\"floatingBadgeIcon\":\"MJ7MTmxi\",\"floating-badge-value\":\"MwzZt3Qo\",\"floatingBadgeValue\":\"MwzZt3Qo\",\"left\":\"_b5HgBXr\",\"right\":\"P6mch4bB\",\"progressWrapper\":\"_B4r3D5W\",\"positiveLayer\":\"VmyTBAzN\",\"positiveProgress\":\"MzFvyMb5\",\"negativeLayer\":\"QZwWHVdB\",\"negativeProgress\":\"S6H6hBpP\",\"primary\":\"Zi0w7QJ3\",\"negative\":\"dXs41qvC\",\"transitioning\":\"I7toQztx\",\"hidden\":\"xdKGgbKQ\",\"cycling\":\"SxTCkiyg\",\"show\":\"tkyw4hXo\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { REM } from './helpers/mediaDimensions';\n\nimport { useTransitionActiveKey } from '../../hooks/animations/useTransitionActiveKey';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport Icon from './icons/Icon';\n\nimport styles from './PremiumProgress.module.scss';\n\nexport type AnimationDirection = 'forward' | 'backward' | 'none';\n\ntype OwnProps = {\n  leftText?: string;\n  rightText?: string;\n  floatingBadgeIcon?: IconName;\n  floatingBadgeText?: string;\n  progress?: number;\n  isPrimary?: boolean;\n  isNegative?: boolean;\n  animationDirection?: AnimationDirection;\n  className?: string;\n};\n\nconst PremiumProgress: FC<OwnProps> = ({\n  leftText,\n  rightText,\n  floatingBadgeText,\n  floatingBadgeIcon,\n  progress = 0,\n  isPrimary,\n  isNegative,\n  animationDirection = 'none',\n  className,\n}) => {\n  const lang = useOldLang();\n  const floatingBadgeContentRef = useRef<HTMLDivElement>();\n  const parentContainerRef = useRef<HTMLDivElement>();\n\n  const [shiftX, setShiftX] = useState(0);\n  const [beakPosition, setBeakPosition] = useState(0);\n  const [badgeWidth, setBadgeWidth] = useState(0);\n  const prevBadgeWidth = usePrevious(badgeWidth);\n  const [positiveProgress, setPositiveProgress] = useState(isNegative ? 0 : progress);\n  const [negativeProgress, setNegativeProgress] = useState(isNegative ? progress : 0);\n  const [badgeProgress, setBadgeProgress] = useState(progress);\n\n  const [layerProgress, setLayerProgress] = useState(0);\n  const [showLayer, setShowLayer] = useState(false);\n  const [disableMainProgressTransition, setDisableMainProgressTransition] = useState(false);\n  const [disableLayerProgressTransition, setDisableLayerProgressTransition] = useState(false);\n  const [hideMainLayer, setHideMainLayer] = useState(false);\n  const [isCycling, setIsCycling] = useState(false);\n\n  const badgeActiveKey = useTransitionActiveKey([floatingBadgeText, floatingBadgeIcon]);\n\n  const shouldAnimateCaptionsRef = useRef(false);\n  const prevLeftText = usePrevious(leftText);\n  const prevRightText = usePrevious(rightText);\n  const prevIsNegative = usePrevious(isNegative);\n\n  const BEAK_WIDTH_PX = 28;\n  const PROGRESS_BORDER_RADIUS_PX = REM;\n  const CORNER_BEAK_THRESHOLD = BEAK_WIDTH_PX / 2 + PROGRESS_BORDER_RADIUS_PX;\n  const BADGE_HORIZONTAL_PADDING_PX = 0.75 * 2 * REM;\n\n  const LAYER_PROGRESS_TRANSITION_MS = 400;\n  const FULL_CYCLE_TRANSITION_MS = LAYER_PROGRESS_TRANSITION_MS * 2;\n  const APPLY_TRANSITION_DELAY_MS = 50;\n\n  const updateBadgePosition = () => {\n    if (floatingBadgeContentRef.current && parentContainerRef.current) {\n      const parentWidth = parentContainerRef.current.offsetWidth;\n      const halfBadgeWidth = badgeWidth / 2;\n      const minBadgeShift = halfBadgeWidth;\n      const maxBadgeShift = parentWidth - halfBadgeWidth;\n      const halfBeakWidth = BEAK_WIDTH_PX / 2;\n      const currentShift = isNegative ? (1 - badgeProgress) * parentWidth : badgeProgress * parentWidth;\n\n      let safeShift = Math.max(minBadgeShift, Math.min(currentShift, maxBadgeShift));\n      if (currentShift < CORNER_BEAK_THRESHOLD) {\n        safeShift = currentShift + halfBadgeWidth;\n      }\n      if (currentShift > parentWidth - CORNER_BEAK_THRESHOLD) {\n        safeShift = currentShift - halfBadgeWidth;\n      }\n\n      const beakOffsetFromCenter = currentShift - safeShift;\n      const newBeakPositionPx = halfBadgeWidth + beakOffsetFromCenter - halfBeakWidth;\n\n      setShiftX(safeShift / parentWidth);\n      setBeakPosition(newBeakPositionPx);\n    }\n  };\n\n  useEffect(updateBadgePosition, [badgeProgress, badgeWidth, isNegative, CORNER_BEAK_THRESHOLD]);\n\n  useResizeObserver(parentContainerRef, updateBadgePosition);\n\n  useEffect(() => {\n    const width = floatingBadgeContentRef?.current?.clientWidth || 0;\n    setBadgeWidth(width + BADGE_HORIZONTAL_PADDING_PX);\n  }, [floatingBadgeText, floatingBadgeIcon, BADGE_HORIZONTAL_PADDING_PX]);\n\n  const forceUpdate = useForceUpdate();\n\n  useSyncEffect(() => {\n    let timeoutId: number | undefined;\n\n    const isNegativeTransition = prevIsNegative !== undefined && prevIsNegative !== isNegative;\n    const shouldAnimateCaptions = (prevLeftText || prevRightText) && (isNegativeTransition || isCycling);\n\n    if (shouldAnimateCaptions && !shouldAnimateCaptionsRef.current) {\n      shouldAnimateCaptionsRef.current = true;\n\n      const timeoutMs = isCycling ? LAYER_PROGRESS_TRANSITION_MS * 2 : LAYER_PROGRESS_TRANSITION_MS;\n      timeoutId = window.setTimeout(() => {\n        shouldAnimateCaptionsRef.current = false;\n        forceUpdate();\n      }, timeoutMs);\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        shouldAnimateCaptionsRef.current = false;\n      }\n    };\n  }, [\n    leftText, prevLeftText, rightText, prevRightText,\n    prevIsNegative, isNegative, animationDirection, isCycling,\n  ]);\n\n  const shouldAnimateCaptions = shouldAnimateCaptionsRef.current;\n\n  useEffect(() => {\n    if (isNegative) {\n      setPositiveProgress(0);\n      setNegativeProgress(progress);\n    } else {\n      setNegativeProgress(0);\n      setPositiveProgress(progress);\n    }\n    setBadgeProgress(progress);\n  }, [progress, isNegative]);\n\n  const hasFloatingBadge = Boolean(floatingBadgeIcon || floatingBadgeText);\n\n  const displayLeftText = shouldAnimateCaptions ? prevLeftText : leftText;\n  const displayRightText = shouldAnimateCaptions ? prevRightText : rightText;\n\n  const prevProgress = usePrevious(progress);\n\n  useEffect(() => {\n    const timers: number[] = [];\n\n    if (animationDirection === 'none' || prevProgress === undefined) {\n      return;\n    }\n\n    const targetProgress = progress;\n\n    const setMainProgress = (value: number) => {\n      if (isNegative) {\n        setNegativeProgress(value);\n      } else {\n        setPositiveProgress(value);\n      }\n    };\n\n    if (animationDirection === 'forward' || animationDirection === 'backward') {\n      const isForward = animationDirection === 'forward';\n\n      setIsCycling(true);\n      setMainProgress(isForward ? 1 : 0);\n\n      setDisableLayerProgressTransition(true);\n      setLayerProgress(isForward ? 0 : 1);\n\n      timers.push(window.setTimeout(() => {\n        setDisableLayerProgressTransition(false);\n        setShowLayer(true);\n        setLayerProgress(targetProgress);\n        if (isForward) {\n          setDisableMainProgressTransition(true);\n          setMainProgress(0);\n        }\n      }, LAYER_PROGRESS_TRANSITION_MS));\n\n      timers.push(window.setTimeout(() => {\n        setDisableMainProgressTransition(true);\n        setDisableLayerProgressTransition(true);\n        setHideMainLayer(false);\n        setMainProgress(targetProgress);\n        setShowLayer(false);\n\n        timers.push(window.setTimeout(() => {\n          setDisableMainProgressTransition(false);\n          setDisableLayerProgressTransition(false);\n          setIsCycling(false);\n        }, APPLY_TRANSITION_DELAY_MS));\n      }, FULL_CYCLE_TRANSITION_MS));\n    }\n\n    return () => {\n      timers.forEach(clearTimeout);\n    };\n  }, [\n    progress, animationDirection, isNegative,\n    prevProgress, FULL_CYCLE_TRANSITION_MS,\n  ]);\n\n  const renderProgressLayer = (\n    isPositive: boolean,\n    currentProgress: number,\n    layerClassName?: string,\n    disableTransition?: boolean,\n  ) => {\n    const typeClass = isPositive ? styles.positiveProgress : styles.negativeProgress;\n    const progressVar = '--layer-progress';\n\n    return (\n      <div\n        className={buildClassName(\n          typeClass,\n          layerClassName,\n          disableTransition && styles.noTransition,\n        )}\n        style={`${progressVar}: ${currentProgress}`}\n      >\n        <div className={styles.left}>\n          <span>{displayLeftText}</span>\n        </div>\n        <div className={styles.right}>\n          <span>{displayRightText}</span>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      ref={parentContainerRef}\n      className={buildClassName(\n        styles.root,\n        hasFloatingBadge && styles.withBadge,\n        isPrimary && styles.primary,\n        isNegative && styles.negative,\n        shouldAnimateCaptions && styles.transitioning,\n        isCycling && styles.cycling,\n        className,\n      )}\n      style={buildStyle(\n        `--positive-progress: ${positiveProgress}`,\n        `--negative-progress: ${negativeProgress}`,\n        `--layer-progress: ${layerProgress}`,\n        `--shift-x: ${shiftX}`,\n        `--cycling-animation-badge-position: ${FULL_CYCLE_TRANSITION_MS}ms`,\n        `--cycling-animation-progress: ${LAYER_PROGRESS_TRANSITION_MS}ms`,\n      )}\n    >\n      {hasFloatingBadge && (\n        <div className={styles.badgeContainer}>\n          <div className={styles.floatingBadgeWrapper}>\n            <div\n              className={\n                buildClassName(styles.floatingBadge,\n                  (!prevBadgeWidth || prevBadgeWidth === 0)\n                  && styles.noTransition)\n              }\n              style={`width: ${badgeWidth}px;`}\n            >\n              <Transition\n                activeKey={badgeActiveKey}\n                name=\"fade\"\n                shouldCleanup\n              >\n                <div\n                  ref={floatingBadgeContentRef}\n                  className={styles.floatingBadgeContent}\n                >\n                  {floatingBadgeIcon && <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />}\n                  {floatingBadgeText && (\n                    <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                      {floatingBadgeText}\n                    </div>\n                  )}\n                </div>\n              </Transition>\n            </div>\n            <div className={styles.floatingBadgeTriangle} style={`left: ${beakPosition}px`}>\n              <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n                <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"currentColor\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className={styles.left}>\n        <span>{displayLeftText}</span>\n      </div>\n      <div className={styles.right}>\n        <span>{displayRightText}</span>\n      </div>\n\n      <div className={styles.progressWrapper}>\n        {renderProgressLayer(\n          true,\n          positiveProgress,\n          buildClassName(hideMainLayer && styles.hidden),\n          disableMainProgressTransition,\n        )}\n\n        {renderProgressLayer(\n          false,\n          negativeProgress,\n          buildClassName(hideMainLayer && styles.hidden),\n          disableMainProgressTransition,\n        )}\n\n        {renderProgressLayer(\n          !isNegative,\n          layerProgress,\n          buildClassName(\n            isNegative ? styles.negativeLayer : styles.positiveLayer,\n            showLayer && styles.show,\n          ),\n          disableLayerProgressTransition,\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumProgress);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CalendarModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default CalendarModalAsync;\n","import { useState } from '../lib/teact/teact';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../config';\nimport { getDayStartAt } from '../util/dates/dateFormat';\nimport { getServerTimeOffset } from '../util/serverTime';\nimport useLastCallback from './useLastCallback';\nimport useOldLang from './useOldLang';\n\nimport CalendarModal from '../components/common/CalendarModal.async';\n\ntype OnScheduledCallback = (scheduledAt: number) => void;\n\nconst useSchedule = (\n  canScheduleUntilOnline?: boolean,\n  onCancel?: () => void,\n  openAt?: number,\n) => {\n  const lang = useOldLang();\n  const [onScheduled, setOnScheduled] = useState<OnScheduledCallback | undefined>();\n\n  const handleMessageSchedule = useLastCallback((date: Date, isWhenOnline = false) => {\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : getServerTimeOffset());\n    onScheduled?.(scheduledAt);\n    setOnScheduled(undefined);\n  });\n\n  const handleMessageScheduleUntilOnline = useLastCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  });\n\n  const handleCloseCalendar = useLastCallback(() => {\n    setOnScheduled(undefined);\n    onCancel?.();\n  });\n\n  const requestCalendar = useLastCallback((whenScheduled: OnScheduledCallback) => {\n    setOnScheduled(() => whenScheduled);\n  });\n\n  const scheduledDefaultDate = openAt ? new Date(openAt * 1000) : new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  const calendar = (\n    <CalendarModal\n      isOpen={Boolean(onScheduled)}\n      withTimePicker\n      selectedAt={scheduledDefaultDate.getTime()}\n      maxAt={getDayStartAt(scheduledMaxDate)}\n      isFutureMode\n      secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n      onClose={handleCloseCalendar}\n      onSubmit={handleMessageSchedule}\n      onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n    />\n  );\n\n  return [requestCalendar, calendar] as const;\n};\n\nexport default useSchedule;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPeer } from '../../api/types';\nimport type { AvatarSize } from './Avatar';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar, { AVATAR_SIZES } from './Avatar';\n\nimport styles from './AvatarList.module.scss';\n\nconst DEFAULT_LIMIT = 3;\n\ntype OwnProps = {\n  size: AvatarSize;\n  peers?: ApiPeer[];\n  className?: string;\n  limit?: number;\n  badgeText?: string;\n};\n\nconst AvatarList: FC<OwnProps> = ({\n  peers,\n  size,\n  className,\n  limit = DEFAULT_LIMIT,\n  badgeText,\n}) => {\n  const lang = useOldLang();\n\n  const pxSize = typeof size === 'number' ? size : AVATAR_SIZES[size];\n\n  const renderingBadgeText = useMemo(() => {\n    if (badgeText) return badgeText;\n    if (!peers?.length || peers.length <= limit) return undefined;\n    return `+${peers.length - limit}`;\n  }, [badgeText, peers, limit]);\n\n  return (\n    <div\n      className={buildClassName(className, styles.root)}\n      style={`--_size: ${pxSize}px;`}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {peers?.slice(0, limit).map((peer) => <Avatar size={size} peer={peer} className={styles.avatar} />)}\n      {renderingBadgeText && (\n        <div className={styles.badge}>\n          {renderingBadgeText}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(AvatarList);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kXs18Nmi\",\"avatar\":\"XND8fhC1\",\"badge\":\"SHyAyGFO\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport Icon from './icons/Icon';\n\nimport styles from './MediaSpoiler.module.scss';\n\ntype OwnProps = {\n  isVisible: boolean;\n  withAnimation?: boolean;\n  thumbDataUri?: string;\n  isNsfw?: boolean;\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst BLUR_RADIUS = 25;\nconst ANIMATION_DURATION = 500;\n\nconst MediaSpoiler: FC<OwnProps> = ({\n  isVisible,\n  withAnimation,\n  thumbDataUri,\n  isNsfw,\n  className,\n  width,\n  height,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(\n    isVisible, undefined, true, withAnimation ? false : undefined, undefined, ANIMATION_DURATION,\n  );\n  const canvasRef = useCanvasBlur(thumbDataUri, !shouldRender, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!ref.current) return;\n    const el = ref.current;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const shiftX = x - (rect.width / 2);\n    const shiftY = y - (rect.height / 2);\n    requestMutation(() => {\n      el.setAttribute('style', `--click-shift-x: ${shiftX}px; --click-shift-y: ${shiftY}px`);\n    });\n  });\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.root, transitionClassNames, className, withAnimation && styles.maskAnimation)}\n      ref={ref}\n      onClick={withAnimation ? handleClick : undefined}\n    >\n      <canvas\n        ref={canvasRef}\n        className={styles.canvas}\n        width={width}\n        height={height}\n      />\n      <div className={styles.dots} />\n      {isNsfw && (\n        <span className={styles.nsfw}>\n          <Icon name=\"eye-crossed-outline\" className={styles.nsfwIcon} />\n          {lang('MediaSpoilerSensitive')}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaSpoiler);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qF2WgYVg\",\"mask-animation\":\"pNM3cgkY\",\"maskAnimation\":\"pNM3cgkY\",\"circle-cut\":\"WiW38HGg\",\"circleCut\":\"WiW38HGg\",\"dots\":\"XBor45hE\",\"canvas\":\"eULqS2yR\",\"nsfw\":\"FJGQoa6s\",\"nsfwIcon\":\"Y7JVRkxJ\",\"opacity-breath\":\"sW9ega1D\",\"opacityBreath\":\"sW9ega1D\",\"dots-animation\":\"mAAEjSPE\",\"dotsAnimation\":\"mAAEjSPE\"};","import type { AnimationLevel } from '../types';\n\nimport { ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN } from '../config.ts';\nimport { IS_ANDROID, IS_IOS } from './browser/windowEnvironment.ts';\n\nexport function resolveTransitionName(\n  name: 'slideOptimized' | 'slide' | 'layers',\n  animationLevel: AnimationLevel,\n  isDisabled = false,\n  isRtl = false,\n) {\n  if (isDisabled || animationLevel === ANIMATION_LEVEL_MIN) return 'none';\n\n  if (animationLevel === ANIMATION_LEVEL_MED) return 'slideFade';\n\n  return name === 'slideOptimized' ? (\n    isRtl ? 'slideOptimizedRtl' : 'slideOptimized'\n  ) : name === 'slide' ? (\n    isRtl ? 'slideRtl' : 'slide'\n  ) : (\n    IS_ANDROID ? 'slideFade' : IS_IOS ? 'slideLayers' : 'pushSlide'\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"YmM5biTv\",\"header\":\"S7WFT2bv\",\"pickerCategoryTitle\":\"YK1300x2\",\"peerChip\":\"gsKPBPoK\",\"pickerList\":\"yLCbiItq\",\"padded\":\"bXzIGw8s\",\"noResults\":\"dXWKD0ve\",\"onlineStatus\":\"d5GDOYh9\"};","import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n}: OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type {\n  ApiMessageActionGiftPremium,\n  ApiMessageActionGiftStars,\n  ApiMessageActionGiftTon } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n} from '../../../../global/selectors';\nimport { formatCurrency } from '../../../../util/formatCurrency';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars | ApiMessageActionGiftTon;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  const renderTonTitle = () => {\n    const { cryptoAmount, cryptoCurrency } = action;\n    const price = cryptoAmount\n      ? formatCurrency(lang, cryptoAmount, cryptoCurrency!, { asFontIcon: true })\n      : undefined;\n\n    return price;\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : action.type === 'giftStars' ? (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          ) : renderTonTitle()}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message\n            && (lang(action.type === 'giftTon' ? 'DescriptionAboutTon'\n              : action.type === 'giftPremium'\n                ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): Complete<StateProps> => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : action.type === 'giftStars'\n        ? selectGiftStickerForStars(global, action.stars)\n        : selectGiftStickerForTon(global, action.cryptoAmount);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiPeer, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  sender?: ApiPeer;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  currentUserId,\n  action,\n  sender,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  const peerLink = useMemo(() => {\n    const peer = channel || sender;\n    const peerTitle = peer && getPeerTitle(lang, peer);\n    const peerFallbackText = lang('ActionFallbackChat');\n\n    return renderPeerLink(peer?.id, peerTitle || peerFallbackText);\n  }, [channel, sender, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>\n          {lang(action.type !== 'giftCode' || action.isViaGiveaway\n            ? 'ActionGiveawayResultTitle' : 'GiftInfoTitle')}\n        </h3>\n        <div>\n          {action.type === 'giftCode' && (\n            action.isViaGiveaway ? lang(\n              'ActionGiveawayResultPremiumText',\n              { channel: channelLink, months: action.months },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              })\n              : translateWithYou(\n                lang,\n                'ActionGiftCodeSubscriptionText',\n                sender?.id === currentUserId,\n                { peer: peerLink, months: action.months },\n                {\n                  pluralValue: action.months,\n                  renderTextFilters: ['br'],\n                })\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId!;\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = action.boostPeerId ? selectChat(global, action.boostPeerId) : undefined;\n\n    return {\n      currentUserId,\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import { memo, useMemo, useRef } from '@teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { isChatChannel } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport useFlag from '../../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift', styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            shouldLoop={isHover}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {Boolean(action.gift.availabilityTotal) && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', {\n            total: formatIntegerCompact(lang, action.gift.availabilityTotal),\n          })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useRef } from '@teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions.ts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const shouldShowFrom = !isOutgoing || action.isUpgrade;\n  const peer = shouldShowFrom && !action.isUpgrade ? sender : recipient;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName('interactive-gift', styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          patternSize={14}\n          yPosition={9.5 * REM}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            shouldLoop={isHover}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            shouldShowFrom ? 'ActionStarGiftFrom' : 'ActionStarGiftTo',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'openSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","import { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { TON_CURRENCY_CODE } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\nimport { selectIsMonoforumAdmin, selectMonoforumChannel,\n  selectReplyMessage,\n  selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport renderText from '../../../common/helpers/renderText';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiPeer;\n  originalSender?: ApiPeer;\n  ageMinSeconds: number;\n  isAdmin: boolean;\n};\n\nconst SuggestedPostApproval = ({\n  message,\n  action,\n  sender,\n  chat,\n  originalSender,\n  ageMinSeconds,\n  isAdmin,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { scheduleDate, amount } = action;\n\n  const chatTitle = chat && getPeerFullTitle(lang, chat);\n  const renderChatLink = () => renderPeerLink(chat?.id, chatTitle || lang('ActionFallbackChat'));\n\n  const originalSenderTitle = originalSender && getPeerFullTitle(lang, originalSender);\n  const originalSenderLink = renderPeerLink(originalSender?.id, originalSenderTitle || lang('ActionFallbackUser'));\n\n  const publishDate = scheduleDate\n    ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n    : lang('SuggestMessageAnytime');\n\n  const isPostPublished = scheduleDate ? scheduleDate <= getServerTime() : false;\n\n  const currency = amount?.currency;\n  const amountValue = amount?.amount || 0;\n\n  const formattedAmount = amountValue > 0\n    ? (currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountValue))\n      : formatStarsAsText(lang, amountValue))\n    : undefined;\n\n  const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostApprovalTitle}>\n        {renderText(lang('SuggestedPostAgreementReached'))}\n      </div>\n\n      <div className={styles.suggestedPostApprovalSection}>\n        {translateWithYou(\n          lang,\n          isPostPublished ? 'SuggestedPostPublished' : 'SuggestedPostPublishSchedule',\n          !isAdmin,\n          { peer: renderChatLink(), date: publishDate },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {formattedAmount && (\n        <div className={styles.suggestedPostApprovalSection}>\n          {translateWithYou(lang,\n            'SuggestedPostCharged',\n            !isAdmin,\n            {\n              user: originalSenderLink,\n              amount: formattedAmount,\n            },\n            { withMarkdown: true },\n          )}\n        </div>\n      )}\n\n      {isPostPublished && formattedAmount && (\n        <>\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostReceiveAmount', !isAdmin, {\n              peer: renderChatLink(),\n              duration,\n            }, { withMarkdown: true })}\n          </div>\n\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostRefund', !isAdmin, {\n              peer: renderChatLink(),\n              duration,\n            }, { withMarkdown: true })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const sender = selectSender(global, message);\n    const chat = selectMonoforumChannel(global, message.chatId);\n\n    const replyInfo = getMessageReplyInfo(message);\n    let originalSender: ApiPeer | undefined;\n\n    if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n      const replyMessage = selectReplyMessage(global, message);\n      if (replyMessage) {\n        originalSender = selectSender(global, replyMessage);\n      }\n    }\n\n    const { appConfig } = global;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const isAdmin = chat ? Boolean(selectIsMonoforumAdmin(global, message.chatId)) : false;\n\n    return {\n      sender,\n      chat,\n      originalSender,\n      ageMinSeconds,\n      isAdmin,\n    };\n  },\n)(SuggestedPostApproval));\n","import { memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Sparkles from '../../../common/Sparkles';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  replyMessageSender?: ApiPeer;\n  replyMessage?: ApiMessage;\n};\n\nconst SuggestedPostBalanceTooLow = ({\n  onClick,\n  message,\n  sender,\n  replyMessageSender,\n  replyMessage,\n}: OwnProps & StateProps) => {\n  const { openStarsBalanceModal } = getActions();\n  const lang = useLang();\n\n  const handleGetMoreStars = useLastCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openStarsBalanceModal({});\n  });\n\n  const targetPeer = replyMessageSender || sender;\n  const peerTitle = targetPeer && getPeerFullTitle(lang, targetPeer);\n  const peerLink = renderPeerLink(targetPeer?.id, peerTitle || lang('ActionFallbackUser'));\n\n  const currency = replyMessage?.suggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE;\n  const currencyName = currency === TON_CURRENCY_CODE ? lang('CurrencyTon') : lang('CurrencyStars');\n  const buyButtonText = currency === TON_CURRENCY_CODE ? lang('ButtonTopUpViaFragment') : lang('ButtonBuyStars');\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostBalanceTooLowBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostBalanceTooLowTitle}>\n        {lang('SuggestedPostBalanceTooLow', {\n          peer: peerLink,\n          currency: currencyName,\n        }, { withNodes: true, withMarkdown: true })}\n      </div>\n\n      {!message.isOutgoing && (\n        <div className={styles.actionButton} onClick={handleGetMoreStars}>\n          <Sparkles preset=\"button\" />\n          {buyButtonText}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const sender = selectSender(global, message);\n\n    const replyMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n      ? selectChatMessage(global, message.chatId, message.replyInfo.replyToMsgId)\n      : undefined;\n\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage) : undefined;\n\n    return {\n      sender,\n      replyMessageSender,\n      replyMessage,\n    };\n  },\n)(SuggestedPostBalanceTooLow));\n","import { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n};\n\nconst SuggestedPostRejected = ({\n  message,\n  action,\n  sender,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const { isOutgoing } = message;\n  const { rejectComment } = action;\n\n  const senderTitle = sender && getPeerTitle(lang, sender);\n  const senderLink = renderPeerLink(sender?.id, senderTitle || lang('ActionFallbackUser'));\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostRejectedContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostRejectedTitle}>\n        <Icon className={styles.rejectedIcon} name=\"close\" />\n        {translateWithYou(\n          lang,\n          rejectComment ? 'SuggestedPostRejectedWithReason' : 'SuggestedPostRejected',\n          isOutgoing,\n          { peer: senderLink },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {rejectComment && (\n        <div className={styles.suggestedPostRejectedComment}>\n          {lang('SuggestedPostRejectedComment', { comment: rejectComment })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    const sender = selectSender(global, message);\n\n    return {\n      sender,\n    };\n  },\n)(SuggestedPostRejected));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  const ref = useRef<HTMLDivElement>();\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n    && (isExpanded || isAnimating)\n    && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n  const lang = useLang();\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>\n          {formatIntegerCompact(lang, channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): Complete<StateProps> => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport GiveawayPrize from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport SuggestedPostApproval from './actions/SuggestedPostApproval';\nimport SuggestedPostBalanceTooLow from './actions/SuggestedPostBalanceTooLow';\nimport SuggestedPostRejected from './actions/SuggestedPostRejected';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n  isResizingContainer?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isAccountFrozen?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS = new Set<ApiMessageAction['type']>([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'todoCompletions',\n  'todoAppendTasks',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS = new Set<ApiMessageAction['type']>(['giftCode', 'prizeStars',\n  'suggestProfilePhoto', 'suggestedPostApproval']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  isResizingContainer,\n  scrollTargetPosition,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isAccountFrozen,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n    focusMessage,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n  const isClickableText = action.type === 'suggestedPostSuccess';\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    scrollTargetPosition,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen,\n    !IS_TAURI,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ chatId, messageIds: [id] });\n    }\n  }, [hasUnreadReaction, chatId, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftTon':\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n\n      case 'suggestedPostApproval': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n\n      case 'suggestedPostSuccess': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <GiveawayPrize\n            action={action}\n            sender={sender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftTon':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      case 'suggestedPostApproval':\n        if (action.isBalanceTooLow) {\n          return (\n            <SuggestedPostBalanceTooLow\n              message={message}\n              action={action}\n              onClick={handleClick}\n            />\n          );\n        }\n        return action.isRejected ? (\n          <SuggestedPostRejected\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        ) : (\n          <SuggestedPostApproval\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, message, observeIntersectionForLoading, sender, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        'message-list-item',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isAccountFrozen={isAccountFrozen}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { themes } = global.settings;\n\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n      isResizingContainer, scrollTargetPosition,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n      isResizingContainer,\n      scrollTargetPosition,\n      isAccountFrozen,\n    };\n  },\n)(ActionMessage));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nconst useHorizontalScroll = (\n  containerRef: ElementRef<HTMLDivElement>,\n  isDisabled?: boolean,\n  shouldPreventDefault = false,\n) => {\n  useEffect(() => {\n    if (isDisabled) {\n      return undefined;\n    }\n\n    const container = containerRef.current!;\n\n    function handleScroll(e: WheelEvent) {\n      // Ignore horizontal scroll and let it work natively (e.g. on touchpad)\n      if (!e.deltaX) {\n        container.scrollLeft += e.deltaY / 4;\n        if (shouldPreventDefault) e.preventDefault();\n      }\n    }\n\n    container.addEventListener('wheel', handleScroll, { passive: !shouldPreventDefault });\n\n    return () => {\n      container.removeEventListener('wheel', handleScroll);\n    };\n  }, [containerRef, isDisabled, shouldPreventDefault]);\n};\n\nexport default useHorizontalScroll;\n","import { memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { preloadImage } from '../../../util/files';\nimport { hexToRgb } from '../../../util/switchTheme.ts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport styles from './RadialPatternBackground.module.scss';\n\ntype OwnProps = {\n  backgroundColors: string[];\n  patternIcon?: ApiSticker;\n  patternColor?: string;\n  patternSize?: number;\n  ringsCount?: number;\n  ovalFactor?: number;\n  withLinearGradient?: boolean;\n  className?: string;\n  clearBottomSector?: boolean;\n  yPosition?: number;\n};\n\nconst BASE_RING_ITEM_COUNT = 8;\nconst RING_INCREMENT = 0.5;\nconst CENTER_EMPTINESS = 0.1;\nconst MAX_RADIUS = 0.42;\nconst MIN_SIZE = 4 * REM;\n\nconst DEFAULT_PATTERN_SIZE = 20;\nconst DEFAULT_RINGS_COUNT = 3;\nconst DEFAULT_OVAL_FACTOR = 1.4;\n\nconst RadialPatternBackground = ({\n  backgroundColors,\n  patternIcon,\n  patternColor,\n  patternSize = DEFAULT_PATTERN_SIZE,\n  ringsCount = DEFAULT_RINGS_COUNT,\n  ovalFactor = DEFAULT_OVAL_FACTOR,\n  withLinearGradient,\n  clearBottomSector,\n  className,\n  yPosition,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const canvasRef = useRef<HTMLCanvasElement>();\n\n  const [getContainerSize, setContainerSize] = useSignal({ width: 0, height: 0 });\n\n  const dpr = useDevicePixelRatio();\n\n  const [emojiImage, setEmojiImage] = useState<HTMLImageElement | undefined>();\n\n  const previewMediaHash = patternIcon && getStickerMediaHash(patternIcon, 'preview');\n  const previewUrl = useMedia(previewMediaHash);\n\n  useEffect(() => {\n    if (!previewUrl) return;\n    preloadImage(previewUrl).then(setEmojiImage);\n  }, [previewUrl]);\n\n  const patternPositions = useMemo(() => {\n    const coordinates: { x: number; y: number; sizeFactor: number }[] = [];\n    for (let ring = 1; ring <= ringsCount; ring++) {\n      const ringItemCount = Math.floor(BASE_RING_ITEM_COUNT * (1 + (ring - 1) * RING_INCREMENT));\n      const ringProgress = ring / ringsCount;\n      const ringRadius = CENTER_EMPTINESS + (MAX_RADIUS - CENTER_EMPTINESS) * ringProgress;\n      const angleShift = ring % 2 === 0 ? Math.PI / ringItemCount : 0;\n\n      for (let i = 0; i < ringItemCount; i++) {\n        const angle = (i / ringItemCount) * Math.PI * 2 + angleShift;\n\n        if (clearBottomSector && angle > Math.PI * 0.45 && angle < Math.PI * 0.55) {\n          continue;\n        }\n\n        const xOffset = ringRadius * Math.cos(angle) * ovalFactor;\n        const yOffset = ringRadius * Math.sin(angle);\n        const sizeFactor = 1.65 - ringProgress + Math.random() / ringsCount;\n\n        coordinates.push({\n          x: xOffset,\n          y: yOffset,\n          sizeFactor,\n        });\n      }\n    }\n    return coordinates;\n  }, [clearBottomSector, ovalFactor, ringsCount]);\n\n  useResizeObserver(containerRef, (entry) => {\n    setContainerSize({\n      width: entry.contentRect.width,\n      height: entry.contentRect.height,\n    });\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      setContainerSize({\n        width: container.clientWidth,\n        height: container.clientHeight,\n      });\n    }\n  }, [setContainerSize]);\n\n  const draw = useLastCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !emojiImage) return;\n    const ctx = canvas.getContext('2d')!;\n    const { width, height } = canvas;\n    if (!width || !height) return;\n\n    const centerX = width / 2;\n    const centerY = yPosition !== undefined ? yPosition * dpr : height / 2;\n\n    ctx.clearRect(0, 0, width, height);\n\n    patternPositions.forEach(({\n      x, y, sizeFactor,\n    }) => {\n      const renderX = x * Math.max(width, MIN_SIZE * dpr) + centerX;\n      const renderY = yPosition !== undefined ? y * Math.max(width, MIN_SIZE * dpr) + centerY\n        : y * Math.max(height, MIN_SIZE * dpr) + centerY;\n      const size = patternSize * dpr * sizeFactor;\n\n      ctx.drawImage(emojiImage, renderX - size / 2, renderY - size / 2, size, size);\n    });\n\n    ctx.fillStyle = adjustBrightness(backgroundColors[1] ?? backgroundColors[0], -0.075);\n    ctx.globalCompositeOperation = 'source-in';\n    ctx.fillRect(0, 0, width, height);\n\n    const radialGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, width / 2);\n    radialGradient.addColorStop(0.75, 'rgb(255 255 255 / 0)');\n    radialGradient.addColorStop(1, 'rgb(255 255 255 / 0.75)');\n\n    // Scale around the gradient center\n    ctx.translate(centerX, centerY);\n    ctx.scale(1, 1 / ovalFactor);\n    ctx.translate(-centerX, -centerY);\n\n    // Alpha mask\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.fillStyle = radialGradient;\n    // The higher the ovalFactor, the more we need to extend vertically\n    const fillHeight = height * ovalFactor;\n    ctx.fillRect(0, -fillHeight, width, fillHeight * 2);\n  });\n\n  useEffect(() => {\n    draw();\n  }, [emojiImage, patternColor, patternPositions, yPosition, ovalFactor]);\n\n  useLayoutEffect(() => {\n    const { width, height } = getContainerSize();\n    const canvas = canvasRef.current;\n    if (!width || !height || !canvas) {\n      return;\n    }\n\n    requestMutation(() => {\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n\n      draw();\n    });\n  }, [getContainerSize, dpr]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, withLinearGradient && styles.withLinearGradient, className)}\n      style={buildStyle(\n        `--_bg-light: ${backgroundColors[0]}`,\n        `--_bg-dark: ${backgroundColors[1] ?? backgroundColors[0]}`,\n        yPosition !== undefined && `--_y-shift: ${yPosition}px`,\n      )}\n    >\n      <canvas\n        ref={canvasRef}\n        className={buildClassName(styles.canvas, emojiImage && styles.showing)}\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n};\n\nexport default memo(RadialPatternBackground);\n\nfunction adjustBrightness(hex: string, delta: number) {\n  const factor = 1 + delta;\n  const rgba = hexToRgb(hex);\n  const darkenedRgba = [\n    Math.min(255, Math.round(rgba.r * factor)),\n    Math.min(Math.round(rgba.g * factor)),\n    Math.min(Math.round(rgba.b * factor)),\n    rgba.a ?? 1,\n  ] as const;\n\n  return rgbaToHex(...darkenedRgba);\n}\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number) {\n  return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}${Math.round(a * 255).toString(16)}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Af3tYFMg\",\"withLinearGradient\":\"NorYkjxC\",\"canvas\":\"GbpiDSS_\",\"showing\":\"Y5FyX1oo\"};","import windowSize from '../windowSize';\n\nexport function isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport { IS_ANDROID, IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const effectRef = useRef<HTMLDivElement>();\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import type React from '../../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  isOutside?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectStarsState(global: GlobalState) {\n  return global.stars;\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  chatId,\n  messageId,\n  isOutside,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  const ref = useRef<HTMLButtonElement>();\n  const counterRef = useRef<HTMLSpanElement>();\n  const animationRef = useRef<Animation>();\n\n  const lang = useLang();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const starsState = useSelector(selectStarsState);\n  const areStarsLoaded = Boolean(starsState);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && amount > starsState.balance.amount) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, starsState?.balance, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isOutside && styles.outside,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(lang, reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(lang, reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  isAccountFrozen,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n    openFrozenAccountModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n  const withServiceReactions = Boolean(message.areReactionsPossible && message.reactions);\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(\n        'Reactions',\n        isOutside && 'is-outside',\n        withServiceReactions && 'is-service',\n      )}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            isOutside={isOutside}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { requestMeasure, requestMutation } from '../lib/fasterdom/fasterdom';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../util/browser/windowEnvironment';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useCanvasBlur(\n  dataUri?: string,\n  isDisabled = false,\n  withRaf?: boolean,\n  radius = RADIUS,\n  preferredWidth?: number,\n  preferredHeight?: number,\n) {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const isStarted = useRef();\n\n  useSyncEffect(() => {\n    if (!isDisabled) {\n      isStarted.current = false;\n    }\n  }, [dataUri, isDisabled]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!dataUri || !canvas || isDisabled || isStarted.current) {\n      return;\n    }\n\n    isStarted.current = true;\n\n    const img = new Image();\n\n    const processBlur = () => {\n      const width = preferredWidth || img.width;\n      const height = preferredHeight || img.height;\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${radius}px)`;\n        }\n\n        ctx.drawImage(img, -radius * 2, -radius * 2, width + radius * 4, height + radius * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, radius, ITERATIONS);\n        }\n      });\n    };\n\n    img.onload = () => {\n      if (withRaf) {\n        requestMeasure(processBlur);\n      } else {\n        processBlur();\n      }\n    };\n\n    img.src = dataUri;\n  }, [dataUri, isDisabled, preferredHeight, preferredWidth, radius, withRaf]);\n\n  return canvasRef;\n}\n","import { type TeactNode } from '../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport styles from './PickerItem.module.scss';\n\ntype OwnProps = {\n  title: TeactNode;\n  subtitle?: TeactNode;\n  avatarElement?: TeactNode;\n  inputElement?: TeactNode;\n  inputPosition?: 'start' | 'end';\n  disabled?: boolean;\n  inactive?: boolean;\n  ripple?: boolean;\n  className?: string;\n  titleClassName?: string;\n  subtitleClassName?: string;\n  style?: string;\n  onClick?: NoneToVoidFunction;\n  onDisabledClick?: NoneToVoidFunction;\n};\n\nconst PickerItem = ({\n  title,\n  subtitle,\n  avatarElement,\n  inputElement,\n  inputPosition = 'start',\n  disabled,\n  inactive,\n  ripple,\n  className,\n  titleClassName,\n  subtitleClassName,\n  style,\n  onClick,\n  onDisabledClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n\n  const isClickable = !inactive && !disabled;\n  const handleClick = useLastCallback(() => {\n    if (inactive) return;\n\n    if (disabled) {\n      onDisabledClick?.();\n      return;\n    }\n\n    onClick?.();\n  });\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        subtitle && styles.multiline,\n        disabled && styles.disabled,\n        isClickable && styles.clickable,\n        avatarElement && styles.withAvatar,\n        className,\n      )}\n      onClick={handleClick}\n      style={style}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role={isClickable ? 'button' : undefined}\n      tabIndex={isClickable ? 0 : undefined}\n    >\n      {!disabled && !inactive && ripple && <RippleEffect />}\n      {Boolean(inputElement) && (\n        <div className={buildClassName(\n          styles.input,\n          inputPosition === 'end' ? styles.endInput : styles.startInput,\n        )}\n        >\n          {inputElement}\n        </div>\n      )}\n      {Boolean(avatarElement) && (\n        <div className={styles.avatarElement}>\n          {avatarElement}\n        </div>\n      )}\n      <div className={buildClassName(styles.title, titleClassName)}>\n        {title}\n      </div>\n      {Boolean(subtitle) && (\n        <div className={buildClassName(styles.subtitle, subtitleClassName)}>\n          {subtitle}\n        </div>\n      )}\n      {!inputElement && IS_IOS && (\n        <div className={styles.separator} />\n      )}\n    </div>\n  );\n};\n\nexport default PickerItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OHkx_W75\",\"clickable\":\"VUSwo4t5\",\"separator\":\"P53DrbWA\",\"disabled\":\"tvZeVJPh\",\"title\":\"JSSC0N8V\",\"subtitle\":\"OYmzCSp2\",\"withAvatar\":\"dMT9byM6\",\"multiline\":\"neXqB2_A\",\"input\":\"kmjqObdP\",\"startInput\":\"F0Hv3EQm\",\"endInput\":\"iqGhSQGm\",\"avatarElement\":\"dnAaRPCo\"};","import { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n","import { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSponsoredMessage } from '../../../api/types';\nimport type { TextPart, ThreadId } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport {\n  getMessageStatefulContent,\n  getMessageTextWithFallback,\n} from '../../../global/helpers';\nimport {\n  getMessageSummaryDescription,\n  getMessageSummaryEmoji,\n  getMessageSummaryText,\n  TRUNCATED_SUMMARY_LENGTH,\n} from '../../../global/helpers/messageSummary';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type LangFn } from '../../../util/localization';\nimport trimText from '../../../util/trimText';\nimport renderText from './renderText';\nimport { renderTextWithEntities } from './renderTextWithEntities';\n\nexport function renderMessageText({\n  message,\n  highlight,\n  emojiSize,\n  asPreview,\n  truncateLength,\n  isProtected,\n  forcePlayback,\n  shouldRenderAsHtml,\n  isForMediaViewer,\n  threadId,\n  maxTimestamp,\n}: {\n  message: ApiMessage | ApiSponsoredMessage;\n  highlight?: string;\n  emojiSize?: number;\n  asPreview?: boolean;\n  truncateLength?: number;\n  isProtected?: boolean;\n  forcePlayback?: boolean;\n  shouldRenderAsHtml?: boolean;\n  isForMediaViewer?: boolean;\n  threadId?: ThreadId;\n  maxTimestamp?: number;\n}) {\n  const { text, entities } = message.content.text || {};\n\n  if (!text) {\n    const contentNotSupportedText = getMessageTextWithFallback(getTranslationFn(), message)?.text;\n    return contentNotSupportedText ? [trimText(contentNotSupportedText, truncateLength)] : undefined;\n  }\n\n  const messageKey = getMessageKey(message);\n\n  return renderTextWithEntities({\n    text: trimText(text, truncateLength),\n    entities,\n    highlight,\n    emojiSize,\n    shouldRenderAsHtml,\n    containerId: `${isForMediaViewer ? 'mv-' : ''}${messageKey}`,\n    asPreview,\n    isProtected,\n    forcePlayback,\n    messageId: 'id' in message ? message.id : undefined,\n    chatId: message.chatId,\n    threadId,\n    maxTimestamp,\n  });\n}\n\n// TODO Use Message Summary component instead\nexport function renderMessageSummary(\n  lang: LangFn,\n  message: ApiMessage,\n  noEmoji = false,\n  highlight?: string,\n  truncateLength = TRUNCATED_SUMMARY_LENGTH,\n): TextPart[] {\n  const { entities } = message.content.text || {};\n\n  const global = getGlobal();\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const hasSpoilers = entities?.some((e) => e.type === ApiMessageEntityTypes.Spoiler);\n  const hasCustomEmoji = entities?.some((e) => e.type === ApiMessageEntityTypes.CustomEmoji);\n  if (!hasSpoilers && !hasCustomEmoji) {\n    const text = trimText(getMessageSummaryText(lang, message, statefulContent, noEmoji), truncateLength);\n\n    if (highlight) {\n      return renderText(text, ['emoji', 'highlight'], { highlight });\n    } else {\n      return renderText(text);\n    }\n  }\n\n  const emoji = !noEmoji && getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n\n  const text = renderMessageText({\n    message, highlight, asPreview: true, truncateLength,\n  });\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text);\n\n  return [\n    ...renderText(emojiWithSpace),\n    ...(Array.isArray(description) ? description : [description]),\n  ].filter(Boolean);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ApiMessage } from '../api/types';\n\nexport default function useEnsureMessage(\n  chatId: string,\n  messageId?: number,\n  message?: ApiMessage,\n  replyOriginForId?: number,\n  isDisabled?: boolean,\n) {\n  const { loadMessage } = getActions();\n\n  useEffect(() => {\n    if (isDisabled) return;\n    if (messageId && !message) {\n      loadMessage({ chatId, messageId, replyOriginForId: replyOriginForId! });\n    }\n  }, [isDisabled, chatId, message, messageId, replyOriginForId]);\n}\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getGroupStatus, getMainUsername, getUserStatus, isUserOnline } from '../../../global/helpers';\nimport { getPeerTypeKey, isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport PeerChip from '../PeerChip';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\ntype SingleModeProps<CategoryType extends string> = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedId?: string;\n  selectedIds?: never; // Help TS to throw an error if this is passed\n  selectedCategory?: CategoryType;\n  selectedCategories?: never;\n  onSelectedCategoryChange?: (category: CategoryType) => void;\n  onSelectedIdChange?: (id: string) => void;\n};\n\ntype MultipleModeProps<CategoryType extends string> = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedId?: never;\n  selectedIds: string[];\n  lockedSelectedIds?: string[];\n  lockedUnselectedIds?: string[];\n  selectedCategory?: never;\n  selectedCategories?: CategoryType[];\n  onSelectedCategoriesChange?: (categories: CategoryType[]) => void;\n  onSelectedIdsChange?: (Ids: string[]) => void;\n};\n\ntype OwnProps<CategoryType extends string> = {\n  className?: string;\n  categories?: UniqueCustomPeer<CategoryType>[];\n  itemIds: string[];\n  lockedUnselectedSubtitle?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  categoryPlaceholderKey?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  itemClassName?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isSearchable?: boolean;\n  forceShowSelf?: boolean;\n  isViewOnly?: boolean;\n  withStatus?: boolean;\n  withPeerTypes?: boolean;\n  withPeerUsernames?: boolean;\n  withDefaultPadding?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (id: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps<CategoryType> | MultipleModeProps<CategoryType>);\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst ITEM_CLASS_NAME = 'PeerPickerItem';\n\nconst PeerPicker = <CategoryType extends string = CustomPeerType>({\n  className,\n  categories,\n  itemIds,\n  categoryPlaceholderKey,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  itemClassName,\n  isLoading,\n  noScrollRestore,\n  isSearchable,\n  lockedUnselectedSubtitle,\n  forceShowSelf,\n  isViewOnly,\n  itemInputType,\n  withStatus,\n  withPeerTypes,\n  withPeerUsernames,\n  withDefaultPadding,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps<CategoryType>) => {\n  const lang = useOldLang();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedIds = allowMultiple ? optionalProps.lockedSelectedIds : undefined;\n  const lockedUnselectedIds = allowMultiple ? optionalProps.lockedUnselectedIds : undefined;\n  const selectedCategories = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedCategories;\n    }\n\n    return optionalProps.selectedCategory ? [optionalProps.selectedCategory] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedCategory, optionalProps.selectedCategories]);\n\n  const selectedIds = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedIds;\n    }\n\n    return optionalProps.selectedId ? [optionalProps.selectedId] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedId, optionalProps.selectedIds]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [isSearchable]);\n\n  const lockedSelectedIdsSet = useMemo(() => new Set(lockedSelectedIds), [lockedSelectedIds]);\n  const lockedUnselectedIdsSet = useMemo(() => new Set(lockedUnselectedIds), [lockedUnselectedIds]);\n\n  const unlockedSelectedIds = useMemo(() => {\n    return selectedIds.filter((id) => !lockedSelectedIdsSet.has(id));\n  }, [lockedSelectedIdsSet, selectedIds]);\n\n  const categoriesByType = useMemo(() => {\n    if (!categories) return {};\n    return buildCollectionByKey(categories, 'type');\n  }, [categories]);\n\n  const sortedItemIds = useMemo(() => {\n    if (filterValue) {\n      return itemIds;\n    }\n\n    const lockedSelectedBucket: string[] = [];\n    const unlockedBucket: string[] = [];\n    const lockedUnselectableBucket: string[] = [];\n\n    itemIds.forEach((id) => {\n      if (lockedSelectedIdsSet.has(id)) {\n        lockedSelectedBucket.push(id);\n      } else if (lockedUnselectedIdsSet.has(id)) {\n        lockedUnselectableBucket.push(id);\n      } else {\n        unlockedBucket.push(id);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket);\n  }, [filterValue, itemIds, lockedSelectedIdsSet, lockedUnselectedIdsSet]);\n\n  const handleItemClick = useLastCallback((id: string) => {\n    if (lockedSelectedIdsSet.has(id)) {\n      onDisabledClick?.(id, true);\n      return;\n    }\n\n    if (lockedUnselectedIdsSet.has(id)) {\n      onDisabledClick?.(id, false);\n      return;\n    }\n\n    if (allowMultiple && categoriesByType[id]) {\n      const categoryType = categoriesByType[id].type;\n      const newSelectedCategories = selectedCategories?.slice() || [];\n      if (newSelectedCategories.includes(categoryType)) {\n        newSelectedCategories.splice(newSelectedCategories.indexOf(categoryType), 1);\n      } else {\n        newSelectedCategories.push(categoryType);\n      }\n      optionalProps.onSelectedCategoriesChange?.(newSelectedCategories);\n\n      return;\n    }\n\n    if (allowMultiple) {\n      const newSelectedIds = selectedIds.slice();\n      if (newSelectedIds.includes(id)) {\n        newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n      } else {\n        newSelectedIds.push(id);\n      }\n      optionalProps.onSelectedIdsChange?.(newSelectedIds);\n\n      return;\n    }\n\n    if (categoriesByType[id]) {\n      optionalProps.onSelectedCategoryChange?.(categoriesByType[id].type);\n      return;\n    }\n\n    optionalProps.onSelectedIdChange?.(id);\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemIds, Boolean(filterValue),\n  );\n\n  const renderItem = useCallback((id: string, isCategory?: boolean) => {\n    const global = getGlobal();\n    const category = isCategory ? categoriesByType[id] : undefined;\n    const peer = !isCategory ? selectPeer(global, id) : undefined;\n\n    const peerOrCategory = peer || category;\n    if (!peerOrCategory) {\n      if (DEBUG) {\n        return (\n          <div key={id}>\n            No peer or category with ID\n            {id}\n          </div>\n        );\n      }\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? (peer.isSelf && !forceShowSelf) : undefined;\n\n    const isAlwaysUnselected = lockedUnselectedIdsSet.has(id);\n    const isAlwaysSelected = lockedSelectedIdsSet.has(id);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = category ? selectedCategories?.includes(category.type) : selectedIds.includes(id);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} onlyInput />;\n      }\n      return undefined;\n    }\n\n    function getSubtitle() {\n      if (isAlwaysUnselected) return [lockedUnselectedSubtitle];\n      if (!peer) return undefined;\n\n      if (withPeerUsernames) {\n        const username = getMainUsername(peer);\n        if (username) {\n          return [`@${username}`];\n        }\n      }\n\n      if (withStatus) {\n        if (isApiPeerChat(peer)) {\n          return [getGroupStatus(lang, peer)];\n        }\n\n        const userStatus = selectUserStatus(global, peer.id);\n        return [\n          getUserStatus(lang, peer, userStatus),\n          buildClassName(isUserOnline(peer, userStatus, true) && styles.onlineStatus),\n        ];\n      }\n\n      if (withPeerTypes) {\n        const langKey = getPeerTypeKey(peer);\n        return langKey && [lang(langKey)];\n      }\n\n      return undefined;\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={<FullNameTitle peer={peerOrCategory} />}\n        avatarElement={(\n          <Avatar\n            peer={peer || category}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n        inputPosition=\"end\"\n\n        onClick={() => handleItemClick(id)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(id, isAlwaysSelected))}\n      />\n    );\n  }, [\n    categoriesByType, forceShowSelf, isViewOnly, itemClassName, itemInputType, lang, lockedSelectedIdsSet,\n    lockedUnselectedIdsSet, lockedUnselectedSubtitle, onDisabledClick, selectedCategories, selectedIds,\n    withPeerTypes, withStatus, withPeerUsernames,\n  ]);\n\n  const beforeChildren = useMemo(() => {\n    if (!categories?.length) return undefined;\n    return (\n      <div key=\"categories\">\n        {categoryPlaceholderKey && <div className={styles.pickerCategoryTitle}>{lang(categoryPlaceholderKey)}</div>}\n        {categories?.map((category) => renderItem(category.type, true))}\n        <div className={styles.pickerCategoryTitle}>{lang('FilterChats')}</div>\n      </div>\n    );\n  }, [categories, categoryPlaceholderKey, lang, renderItem]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {selectedCategories?.map((category) => (\n            <PeerChip\n              className={styles.peerChip}\n              customPeer={categoriesByType[category]}\n              onClick={handleItemClick}\n              clickArg={category}\n              canClose\n            />\n          ))}\n          {lockedSelectedIds?.map((id, i) => (\n            <PeerChip\n              className={styles.peerChip}\n              peerId={id}\n              isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n              forceShowSelf={forceShowSelf}\n              onClick={handleItemClick}\n              clickArg={id}\n            />\n          ))}\n          {unlockedSelectedIds.map((id, i) => (\n            <PeerChip\n              className={styles.peerChip}\n              peerId={id}\n              isMinimized={\n                shouldMinimize && i + (lockedSelectedIds?.length || 0) < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT\n              }\n              canClose\n              onClick={handleItemClick}\n              clickArg={id}\n            />\n          ))}\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('SelectChat')}\n          />\n        </div>\n      )}\n\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportIds}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          beforeChildren={beforeChildren}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportIds.map((id) => renderItem(id))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className={styles.noResults}>{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PeerPicker);\n","import useDebouncedCallback from './useDebouncedCallback';\n\nexport default function useRunDebounced(ms: number, noFirst?: boolean, noLast?: boolean, deps: any = []) {\n  return useDebouncedCallback((cb: NoneToVoidFunction) => {\n    cb();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, deps, ms, noFirst, noLast);\n}\n","import { getGlobal } from '../global';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { selectCanAnimateInterface } from '../global/selectors';\nimport { animate } from './animation';\n\nconst DEFAULT_DURATION = 300;\n\nconst stopById = new Map<string, VoidFunction>();\n\nexport default function animateHorizontalScroll(container: HTMLElement, left: number, duration = DEFAULT_DURATION) {\n  if (!selectCanAnimateInterface(getGlobal())) {\n    duration = 0;\n  }\n\n  const isRtl = container.getAttribute('dir') === 'rtl';\n  const {\n    scrollLeft, offsetWidth: containerWidth, scrollWidth, dataset: { scrollId },\n  } = container;\n\n  let path = left - scrollLeft;\n\n  if (path < 0) {\n    const remainingPath = -scrollLeft * (isRtl ? -1 : 1);\n    path = Math.max(path, remainingPath);\n  } else if (path > 0) {\n    const remainingPath = scrollWidth - (scrollLeft + containerWidth);\n    path = Math.min(path, remainingPath);\n  }\n\n  if (path === 0) {\n    return Promise.resolve();\n  }\n\n  if (scrollId && stopById.has(scrollId)) {\n    stopById.get(scrollId)!();\n  }\n\n  const target = scrollLeft + path;\n\n  return new Promise<void>((resolve) => {\n    requestMutation(() => {\n      if (duration === 0) {\n        container.scrollLeft = target;\n        resolve();\n        return;\n      }\n\n      let isStopped = false;\n      const id = Math.random().toString();\n      container.dataset.scrollId = id;\n      stopById.set(id, () => {\n        isStopped = true;\n      });\n\n      container.style.scrollSnapType = 'none';\n\n      const startAt = Date.now();\n\n      function cleanup() {\n        container.style.scrollSnapType = '';\n        delete container.dataset.scrollId;\n        stopById.delete(id);\n      }\n\n      animate(() => {\n        if (isStopped) {\n          cleanup();\n          return false;\n        }\n\n        const t = Math.min((Date.now() - startAt) / duration, 1);\n\n        const currentPath = path * (1 - transition(t));\n        container.scrollLeft = Math.round(target - currentPath);\n\n        if (t >= 1) {\n          cleanup();\n          resolve();\n        }\n\n        return t < 1;\n      }, requestMutation);\n    });\n  });\n}\n\nfunction transition(t: number) {\n  return 1 - ((1 - t) ** 3.5);\n}\n","import type { UniqueCustomPeer } from '../../types';\n\nexport const CUSTOM_PEER_PREMIUM: UniqueCustomPeer = {\n  isCustomPeer: true,\n  type: 'premium',\n  titleKey: 'PrivacyPremium',\n  subtitleKey: 'PrivacyPremiumText',\n  avatarIcon: 'star',\n  isAvatarSquare: true,\n  withPremiumGradient: true,\n};\n\nexport const CUSTOM_PEER_INCLUDED_CHAT_TYPES: UniqueCustomPeer[] = [\n  {\n    isCustomPeer: true,\n    type: 'contacts',\n    titleKey: 'FilterContacts',\n    avatarIcon: 'user',\n    isAvatarSquare: true,\n    peerColorId: 5,\n  },\n  {\n    isCustomPeer: true,\n    type: 'nonContacts',\n    titleKey: 'FilterNonContacts',\n    avatarIcon: 'non-contacts',\n    isAvatarSquare: true,\n    peerColorId: 4,\n  },\n  {\n    isCustomPeer: true,\n    type: 'groups',\n    titleKey: 'FilterGroups',\n    avatarIcon: 'group',\n    isAvatarSquare: true,\n    peerColorId: 3,\n  },\n  {\n    isCustomPeer: true,\n    type: 'channels',\n    titleKey: 'FilterChannels',\n    avatarIcon: 'channel',\n    isAvatarSquare: true,\n    peerColorId: 1,\n  },\n  {\n    isCustomPeer: true,\n    type: 'bots',\n    titleKey: 'FilterBots',\n    avatarIcon: 'bots',\n    isAvatarSquare: true,\n    peerColorId: 6,\n  },\n];\n\nexport const CUSTOM_PEER_EXCLUDED_CHAT_TYPES: UniqueCustomPeer[] = [\n  {\n    isCustomPeer: true,\n    type: 'excludeMuted',\n    titleKey: 'FilterMuted',\n    avatarIcon: 'mute',\n    isAvatarSquare: true,\n    peerColorId: 6,\n  },\n  {\n    isCustomPeer: true,\n    type: 'excludeRead',\n    titleKey: 'FilterRead',\n    avatarIcon: 'readchats',\n    isAvatarSquare: true,\n    peerColorId: 4,\n  },\n  {\n    isCustomPeer: true,\n    type: 'excludeArchived',\n    titleKey: 'FilterArchived',\n    avatarIcon: 'archive',\n    isAvatarSquare: true,\n    peerColorId: 5,\n  },\n];\n\nexport const CUSTOM_PEER_HIDDEN: UniqueCustomPeer<'hidden'> = {\n  isCustomPeer: true,\n  type: 'hidden',\n  titleKey: 'StarsTransactionHidden',\n  avatarIcon: 'author-hidden',\n  peerColorId: 4,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xCi2f0YH\",\"preview\":\"lM2usrZU\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as AnimatedIconProps } from './AnimatedIcon';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIcon from './AnimatedIcon';\n\nimport styles from './AnimatedIconWithPreview.module.scss';\n\ntype OwnProps =\n  Partial<AnimatedIconProps>\n  & { previewUrl?: string; thumbDataUri?: string; noPreviewTransition?: boolean };\n\nconst ANIMATION_DURATION = 300;\n\nconst loadedPreviewUrls = new Set();\n\nfunction AnimatedIconWithPreview(props: OwnProps) {\n  const {\n    previewUrl, thumbDataUri, className, ...otherProps\n  } = props;\n\n  const [isThumbOpen, , unmarkThumbOpen] = useFlag(Boolean(thumbDataUri));\n  const thumbClassNames = useMediaTransitionDeprecated(isThumbOpen);\n\n  const [isPreviewOpen, markPreviewOpen, unmarkPreviewOpen] = useFlag(loadedPreviewUrls.has(previewUrl));\n  const previewClassNames = useMediaTransitionDeprecated(isPreviewOpen);\n\n  const [isAnimationReady, markAnimationReady] = useFlag(false);\n\n  const handlePreviewLoad = useLastCallback(() => {\n    markPreviewOpen();\n    loadedPreviewUrls.add(previewUrl);\n  });\n\n  const handleAnimationReady = useLastCallback(() => {\n    unmarkThumbOpen();\n    unmarkPreviewOpen();\n    setTimeout(markAnimationReady, ANIMATION_DURATION);\n  });\n\n  const { size } = props;\n\n  return (\n    <div\n      className={buildClassName(className, styles.root)}\n      style={buildStyle(size !== undefined && `width: ${size}px; height: ${size}px;`)}\n    >\n      {thumbDataUri && !isAnimationReady && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={thumbDataUri} className={buildClassName(styles.preview, thumbClassNames)} draggable={false} />\n      )}\n      {previewUrl && !isAnimationReady && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img\n          src={previewUrl}\n          className={buildClassName(styles.preview, previewClassNames)}\n          draggable={false}\n          onLoad={handlePreviewLoad}\n        />\n      )}\n      <AnimatedIcon {...otherProps} onLoad={handleAnimationReady} />\n    </div>\n  );\n}\n\nexport default memo(AnimatedIconWithPreview);\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import type {\n  ApiFormattedText,\n  ApiStarGift,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributeOriginalDetails,\n  ApiStarGiftAttributePattern,\n  ApiSticker,\n} from '../../../api/types';\n\nexport type GiftAttributes = {\n  model?: ApiStarGiftAttributeModel;\n  originalDetails?: ApiStarGiftAttributeOriginalDetails;\n  pattern?: ApiStarGiftAttributePattern;\n  backdrop?: ApiStarGiftAttributeBackdrop;\n};\n\nexport function getStickerFromGift(gift: ApiStarGift): ApiSticker | undefined {\n  if (gift.type === 'starGift') {\n    return gift.sticker;\n  }\n\n  return gift.attributes.find((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')?.sticker;\n}\n\nexport function getTotalGiftAvailability(gift: ApiStarGift): number | undefined {\n  if (gift.type === 'starGift') {\n    return gift.availabilityTotal;\n  }\n\n  return gift.totalCount;\n}\n\nexport function getGiftMessage(gift: ApiStarGift): ApiFormattedText | undefined {\n  if (gift.type !== 'starGiftUnique') return undefined;\n\n  return gift.attributes.find((attr): attr is ApiStarGiftAttributeOriginalDetails => attr.type === 'model')?.message;\n}\n\nexport function getGiftAttributes(gift: ApiStarGift): GiftAttributes | undefined {\n  if (gift.type !== 'starGiftUnique') return undefined;\n\n  return getGiftAttributesFromList(gift.attributes);\n}\n\nexport function getGiftAttributesFromList(attributes: ApiStarGiftAttribute[]) {\n  const model = attributes.find((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model');\n  const backdrop = attributes.find((attr): attr is ApiStarGiftAttributeBackdrop => attr.type === 'backdrop');\n  const pattern = attributes.find((attr): attr is ApiStarGiftAttributePattern => attr.type === 'pattern');\n  const originalDetails = attributes.find((attr): attr is ApiStarGiftAttributeOriginalDetails => (\n    attr.type === 'originalDetails'\n  ));\n\n  return {\n    model,\n    originalDetails,\n    pattern,\n    backdrop,\n  };\n}\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getGlobal } from '../../global';\n\nimport { selectCanAnimateInterface } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { throttleWithTickEnd } from '../../util/schedulers';\n\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport styles from './AnimatedCounter.module.scss';\n\ntype OwnProps = {\n  text: string;\n  className?: string;\n  isDisabled?: boolean;\n  ref?: ElementRef<HTMLSpanElement>;\n};\n\nconst ANIMATION_TIME = 200;\nconst MAX_SIMULTANEOUS_ANIMATIONS = 10;\n\nlet scheduledAnimationsCounter = 0;\n\nconst resetCounterOnTickEnd = throttleWithTickEnd(() => {\n  scheduledAnimationsCounter = 0;\n});\n\nconst AnimatedCounter: FC<OwnProps> = ({\n  text,\n  className,\n  isDisabled,\n  ref,\n}) => {\n  const { isRtl } = useLang();\n\n  const prevText = usePreviousDeprecated(text);\n  const forceUpdate = useForceUpdate();\n\n  const shouldAnimate = scheduleAnimation(\n    !isDisabled && selectCanAnimateInterface(getGlobal()) && prevText !== undefined && prevText !== text,\n  );\n\n  const characters = useMemo(() => {\n    return shouldAnimate ? renderAnimatedCharacters(text, prevText) : text;\n  }, [shouldAnimate, prevText, text]);\n\n  useEffect(() => {\n    if (!shouldAnimate) return undefined;\n\n    const timeoutId = window.setTimeout(() => {\n      forceUpdate();\n    }, ANIMATION_TIME);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [shouldAnimate, text]);\n\n  return (\n    <span ref={ref} className={buildClassName(className, !isDisabled && styles.root)} dir={isRtl ? 'rtl' : undefined}>\n      {characters}\n    </span>\n  );\n};\n\nexport default memo(AnimatedCounter);\n\nfunction scheduleAnimation(condition: boolean) {\n  if (!condition || scheduledAnimationsCounter >= MAX_SIMULTANEOUS_ANIMATIONS) return false;\n\n  if (scheduledAnimationsCounter === 0) {\n    resetCounterOnTickEnd();\n  }\n\n  scheduledAnimationsCounter++;\n\n  return true;\n}\n\nfunction renderAnimatedCharacters(text: string, prevText?: string) {\n  const elements: React.ReactNode[] = [];\n  const textLength = text.length;\n  const prevTextLength = prevText?.length ?? 0;\n\n  for (let i = 0; i <= textLength; i++) {\n    const charIndex = textLength - i;\n    const prevTextCharIndex = prevTextLength - i;\n\n    if (prevText && prevTextCharIndex >= 0 && text[charIndex] !== prevText[prevTextCharIndex]) {\n      elements.unshift(\n        <div className={styles.characterContainer}>\n          <div className={styles.character}>{text[charIndex] ?? ''}</div>\n          <div className={styles.characterOld}>{prevText[prevTextCharIndex]}</div>\n          <div className={styles.characterNew}>{text[charIndex] ?? ''}</div>\n        </div>,\n      );\n    } else {\n      elements.unshift(<span>{text[charIndex] ?? ''}</span>);\n    }\n  }\n\n  return elements;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tgKbsVmz\",\"character-container\":\"IYTzbS8o\",\"characterContainer\":\"IYTzbS8o\",\"character\":\"Jw1oQFdk\",\"character-old\":\"TZfEz3sc\",\"characterOld\":\"TZfEz3sc\",\"character-disappear\":\"ORlhAlOv\",\"characterDisappear\":\"ORlhAlOv\",\"character-new\":\"Y9ied8_t\",\"characterNew\":\"Y9ied8_t\",\"character-appear\":\"s_g6bwRZ\",\"characterAppear\":\"s_g6bwRZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gXO57D98\",\"chosen\":\"VXSJn0Sm\",\"paid\":\"N3lcrsh8\",\"outside\":\"Hqw10FGl\",\"animated-emoji\":\"lFjoRm_p\",\"animatedEmoji\":\"lFjoRm_p\",\"tag\":\"Dr889Kzc\",\"tail\":\"cUfY1b26\",\"is-safari\":\"rxxUijuG\",\"isSafari\":\"rxxUijuG\",\"tail-fill\":\"y591o4fN\",\"tailFill\":\"y591o4fN\",\"tag-text\":\"ly7cruxF\",\"tagText\":\"ly7cruxF\",\"counter\":\"P2FqNJAi\",\"disabled\":\"NRtGofbf\",\"paidCounter\":\"CW4UO1n3\"};","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n\n  return enableScrolling;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { useEffect } from '../lib/teact/teact';\n\nimport {\n  addChatsCountCallback,\n  addOrderedIdsCallback, addUnreadChatsByFolderIdCallback,\n  addUnreadCountersCallback,\n  getChatsCount,\n  getOrderedIds, getUnreadChatsByFolderId,\n  getUnreadCounters,\n} from '../util/folderManager';\nimport useForceUpdate from './useForceUpdate';\n\nexport function useFolderManagerForOrderedIds(folderId: number) {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addOrderedIdsCallback(folderId, forceUpdate), [folderId, forceUpdate]);\n\n  return getOrderedIds(folderId);\n}\n\nexport function useFolderManagerForUnreadCounters() {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addUnreadCountersCallback(forceUpdate), [forceUpdate]);\n\n  return getUnreadCounters();\n}\n\nexport function useFolderManagerForChatsCount() {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addChatsCountCallback(forceUpdate), [forceUpdate]);\n\n  return getChatsCount();\n}\n\nexport function useFolderManagerForUnreadChatsByFolder() {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => addUnreadChatsByFolderIdCallback(forceUpdate), [forceUpdate]);\n\n  return getUnreadChatsByFolderId();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"uGUjDZKl\",\"custom\":\"oc1hpMwv\",\"visible\":\"kqcWe4tf\",\"custom-animated\":\"sx6RTuAU\",\"customAnimated\":\"sx6RTuAU\",\"custom-fade-in\":\"_p445E1b\",\"customFadeIn\":\"_p445E1b\",\"chosen\":\"M62HGuIV\",\"static-icon\":\"MZ2tH980\",\"staticIcon\":\"MZ2tH980\",\"lock\":\"WMpEr5XQ\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../../lib/teact/teact';\n\nimport type { ApiReaction, ApiReactionCustomEmoji, ApiReactionPaid } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport CustomEmoji from '../../../common/CustomEmoji';\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './ReactionSelectorReaction.module.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiReactionPaid;\n  chosen?: boolean;\n  isReady?: boolean;\n  noAppearAnimation?: boolean;\n  style?: string;\n  isLocked?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  onSendPaidReaction?: NoneToVoidFunction;\n  onShowPaidReactionModal?: NoneToVoidFunction;\n};\n\nconst ReactionSelectorCustomReaction: FC<OwnProps> = ({\n  reaction,\n  chosen,\n  isReady,\n  noAppearAnimation,\n  style,\n  isLocked,\n  onToggleReaction,\n  onSendPaidReaction,\n  onShowPaidReactionModal,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const handleClick = useLastCallback(() => {\n    if (reaction.type === 'paid') {\n      onSendPaidReaction?.();\n      return;\n    }\n\n    onToggleReaction(reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onShowPaidReactionModal?.();\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onShowPaidReactionModal, handleContextMenuHide, isContextMenuOpen]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles.custom,\n        chosen && reaction.type !== 'paid' && styles.chosen,\n        !noAppearAnimation && isReady && styles.customAnimated,\n        noAppearAnimation && styles.visible,\n      )}\n      ref={ref}\n      style={style}\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {reaction.type === 'paid' ? (\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.StarReaction}\n          size={REACTION_SIZE}\n          noLoop={false}\n        />\n      ) : (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          size={REACTION_SIZE}\n        />\n      )}\n      {isLocked && (\n        <Icon className={styles.lock} name=\"lock-badge\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorCustomReaction);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './ReactionSelectorReaction.module.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  isLocked?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  isLocked,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.root, chosen && styles.chosen)}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={styles.staticIcon}\n          src={staticIconData}\n          alt={reaction.reaction.emoticon}\n          draggable={false}\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n          forceAlways\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n          forceAlways\n        />\n      )}\n      {isLocked && (\n        <Icon className={styles.lock} name=\"lock-badge\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiReaction,\n  ApiReactionCount,\n  ApiReactionCustomEmoji,\n  ApiReactionPaid,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\n\nimport {\n  canSendReaction, getReactionKey, isSameReaction, sortReactions,\n} from '../../../../global/helpers';\nimport buildClassName, { createClassNameBuilder } from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Link from '../../../ui/Link';\nimport ReactionSelectorCustomReaction from './ReactionSelectorCustomReaction';\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype RenderableReactions = (ApiAvailableReaction | ApiReactionCustomEmoji | ApiReactionPaid)[];\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  reactionsLimit?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  className?: string;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  isForEffects?: boolean;\n  isWithPaidReaction?: boolean;\n  onClose?: NoneToVoidFunction;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  onSendPaidReaction?: NoneToVoidFunction;\n  onShowPaidReactionModal?: NoneToVoidFunction;\n  onShowMore: (position: IAnchorPosition) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 7;\nconst FADE_IN_DELAY = 20;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  defaultTagReactions,\n  enabledReactions,\n  currentReactions,\n  reactionsLimit,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  className,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  isForEffects,\n  effectReactions,\n  isWithPaidReaction,\n  onClose,\n  onToggleReaction,\n  onSendPaidReaction,\n  onShowPaidReactionModal,\n  onShowMore,\n}) => {\n  const { openPremiumModal } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n\n  const areReactionsLocked = isInSavedMessages && !isCurrentUserPremium && !isInStoryViewer;\n\n  const shouldUseCurrentReactions = Boolean(reactionsLimit\n    && currentReactions && currentReactions.length >= reactionsLimit);\n\n  const availableReactions = useMemo(() => {\n    const reactions = (() => {\n      if (shouldUseCurrentReactions) return currentReactions?.map((reaction) => reaction.reaction);\n      if (isForEffects) return effectReactions;\n      if (isInSavedMessages) return defaultTagReactions;\n      if (enabledReactions?.type === 'some') return enabledReactions.allowed;\n      return allAvailableReactions?.map((reaction) => reaction.reaction);\n    })();\n\n    const filteredReactions: RenderableReactions = reactions?.map((reaction) => {\n      const isCustomReaction = reaction.type === 'custom';\n      const availableReaction = allAvailableReactions?.find((r) => isSameReaction(r.reaction, reaction));\n\n      if (isForEffects) return availableReaction;\n\n      if ((!isCustomReaction && !availableReaction) || availableReaction?.isInactive) return undefined;\n\n      if (!isPrivate && !shouldUseCurrentReactions\n        && (!enabledReactions || !canSendReaction(reaction, enabledReactions))) {\n        return undefined;\n      }\n\n      return isCustomReaction ? reaction : availableReaction;\n    }).filter(Boolean) || [];\n\n    const sortedReactions = sortReactions(filteredReactions, topReactions);\n    if (isWithPaidReaction) {\n      sortedReactions.unshift({ type: 'paid' });\n    }\n    return sortedReactions;\n  }, [\n    allAvailableReactions, currentReactions, defaultTagReactions, enabledReactions, isInSavedMessages, isPrivate,\n    topReactions, isForEffects, effectReactions, shouldUseCurrentReactions, isWithPaidReaction,\n  ]);\n\n  const reactionsToRender = useMemo(() => {\n    // Component can fit one more if we do not need show more button\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction('reaction' in r ? r.reaction : r, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useLastCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  });\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    onClose?.();\n    openPremiumModal({\n      initialSection: 'saved_tags',\n    });\n  });\n\n  const hintText = useMemo(() => {\n    if (isInSavedMessages) {\n      if (!isCurrentUserPremium) {\n        const text = lang('lng_subscribe_tag_about');\n        const parts = text.split('{link}');\n        return (\n          <span>\n            {parts[0]}\n            <Link isPrimary onClick={handleOpenPremiumModal}>\n              {lang('lng_subscribe_tag_link')}\n            </Link>\n            {parts[1]}\n          </span>\n        );\n      }\n\n      return lang('SavedTagReactionsHint2');\n    }\n\n    if (isInStoryViewer) {\n      return lang('StoryReactionsHint');\n    }\n\n    if (isForEffects) {\n      return lang('AddEffectMessageHint');\n    }\n\n    return undefined;\n  }, [isCurrentUserPremium, isInSavedMessages, isInStoryViewer, lang, isForEffects]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={buildClassName(cn('&'), className)} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')}>\n          {hintText && <div className={cn('hint')}>{hintText}</div>}\n          <div className={cn('reactions')} dir={lang.isRtl ? 'rtl' : undefined}>\n            {reactionsToRender.map((reaction, i) => (\n              'reaction' in reaction ? (\n                <ReactionSelectorReaction\n                  key={getReactionKey(reaction.reaction)}\n                  isReady={isReady}\n                  onToggleReaction={onToggleReaction}\n                  reaction={reaction}\n                  noAppearAnimation={!canPlayAnimatedEmojis}\n                  chosen={userReactionIndexes.has(i)}\n                  isLocked={areReactionsLocked}\n                />\n              ) : (\n                <ReactionSelectorCustomReaction\n                  key={getReactionKey(reaction)}\n                  isReady={isReady}\n                  onToggleReaction={onToggleReaction}\n                  onSendPaidReaction={onSendPaidReaction}\n                  onShowPaidReactionModal={onShowPaidReactionModal}\n                  reaction={reaction}\n                  noAppearAnimation={!canPlayAnimatedEmojis}\n                  chosen={userReactionIndexes.has(i)}\n                  isLocked={areReactionsLocked}\n                  style={`--_animation-delay: ${(REACTIONS_AMOUNT - i) * FADE_IN_DELAY}ms`}\n                />\n              )\n            ))}\n            {withMoreButton && (\n              <Button\n                color=\"translucent\"\n                className={cn('show-more')}\n                onClick={handleShowMoreClick}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\nimport focusNoScroll from '../util/focusNoScroll';\n\nconst MODAL_HIDE_DELAY_MS = 300;\n\nexport default function useInputFocusOnOpen(\n  inputRef: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n  isOpen?: boolean,\n  onClose?: NoneToVoidFunction,\n) {\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_TOUCH_ENV && inputRef.current?.isConnected) {\n        requestMeasure(() => {\n          focusNoScroll(inputRef.current);\n        });\n      }\n    } else {\n      if (inputRef.current?.isConnected) {\n        inputRef.current.blur();\n      }\n\n      if (onClose) {\n        setTimeout(onClose, MODAL_HIDE_DELAY_MS);\n      }\n    }\n  }, [inputRef, isOpen, onClose]);\n}\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { addExtraClass } from '../../../../lib/teact/teact-dom';\n\nimport type { FocusDirection, ScrollTargetPosition } from '../../../../types';\n\nimport { SCROLL_MAX_DISTANCE } from '../../../../config';\nimport {\n  requestForcedReflow, requestMeasure, requestMutation,\n} from '../../../../lib/fasterdom/fasterdom';\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = SCROLL_MAX_DISTANCE;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage({\n  elementRef,\n  chatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isJustAdded,\n  isQuote,\n  scrollTargetPosition,\n}: {\n  elementRef: ElementRef<HTMLDivElement>;\n  chatId: string;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isJustAdded?: boolean;\n  isQuote?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n}) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n      const scrollPosition = scrollTargetPosition || isToBottom ? 'end' : 'centerOrTop';\n\n      const exec = () => {\n        const maxDistance = focusDirection !== undefined\n          ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined;\n\n        const result = animateScroll({\n          container: messagesContainer,\n          element: elementRef.current!,\n          position: scrollPosition,\n          margin: FOCUS_MARGIN,\n          maxDistance,\n          forceDirection: focusDirection,\n          forceNormalContainerHeight: isResizingContainer,\n          shouldReturnMutationFn: true,\n        });\n\n        if (isQuote) {\n          const firstQuote = elementRef.current!.querySelector<HTMLSpanElement>('.is-quote');\n          if (firstQuote) {\n            requestMutation(() => {\n              addExtraClass(firstQuote, 'animate');\n            });\n          }\n        }\n\n        return result;\n      };\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isQuote, scrollTargetPosition,\n  ]);\n}\n","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { OwnProps as AnimatedIconProps } from './AnimatedIcon';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { getStickerMediaHash } from '../../global/helpers';\n\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\ntype OwnProps =\n  Partial<AnimatedIconProps>\n  & { sticker?: ApiSticker; noLoad?: boolean; forcePreview?: boolean };\n\nfunction AnimatedIconFromSticker(props: OwnProps) {\n  const {\n    sticker, noLoad, forcePreview, ...otherProps\n  } = props;\n\n  const thumbDataUri = sticker?.thumbnail?.dataUri;\n  const localMediaHash = sticker && getStickerMediaHash(sticker, 'full');\n  const previewBlobUrl = useMedia(\n    sticker ? getStickerMediaHash(sticker, 'preview') : undefined,\n    noLoad && !forcePreview,\n    ApiMediaFormat.BlobUrl,\n  );\n  const tgsUrl = useMedia(localMediaHash, noLoad);\n\n  return (\n    <AnimatedIconWithPreview\n      tgsUrl={tgsUrl}\n      previewUrl={previewBlobUrl}\n      thumbDataUri={thumbDataUri}\n\n      {...otherProps}\n    />\n  );\n}\n\nexport default memo(AnimatedIconFromSticker);\n","import { getGlobal } from '../../../global';\n\nimport { selectChat, selectChatLastMessage } from '../../../global/selectors';\nimport { orderBy } from '../../../util/iteratees';\n\nconst VERIFIED_PRIORITY_BASE = 3e9;\nconst PINNED_PRIORITY_BASE = 3e8;\n\nexport default function sortChatIds(\n  chatIds: string[],\n  shouldPrioritizeVerified = false,\n  priorityIds?: string[],\n  currentUserId?: string,\n) {\n  // Avoid calling sort on every global change\n  const global = getGlobal();\n\n  return orderBy(chatIds, (id) => {\n    if (id === currentUserId) {\n      return Infinity;\n    }\n\n    const chat = selectChat(global, id);\n    if (!chat) {\n      return 0;\n    }\n\n    let priority = 0;\n\n    const lastMessage = selectChatLastMessage(global, id);\n    if (lastMessage) {\n      priority += lastMessage.date;\n    }\n\n    if (shouldPrioritizeVerified && chat.isVerified) {\n      priority += VERIFIED_PRIORITY_BASE; // ~100 years in seconds\n    }\n\n    if (priorityIds && priorityIds.includes(id)) {\n      priority = Date.now() + PINNED_PRIORITY_BASE + (priorityIds.length - priorityIds.indexOf(id));\n    }\n\n    return priority;\n  }, 'desc');\n}\n","import type { ApiFormattedText, ApiMessageEntity } from '../api/types';\nimport { ApiMessageEntityTypes } from '../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../config';\nimport { IS_EMOJI_SUPPORTED } from './browser/windowEnvironment';\n\nexport const ENTITY_CLASS_BY_NODE_NAME: Record<string, ApiMessageEntityTypes> = {\n  B: ApiMessageEntityTypes.Bold,\n  STRONG: ApiMessageEntityTypes.Bold,\n  I: ApiMessageEntityTypes.Italic,\n  EM: ApiMessageEntityTypes.Italic,\n  INS: ApiMessageEntityTypes.Underline,\n  U: ApiMessageEntityTypes.Underline,\n  S: ApiMessageEntityTypes.Strike,\n  STRIKE: ApiMessageEntityTypes.Strike,\n  DEL: ApiMessageEntityTypes.Strike,\n  CODE: ApiMessageEntityTypes.Code,\n  PRE: ApiMessageEntityTypes.Pre,\n  BLOCKQUOTE: ApiMessageEntityTypes.Blockquote,\n};\n\nconst MAX_TAG_DEEPNESS = 3;\n\nexport default function parseHtmlAsFormattedText(\n  html: string, withMarkdownLinks = false, skipMarkdown = false,\n): ApiFormattedText {\n  const fragment = document.createElement('div');\n  fragment.innerHTML = skipMarkdown ? html\n    : withMarkdownLinks ? parseMarkdown(parseMarkdownLinks(html)) : parseMarkdown(html);\n  fixImageContent(fragment);\n  const text = fragment.innerText.trim().replace(/\\u200b+/g, '');\n  const trimShift = fragment.innerText.indexOf(text[0]);\n  let textIndex = -trimShift;\n  let recursionDeepness = 0;\n  const entities: ApiMessageEntity[] = [];\n\n  function addEntity(node: ChildNode) {\n    if (node.nodeType === Node.COMMENT_NODE) return;\n    const { index, entity } = getEntityDataFromNode(node, text, textIndex);\n\n    if (entity) {\n      textIndex = index;\n      entities.push(entity);\n    } else if (node.textContent) {\n      // Skip newlines on the beginning\n      if (index === 0 && node.textContent.trim() === '') {\n        return;\n      }\n      textIndex += node.textContent.length;\n    }\n\n    if (node.hasChildNodes() && recursionDeepness <= MAX_TAG_DEEPNESS) {\n      recursionDeepness += 1;\n      Array.from(node.childNodes).forEach(addEntity);\n    }\n  }\n\n  Array.from(fragment.childNodes).forEach((node) => {\n    recursionDeepness = 1;\n    addEntity(node);\n  });\n\n  return {\n    text,\n    entities: entities.length ? entities : undefined,\n  };\n}\n\nexport function fixImageContent(fragment: HTMLDivElement) {\n  fragment.querySelectorAll('img').forEach((node) => {\n    if (node.dataset.documentId) { // Custom Emoji\n      node.textContent = (node).alt || '';\n    } else { // Regular emoji with image fallback\n      node.replaceWith(node.alt || '');\n    }\n  });\n}\n\nfunction parseMarkdown(html: string) {\n  let parsedHtml = html.slice(0);\n\n  // Strip redundant nbsp's\n  parsedHtml = parsedHtml.replace(/&nbsp;/g, ' ');\n\n  // Replace <div><br></div> with newline (new line in Safari)\n  parsedHtml = parsedHtml.replace(/<div><br([^>]*)?><\\/div>/g, '\\n');\n  // Replace <br> with newline\n  parsedHtml = parsedHtml.replace(/<br([^>]*)?>/g, '\\n');\n\n  // Strip redundant <div> tags\n  parsedHtml = parsedHtml.replace(/<\\/div>(\\s*)<div>/g, '\\n');\n  parsedHtml = parsedHtml.replace(/<div>/g, '\\n');\n  parsedHtml = parsedHtml.replace(/<\\/div>/g, '');\n\n  // Pre\n  parsedHtml = parsedHtml.replace(/^`{3}(.*?)[\\n\\r](.*?[\\n\\r]?)`{3}/gms, '<pre data-language=\"$1\">$2</pre>');\n  parsedHtml = parsedHtml.replace(/^`{3}[\\n\\r]?(.*?)[\\n\\r]?`{3}/gms, '<pre>$1</pre>');\n  parsedHtml = parsedHtml.replace(/[`]{3}([^`]+)[`]{3}/g, '<pre>$1</pre>');\n\n  // Code\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[`]{1}([^`\\n]+)[`]{1}(?![^<]*<\\/(code|pre)>)/g,\n    '<code>$2</code>',\n  );\n\n  // Custom Emoji markdown tag\n  if (!IS_EMOJI_SUPPORTED) {\n    // Prepare alt text for custom emoji\n    parsedHtml = parsedHtml.replace(/\\[<img[^>]+alt=\"([^\"]+)\"[^>]*>]/gm, '[$1]');\n  }\n  parsedHtml = parsedHtml.replace(\n    /(?!<(?:code|pre)[^<]*|<\\/)\\[([^\\]\\n]+)\\]\\(customEmoji:(\\d+)\\)(?![^<]*<\\/(?:code|pre)>)/g,\n    '<img alt=\"$1\" data-document-id=\"$2\">',\n  );\n\n  // Other simple markdown\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[*]{2}([^*\\n]+)[*]{2}(?![^<]*<\\/(code|pre)>)/g,\n    '<b>$2</b>',\n  );\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[_]{2}([^_\\n]+)[_]{2}(?![^<]*<\\/(code|pre)>)/g,\n    '<i>$2</i>',\n  );\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[~]{2}([^~\\n]+)[~]{2}(?![^<]*<\\/(code|pre)>)/g,\n    '<s>$2</s>',\n  );\n  parsedHtml = parsedHtml.replace(\n    /(?!<(code|pre)[^<]*|<\\/)[|]{2}([^|\\n]+)[|]{2}(?![^<]*<\\/(code|pre)>)/g,\n    `<span data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">$2</span>`,\n  );\n\n  return parsedHtml;\n}\n\nfunction parseMarkdownLinks(html: string) {\n  return html.replace(new RegExp(`\\\\[([^\\\\]]+?)]\\\\((${RE_LINK_TEMPLATE}+?)\\\\)`, 'g'), (_, text, link) => {\n    const url = link.includes('://') ? link : link.includes('@') ? `mailto:${link}` : `https://${link}`;\n    return `<a href=\"${url}\">${text}</a>`;\n  });\n}\n\nfunction getEntityDataFromNode(\n  node: ChildNode,\n  rawText: string,\n  textIndex: number,\n): { index: number; entity?: ApiMessageEntity } {\n  const type = getEntityTypeFromNode(node);\n\n  if (!type || !node.textContent) {\n    return {\n      index: textIndex,\n      entity: undefined,\n    };\n  }\n\n  const rawIndex = rawText.indexOf(node.textContent, textIndex);\n  // In some cases, last text entity ends with a newline (which gets trimmed from `rawText`).\n  // In this case, `rawIndex` would return `-1`, so we use `textIndex` instead.\n  const index = rawIndex >= 0 ? rawIndex : textIndex;\n  const offset = rawText.substring(0, index).length;\n  const { length } = rawText.substring(index, index + node.textContent.length);\n\n  if (type === ApiMessageEntityTypes.TextUrl) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        url: (node as HTMLAnchorElement).href,\n      },\n    };\n  }\n  if (type === ApiMessageEntityTypes.MentionName) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        userId: (node as HTMLAnchorElement).dataset.userId!,\n      },\n    };\n  }\n\n  if (type === ApiMessageEntityTypes.Pre) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        language: (node as HTMLPreElement).dataset.language,\n      },\n    };\n  }\n\n  if (type === ApiMessageEntityTypes.CustomEmoji) {\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        documentId: (node as HTMLImageElement).dataset.documentId!,\n      },\n    };\n  }\n\n  if (type === ApiMessageEntityTypes.Timestamp) {\n    const timestamp = Number((node as HTMLElement).dataset.timestamp);\n    if (Number.isNaN(timestamp)) {\n      return {\n        index,\n        entity: undefined,\n      };\n    }\n\n    return {\n      index,\n      entity: {\n        type,\n        offset,\n        length,\n        timestamp,\n      },\n    };\n  }\n\n  return {\n    index,\n    entity: {\n      type,\n      offset,\n      length,\n    },\n  };\n}\n\nfunction getEntityTypeFromNode(node: ChildNode): ApiMessageEntityTypes | undefined {\n  if (node instanceof HTMLElement && node.dataset.entityType) {\n    return node.dataset.entityType as ApiMessageEntityTypes;\n  }\n\n  if (ENTITY_CLASS_BY_NODE_NAME[node.nodeName]) {\n    return ENTITY_CLASS_BY_NODE_NAME[node.nodeName];\n  }\n\n  if (node.nodeName === 'A') {\n    const anchor = node as HTMLAnchorElement;\n    if (anchor.dataset.entityType === ApiMessageEntityTypes.MentionName) {\n      return ApiMessageEntityTypes.MentionName;\n    }\n    if (anchor.dataset.entityType === ApiMessageEntityTypes.Url) {\n      return ApiMessageEntityTypes.Url;\n    }\n    if (anchor.href.startsWith('mailto:')) {\n      return ApiMessageEntityTypes.Email;\n    }\n    if (anchor.href.startsWith('tel:')) {\n      return ApiMessageEntityTypes.Phone;\n    }\n    if (anchor.href !== anchor.textContent) {\n      return ApiMessageEntityTypes.TextUrl;\n    }\n\n    return ApiMessageEntityTypes.Url;\n  }\n\n  if (node.nodeName === 'SPAN') {\n    return (node as HTMLElement).dataset.entityType as any;\n  }\n\n  if (node.nodeName === 'IMG') {\n    if ((node as HTMLImageElement).dataset.documentId) {\n      return ApiMessageEntityTypes.CustomEmoji;\n    }\n  }\n\n  return undefined;\n}\n","import { MESSAGE_CONTENT_CLASS_NAME } from '../config';\n\nconst ELEMENT_NODE = 1;\n\nexport default function getMessageIdsForSelectedText() {\n  const selection = window.getSelection();\n  let selectedFragments = selection?.rangeCount ? selection.getRangeAt(0).cloneContents() : undefined;\n\n  const shouldIncludeLastMessage = selection?.focusNode && selection.focusOffset > 0\n    && hasParentWithClassName(selection.focusNode, MESSAGE_CONTENT_CLASS_NAME);\n  if (!selectedFragments || selectedFragments.childElementCount === 0) {\n    return undefined;\n  }\n\n  const messageIds = Array.from(selectedFragments.children)\n    .reduce((result, node) => {\n      if (node.nodeType === ELEMENT_NODE && node.classList.contains('message-date-group')) {\n        return Array.from(node.querySelectorAll('.Message'))\n          .reduce((acc, messageEl) => acc.concat(Number((messageEl as HTMLElement).dataset.messageId)), result);\n      } else if (node.nodeType === ELEMENT_NODE && node.classList.contains('Message')) {\n        return result.concat(Number((node as HTMLElement).dataset.messageId));\n      }\n\n      return result;\n    }, [] as number[]);\n\n  // Cleanup a document fragment because it is playing media content in the background\n  while (selectedFragments.firstChild) {\n    selectedFragments.removeChild(selectedFragments.firstChild);\n  }\n  selectedFragments = undefined;\n\n  if (!shouldIncludeLastMessage) {\n    messageIds.pop();\n  }\n\n  return messageIds;\n}\n\nfunction hasParentWithClassName(element: Node, className: string): boolean {\n  if (element.nodeType === ELEMENT_NODE && (element as HTMLElement).classList.contains(className)) {\n    return true;\n  }\n\n  return element.parentNode ? hasParentWithClassName(element.parentNode, className) : false;\n}\n","import type React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseDown?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n  onMouseDown,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import { beginHeavyAnimation } from '../lib/teact/teact';\nimport { getGlobal } from '../global';\n\nimport type { ScrollTargetPosition } from '../types';\nimport { FocusDirection } from '../types';\n\nimport {\n  SCROLL_MAX_DISTANCE,\n  SCROLL_MAX_DURATION,\n  SCROLL_MIN_DURATION,\n  SCROLL_SHORT_TRANSITION_MAX_DISTANCE,\n} from '../config';\nimport { requestMeasure, requestMutation } from '../lib/fasterdom/fasterdom';\nimport { selectCanAnimateInterface } from '../global/selectors';\nimport { IS_ANDROID } from './browser/windowEnvironment';\nimport getOffsetToContainer from './visibility/getOffsetToContainer';\nimport { animateSingle, cancelSingleAnimation } from './animation';\n\nexport type AnimateScrollArgs = {\n  container: HTMLElement;\n  element: HTMLElement;\n  position: ScrollTargetPosition;\n  margin?: number;\n  maxDistance?: number;\n  forceDirection?: FocusDirection;\n  forceDuration?: number;\n  forceNormalContainerHeight?: boolean;\n  shouldReturnMutationFn?: boolean;\n};\n\nlet isAnimating = false;\nlet currentArgs: AnimateScrollArgs | undefined;\nlet onHeavyAnimationEnd: NoneToVoidFunction | undefined;\n\nexport default function animateScroll(args: AnimateScrollArgs) {\n  currentArgs = args;\n  const mutate = createMutateFunction(args);\n\n  if (args.shouldReturnMutationFn) {\n    return mutate;\n  }\n\n  requestMutation(mutate);\n  return undefined;\n}\n\nexport function restartCurrentScrollAnimation() {\n  if (!isAnimating) {\n    return;\n  }\n\n  cancelSingleAnimation();\n\n  requestMeasure(() => {\n    requestMutation(createMutateFunction(currentArgs!));\n  });\n}\n\nfunction createMutateFunction(args: AnimateScrollArgs) {\n  const {\n    container,\n    element,\n    position,\n    margin = 0,\n    maxDistance = SCROLL_MAX_DISTANCE,\n    forceDirection,\n    forceNormalContainerHeight,\n  } = args;\n\n  let forceDuration = args.forceDuration;\n\n  if (\n    forceDirection === FocusDirection.Static\n    || !selectCanAnimateInterface(getGlobal())\n  ) {\n    forceDuration = 0;\n  }\n\n  const { offsetHeight: elementHeight } = element;\n  const { scrollTop: currentScrollTop, clientHeight: containerHeight, scrollHeight } = container;\n  const elementTop = getOffsetToContainer(element, container).top;\n\n  const targetContainerHeight = forceNormalContainerHeight && container.dataset.normalHeight\n    ? Number(container.dataset.normalHeight)\n    : containerHeight;\n\n  let scrollTo!: number;\n  switch (position) {\n    case 'start':\n      scrollTo = (elementTop - margin) + (IS_ANDROID ? 1 : 0);\n      break;\n    case 'end':\n      scrollTo = (elementTop + elementHeight + margin) - targetContainerHeight;\n      break;\n    // 'nearest' is not supported yet\n    case 'nearest':\n    case 'center':\n    case 'centerOrTop':\n      scrollTo = elementHeight < targetContainerHeight\n        ? (elementTop + elementHeight / 2 - targetContainerHeight / 2)\n        : (elementTop - margin);\n      break;\n  }\n\n  const scrollFrom = calculateScrollFrom(container, scrollTo, maxDistance, forceDirection);\n\n  let path = scrollTo - scrollFrom;\n  if (path < 0) {\n    const remainingPath = -scrollFrom;\n    path = Math.max(path, remainingPath);\n  } else if (path > 0) {\n    const remainingPath = scrollHeight - (scrollFrom + targetContainerHeight);\n    path = Math.min(path, remainingPath);\n  }\n\n  const absPath = Math.abs(path);\n\n  return () => {\n    if (absPath < 1) {\n      if (currentScrollTop !== scrollFrom) {\n        container.scrollTop = scrollFrom;\n      }\n\n      return;\n    }\n\n    const target = scrollFrom + path;\n\n    if (forceDuration === 0) {\n      container.scrollTop = target;\n      return;\n    }\n\n    const transition = absPath <= SCROLL_SHORT_TRANSITION_MAX_DISTANCE ? shortTransition : longTransition;\n    const duration = forceDuration || (\n      SCROLL_MIN_DURATION\n      + (absPath / SCROLL_MAX_DISTANCE) * (SCROLL_MAX_DURATION - SCROLL_MIN_DURATION)\n    );\n    const startAt = Date.now();\n\n    isAnimating = true;\n\n    const prevOnHeavyAnimationEnd = onHeavyAnimationEnd;\n    onHeavyAnimationEnd = beginHeavyAnimation(undefined, true);\n    prevOnHeavyAnimationEnd?.();\n\n    animateSingle(() => {\n      const t = Math.min((Date.now() - startAt) / duration, 1);\n      const currentPath = path * (1 - transition(t));\n      const newScrollTop = Math.round(target - currentPath);\n\n      container.scrollTop = newScrollTop;\n\n      isAnimating = t < 1 && newScrollTop !== target;\n\n      if (!isAnimating) {\n        currentArgs = undefined;\n\n        onHeavyAnimationEnd?.();\n        onHeavyAnimationEnd = undefined;\n      }\n\n      return isAnimating;\n    }, requestMutation);\n  };\n}\n\nexport function isAnimatingScroll() {\n  return isAnimating;\n}\n\nexport function cancelScrollBlockingAnimation() {\n  onHeavyAnimationEnd!();\n  onHeavyAnimationEnd = undefined;\n}\n\nfunction calculateScrollFrom(\n  container: HTMLElement,\n  scrollTo: number,\n  maxDistance = SCROLL_MAX_DISTANCE,\n  forceDirection?: FocusDirection,\n) {\n  const { scrollTop } = container;\n\n  if (forceDirection === undefined) {\n    const offset = scrollTo - scrollTop;\n\n    if (offset < -maxDistance) {\n      return scrollTop + (offset + maxDistance);\n    } else if (offset > maxDistance) {\n      return scrollTop + (offset - maxDistance);\n    }\n  } else if (forceDirection === FocusDirection.Up) {\n    return scrollTo + maxDistance;\n  } else if (forceDirection === FocusDirection.Down) {\n    return Math.max(0, scrollTo - maxDistance);\n  }\n\n  return scrollTop;\n}\n\nfunction shortTransition(t: number) {\n  return 1 - ((1 - t) ** 3.5);\n}\n\nfunction longTransition(t: number) {\n  return 1 - ((1 - t) ** 6);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aInga6VW\",\"particle\":\"PZAuNVZH\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiEmojiStatusType, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerHashById } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatusType;\n  className?: string;\n  isLottie?: boolean;\n  particleSize?: number;\n  onEnded?: NoneToVoidFunction;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n  particleSize,\n  onEnded,\n}) => {\n  const stickerHash = getStickerHashById(reaction.documentId, true);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath(particleSize));\n  }, [particleSize]);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={buildStyle(Boolean(particleSize) && `--particle-size: ${particleSize}px`)}\n    >\n      {paths.map((path, i) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n              size={particleSize}\n              onAnimationEnd={i === 0 ? onEnded : undefined}\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n            draggable={false}\n            onAnimationEnd={i === 0 ? onEnded : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath(particleSize = 20) {\n  const x = (particleSize / 2 + Math.random() * particleSize * 3) * (Math.random() > 0.5 ? 1 : -1);\n  const y = particleSize + Math.random() * particleSize * 4;\n\n  return `M 0 0 C 0 0 ${x} ${-y - particleSize} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n  purple: [['#E367D7', '#757BF6'], ['#E367D7', '#757BF6']],\n  green: [['#52D553', '#4BB121'], ['#52D553', '#4BB121']],\n  orange: [['#D48F23', '#BE7E15'], ['#D48F23', '#BE7E15']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\ntype GradientColor = readonly [string, string];\n\ntype OwnProps = {\n  color: ColorKey | GradientColor | (string & {});\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor: GradientColor | undefined\n  = Array.isArray(color)\n    ? color as GradientColor\n    : colorKey\n      ? COLORS[colorKey][isDarkTheme ? 1 : 0]\n      : undefined;\n\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useState } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PromptDialog.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  title: string;\n  subtitle?: React.ReactNode;\n  placeholder: string;\n  submitText?: string;\n  maxLength?: number;\n  initialValue?: string;\n  onClose: NoneToVoidFunction;\n  onSubmit: (text: string) => void;\n};\n\nconst PromptDialog = ({\n  isOpen,\n  title,\n  subtitle,\n  placeholder,\n  submitText,\n  maxLength,\n  initialValue = '',\n  onClose,\n  onSubmit,\n}: OwnProps) => {\n  const lang = useOldLang();\n\n  const [text, setText] = useState(initialValue);\n\n  const handleTextChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(text);\n  });\n\n  return (\n    <Modal\n      className=\"narrow\"\n      title={title}\n      isOpen={isOpen}\n      onClose={onClose}\n      isSlim\n    >\n      {Boolean(subtitle) && (\n        <div className={styles.subtitle}>\n          {subtitle}\n        </div>\n      )}\n      <InputText\n        placeholder={placeholder}\n        value={text}\n        onChange={handleTextChange}\n        maxLength={maxLength}\n        teactExperimentControlled\n      />\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" onClick={handleSubmit}>\n          {submitText || lang('Save')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PromptDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"subtitle\":\"cGrbcqD_\"};","import { memo, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiReaction,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport PromptDialog from '../../../modals/prompt/PromptDialog';\nimport Button from '../../../ui/Button';\nimport Menu from '../../../ui/Menu';\nimport MenuItem from '../../../ui/MenuItem';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst TITLE_MAX_LENGTH = 15;\nconst LOOP_LIMIT = 1;\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  tag?: ApiSavedReactionTag;\n  containerId: string;\n  isChosen?: boolean;\n  isOwnMessage?: boolean;\n  withCount?: boolean;\n  className?: string;\n  chosenClassName?: string;\n  isDisabled?: boolean;\n  withContextMenu?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onRemove?: (reaction: ApiReaction) => void;\n};\n\nconst SavedTagButton = ({\n  reaction,\n  tag,\n  containerId,\n  isChosen,\n  isOwnMessage,\n  className,\n  chosenClassName,\n  withCount,\n  isDisabled,\n  withContextMenu,\n  observeIntersection,\n  onClick,\n  onRemove,\n}: OwnProps) => {\n  const { editSavedReactionTag } = getActions();\n  const ref = useRef<HTMLButtonElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n  const [isRenamePromptOpen, openRenamePrompt, closeRenamePrompt] = useFlag();\n\n  const { title, count } = tag || {};\n  const hasText = Boolean(title || (withCount && count));\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction);\n  });\n\n  const handleRemoveClick = useLastCallback(() => {\n    onRemove?.(reaction);\n  });\n\n  const handleRenameTag = useLastCallback((newTitle: string) => {\n    editSavedReactionTag({\n      reaction,\n      title: newTitle,\n    });\n    closeRenamePrompt();\n  });\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !withContextMenu, undefined, undefined, undefined, true);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  if (withCount && count === 0) {\n    return undefined;\n  }\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        styles.tag,\n        isOwnMessage && styles.own,\n        isChosen && styles.chosen,\n        isChosen && chosenClassName,\n        isDisabled && styles.disabled,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      ref={ref}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction}\n        loopLimit={LOOP_LIMIT}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {hasText && (\n        <span className={styles.tagText}>\n          {title && <span>{title}</span>}\n          {withCount && <span>{count}</span>}\n        </span>\n      )}\n      <svg\n        className={styles.tail}\n        width=\"15\"\n        height=\"30\"\n        viewBox=\"0 0 15 30\"\n      >\n        <path className={styles.tailFill} d=\"m 0,30 c 3.1855,0 6.1803,-1.5176 8.0641,-4.0864 l 5.835,-7.9568 c 1.2906,-1.7599 1.2906,-4.1537 0,-5.9136 L 8.0641,4.08636 C 6.1803,1.51761 3.1855,0 0,0\" />\n      </svg>\n      {withContextMenu && (\n        <PromptDialog\n          isOpen={isRenamePromptOpen}\n          maxLength={TITLE_MAX_LENGTH}\n          title={lang(tag?.title ? 'SavedTagRenameTag' : 'SavedTagLabelTag')}\n          subtitle={lang('SavedTagLabelTagText')}\n          placeholder={lang('SavedTagLabelPlaceholder')}\n          initialValue={tag?.title}\n          onClose={closeRenamePrompt}\n          onSubmit={handleRenameTag}\n        />\n      )}\n      {withContextMenu && contextMenuAnchor && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          autoClose\n          withPortal\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <MenuItem icon=\"tag-filter\" onClick={handleClick}>\n            {lang('SavedTagFilterByTag')}\n          </MenuItem>\n          <MenuItem icon=\"tag-name\" onClick={openRenamePrompt}>\n            {lang(tag?.title ? 'SavedTagRenameTag' : 'SavedTagLabelTag')}\n          </MenuItem>\n          <MenuItem icon=\"tag-crossed\" destructive onClick={handleRemoveClick}>\n            {lang('SavedTagRemoveTag')}\n          </MenuItem>\n        </Menu>\n      )}\n    </Button>\n  );\n};\n\nexport default memo(SavedTagButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O9uCTt5C\",\"animated-icon\":\"HiI6SMxF\",\"animatedIcon\":\"HiI6SMxF\",\"effect\":\"NhFcTGja\",\"animating\":\"ikfZ6Igz\",\"withEffectOnly\":\"jjRJmHCg\"};","export default function focusNoScroll(element?: HTMLElement) {\n  if (!element) return;\n\n  element.focus({ preventScroll: true });\n}\n","import type { ApiFormattedText } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\nconst ALLOWED_QUOTE_ENTITIES = new Set([\n  ApiMessageEntityTypes.Bold,\n  ApiMessageEntityTypes.Italic,\n  ApiMessageEntityTypes.Underline,\n  ApiMessageEntityTypes.Strike,\n  ApiMessageEntityTypes.Spoiler,\n  ApiMessageEntityTypes.CustomEmoji,\n]);\n\nexport function getSelectionAsFormattedText(range: Range) {\n  const html = getSelectionAsHtml(range);\n  const formattedText = parseHtmlAsFormattedText(html, false, true);\n\n  return stripEntitiesForQuote(formattedText);\n}\n\nfunction getSelectionAsHtml(range: Range) {\n  const clonedSelection = range.cloneContents();\n  div.appendChild(clonedSelection);\n\n  const html = wrapHtmlWithMarkupTags(range, div.innerHTML);\n  div.innerHTML = '';\n\n  return html\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/&nbsp;/gi, ' ') // Convert nbsp's to spaces\n    .replace(/\\u00a0/gi, ' ');\n}\n\nfunction stripEntitiesForQuote(text: ApiFormattedText): ApiFormattedText {\n  if (!text.entities) return text;\n\n  const entities = text.entities.filter((entity) => ALLOWED_QUOTE_ENTITIES.has(entity.type as ApiMessageEntityTypes));\n  return { ...text, entities: entities.length ? entities : undefined };\n}\n\nfunction wrapHtmlWithMarkupTags(range: Range, html: string) {\n  const container = range.commonAncestorContainer;\n  if (container.nodeType === Node.ELEMENT_NODE && (container as Element).classList.contains('text-content')) {\n    return html;\n  }\n  let currentElement = range.commonAncestorContainer.parentElement;\n  while (currentElement && !currentElement.classList.contains('text-content')) {\n    const tag = currentElement.tagName.toLowerCase();\n    const entityType = currentElement.dataset.entityType;\n    html = `<${tag} ${entityType ? `data-entity-type=\"${entityType}\"` : ''}>${html}</${tag}>`;\n    currentElement = currentElement.parentElement;\n  }\n\n  return html;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PinMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PinMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PinMessageModal = useModuleLoader(Bundles.Extra, 'PinMessageModal', !isOpen);\n\n  return PinMessageModal ? <PinMessageModal {...props} /> : undefined;\n};\n\nexport default PinMessageModalAsync;\n","import type { ApiMessage, StatefulMediaContent } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport {\n  getMessageContact,\n  getMessageHtmlId,\n  getMessagePhoto,\n  getMessageText,\n  getPhotoMediaHash,\n  getWebPagePhoto,\n  getWebPageVideo,\n  hasMediaLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { getMessageTextWithSpoilers } from '../../../../global/helpers/messageSummary';\nimport { IS_SAFARI } from '../../../../util/browser/windowEnvironment';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { getTranslationFn } from '../../../../util/localization';\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: IconName;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  statefulContent: StatefulMediaContent | undefined,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const { webPage } = statefulContent || {};\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getWebPageVideo(webPage) ? getWebPagePhoto(webPage) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = photo ? getPhotoMediaHash(photo, 'full') : undefined;\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMediaLocalBlobUrl(photo))\n    && CLIPBOARD_ITEM_SUPPORTED && !IS_SAFARI;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n      && checkMessageHasSelection(message)\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          ) as string[];\n          if (clipboardText) {\n            copyHtmlToClipboard(\n              clipboardText.join(''),\n              getMessageTextWithSpoilers(getTranslationFn(), message, statefulContent)!,\n            );\n          }\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: onCopyLink,\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\nfunction checkMessageHasSelection(message: ApiMessage): boolean {\n  const selection = window.getSelection();\n  const selectionParentNode = selection?.anchorNode?.parentNode as HTMLElement;\n  const selectedMessageElement = selectionParentNode?.closest<HTMLDivElement>('.Message.message-list-item');\n  return getMessageHtmlId(message.id) === selectedMessageElement?.id;\n}\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"C3LVl_JT\",\"get\":\"bmxij_dk\",\"skeleton\":\"cd1ZZeSy\",\"transition\":\"mg4sBQ9n\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './TimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nfunction LastEditTimeMenuItem({\n  message,\n}: OwnProps) {\n  const lang = useOldLang();\n  const { editDate } = message;\n  const shouldRenderSkeleton = !editDate;\n\n  return (\n    <MenuItem icon=\"clock-edit\" className={styles.item}>\n      {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : Boolean(editDate)\n        && lang('Chat.PrivateMessageEditTimestamp.Date', formatDateAtTime(lang, editDate * 1000))}\n    </MenuItem>\n  );\n}\n\nexport default memo(LastEditTimeMenuItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Transition from '../../ui/Transition';\n\nimport styles from './TimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  closeContextMenu: NoneToVoidFunction;\n};\n\nfunction ReadTimeMenuItem({\n  message, shouldRenderShowWhen, canLoadReadDate, closeContextMenu,\n}: OwnProps) {\n  const { openPrivacySettingsNoticeModal } = getActions();\n  const lang = useOldLang();\n  const { readDate } = message;\n  const shouldRenderSkeleton = canLoadReadDate && !readDate && !shouldRenderShowWhen;\n\n  const handleOpenModal = () => {\n    closeContextMenu();\n    openPrivacySettingsNoticeModal({ chatId: message.chatId, isReadDate: true });\n  };\n\n  return (\n    <MenuItem icon=\"message-read\" className={styles.item}>\n      <Transition name=\"fade\" activeKey={shouldRenderSkeleton ? 1 : 2} className={styles.transition}>\n        {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : (\n          <>\n            {Boolean(readDate) && lang('PmReadAt', formatDateAtTime(lang, readDate * 1000))}\n            {!readDate && shouldRenderShowWhen && (\n              <div>\n                {lang('PmRead')}\n                <span className={styles.get} onClick={handleOpenModal}>\n                  {lang('PmReadShowWhen')}\n                </span>\n              </div>\n            )}\n          </>\n        )}\n      </Transition>\n    </MenuItem>\n  );\n}\n\nexport default memo(ReadTimeMenuItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTypeStory,\n  ApiUser,\n  ApiWebPage,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport {\n  getUserFullName,\n  groupStatefulContent,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { disableScrolling } from '../../../util/scrollLock';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport LastEditTimeMenuItem from './LastEditTimeMenuItem';\nimport ReactionSelector from './reactions/ReactionSelector';\nimport ReadTimeMenuItem from './ReadTimeMenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage;\n  poll?: ApiPoll;\n  webPage?: ApiWebPage;\n  story?: ApiTypeStory;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canQuote?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canAppendTodoList?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: ApiPeer[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  isInSavedMessages?: boolean;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onAppendTodoList?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onSendPaidReaction?: NoneToVoidFunction;\n  onShowPaidReactionModal?: NoneToVoidFunction;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n  userFullName?: string;\n  canGift?: boolean;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  message,\n  poll,\n  webPage,\n  story,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  isWithPaidReaction,\n  reactionsLimit,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canQuote,\n  canEdit,\n  canAppendTodoList,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canReport,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  isInSavedMessages,\n  shouldRenderShowWhen,\n  canLoadReadDate,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onAppendTodoList,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onReport,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onSendPaidReaction,\n  onShowPaidReactionModal,\n  onCopyMessages,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n  userFullName,\n  canGift,\n}) => {\n  const {\n    showNotification, openStickerSet, openCustomEmojiSets, loadStickers, openGiftModal,\n  } = getActions();\n  const menuRef = useRef<HTMLDivElement>();\n  const scrollableRef = useRef<HTMLDivElement>();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const areReactionsPossible = message.areReactionsPossible;\n  const withReactions = (canShowReactionList && !noReactions) || areReactionsPossible;\n  const isEdited = ('isEdited' in message) && message.isEdited;\n  const seenByDates = message.seenByDates;\n  const isPremiumGift = message.content.action?.type === 'giftPremium';\n  const isGiftCode = message.content.action?.type === 'giftCode';\n  const isStarGift = message.content.action?.type === 'starGift';\n  const isStarGiftUnique = message.content.action?.type === 'starGiftUnique';\n  const shouldShowGiftButton = isUserId(message.chatId)\n    && canGift && (isPremiumGift || isGiftCode || isStarGift || isStarGiftUnique);\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: oldLang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    openGiftModal({ forUserId: message.chatId });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  useEffect(() => {\n    if (customEmojiSets?.length) {\n      customEmojiSets.map((customEmojiSet) => {\n        return loadStickers({\n          stickerSetInfo: {\n            id: customEmojiSet.id,\n            accessHash: customEmojiSet.accessHash,\n          },\n        });\n      });\n    }\n  }, [customEmojiSets, openCustomEmojiSets]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = getMessageCopyOptions(\n    message,\n    groupStatefulContent({ poll, webPage, story }),\n    targetHref,\n    canCopy,\n    handleAfterCopy,\n    canCopyLink ? onCopyLink : undefined,\n    onCopyMessages,\n    onCopyNumber,\n  );\n\n  const getTriggerElement = useLastCallback(() => {\n    return document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const middleColumn = document.getElementById('MiddleColumn')!;\n    const middleColumnComputedStyle = getComputedStyle(middleColumn);\n    const headerToolsHeight = parseFloat(middleColumnComputedStyle.getPropertyValue('--middle-header-panes-height'));\n    const extraHeightPinned = headerToolsHeight || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  useEffect(() => {\n    return disableScrolling(scrollableRef.current, '.ReactionPicker');\n  }, [isOpen]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      anchor={anchor}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      withMaxHeight\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          defaultTagReactions={defaultTagReactions}\n          currentReactions={message.reactions?.results}\n          reactionsLimit={reactionsLimit}\n          onToggleReaction={onToggleReaction!}\n          onSendPaidReaction={onSendPaidReaction}\n          onShowPaidReactionModal={onShowPaidReactionModal}\n          isWithPaidReaction={isWithPaidReaction}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        ref={scrollableRef}\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowGiftButton\n          && (\n            <MenuItem icon=\"gift\" onClick={handleGiftClick}>\n              {message?.isOutgoing ? oldLang('SendAnotherGift')\n                : oldLang('Conversation.ContextMenuSendGiftTo', userFullName)}\n            </MenuItem>\n          )}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{oldLang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{oldLang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && (\n          <MenuItem icon=\"reply\" onClick={onReply}>\n            {oldLang(canQuote ? 'lng_context_quote_and_reply' : 'Reply')}\n          </MenuItem>\n        )}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {oldLang('Conversation.ContextViewReplies', repliesThreadInfo.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{oldLang('Edit')}</MenuItem>}\n        {canAppendTodoList && (\n          <MenuItem icon=\"add\" onClick={onAppendTodoList}>\n            {lang('MenuButtonAppendTodoList')}\n          </MenuItem>\n        )}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{oldLang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{oldLang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{oldLang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && (\n          <MenuItem icon=\"language\" onClick={onShowOriginal}>\n            {oldLang('ShowOriginalButton')}\n          </MenuItem>\n        )}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{oldLang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem\n            key={option.label}\n            icon={option.icon}\n            onClick={option.handler}\n            withPreventDefaultOnMouseDown\n          >\n            {oldLang(option.label)}\n          </MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{oldLang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{oldLang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{oldLang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{oldLang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{oldLang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? oldLang('lng_context_cancel_download') : oldLang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{oldLang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{oldLang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{oldLang('lng_context_report_msg')}</MenuItem>}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{oldLang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator size=\"thick\" />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(\n                  oldLang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'],\n                )}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(oldLang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <>\n            <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n            <MenuItem\n              icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n              onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n              disabled={!canShowReactionsCount && !seenByDatesCount}\n            >\n              <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n                <span className=\"MessageContextMenu--seen-by-label\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                  {canShowReactionsCount && message.reactors?.count ? (\n                    canShowSeenBy && seenByDatesCount\n                      ? oldLang(\n                        'Chat.OutgoingContextMixedReactionCount',\n                        [message.reactors.count, seenByDatesCount],\n                      )\n                      : oldLang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                  ) : (\n                    seenByDatesCount === 1 && seenByRecentPeers\n                      ? renderText(\n                        isUserId(seenByRecentPeers[0].id)\n                          ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                          : (seenByRecentPeers[0] as ApiChat).title,\n                      ) : (\n                        seenByDatesCount\n                          ? oldLang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                          : oldLang('Conversation.ContextMenuNoViews')\n                      )\n                  )}\n                </span>\n              </span>\n              <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n            </MenuItem>\n          </>\n        )}\n        {(canLoadReadDate || shouldRenderShowWhen || isEdited) && (\n          <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n        )}\n        {(canLoadReadDate || shouldRenderShowWhen) && (\n          <ReadTimeMenuItem\n            canLoadReadDate={canLoadReadDate}\n            shouldRenderShowWhen={shouldRenderShowWhen}\n            message={message}\n            closeContextMenu={onClose}\n          />\n        )}\n        {isEdited && (\n          <LastEditTimeMenuItem\n            message={message}\n          />\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPoll,\n  ApiReaction,\n  ApiStickerSet,\n  ApiStickerSetInfo,\n  ApiThreadInfo,\n  ApiTypeStory,\n  ApiWebPage,\n} from '../../../api/types';\nimport type {\n  ActiveDownloads,\n  IAlbum,\n  IAnchorPosition,\n  MessageListType,\n  ThreadId,\n} from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getCanPostInChat,\n  getIsDownloading,\n  getMessageVideo,\n  getUserFullName,\n  hasMessageTtl,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserRightBanned,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow,\n  selectBot,\n  selectCanForwardMessage,\n  selectCanGift,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectCanTranslateMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsMessageUnread,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectPeerStory,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSavedDialogIdFromMessage,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n  selectUser,\n  selectUserStatus,\n  selectWebPageFromMessage,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getSelectionAsFormattedText } from './helpers/getSelectionAsFormattedText';\nimport { isSelectionRangeInsideMessage } from './helpers/isSelectionRangeInsideMessage';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport PinMessageModal from '../../common/PinMessageModal.async';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  className?: string;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  threadId?: ThreadId;\n  poll?: ApiPoll;\n  webPage?: ApiWebPage;\n  story?: ApiTypeStory;\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canAppendTodoList?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  isMessageTranslated?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  canLoadReadDate?: boolean;\n  shouldRenderShowWhen?: boolean;\n  activeDownloads: ActiveDownloads;\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  reactionsLimit?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n  isInSavedMessages?: boolean;\n  isChannel?: boolean;\n  canReplyInChat?: boolean;\n  isWithPaidReaction?: boolean;\n  userFullName?: string;\n  canGift?: boolean;\n  savedDialogId?: string;\n};\n\nconst selection = window.getSelection();\nconst UNQUOTABLE_OFFSET = -1;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  threadId,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  messageListType,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  poll,\n  webPage,\n  story,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canShowReactionsCount,\n  chat,\n  canReport,\n  canShowReactionList,\n  canEdit,\n  canAppendTodoList,\n  enabledReactions,\n  reactionsLimit,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  canLoadReadDate,\n  shouldRenderShowWhen,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  isMessageTranslated,\n  canShowOriginal,\n  canSelectLanguage,\n  isReactionPickerOpen,\n  isInSavedMessages,\n  canReplyInChat,\n  isWithPaidReaction,\n  userFullName,\n  canGift,\n  className,\n  savedDialogId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openThread,\n    updateDraftReplyInfo,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    openReplyMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMedia,\n    cancelMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n    openPremiumModal,\n    loadOutboxReadDate,\n    copyMessageLink,\n    openDeleteMessageModal,\n    addLocalPaidReaction,\n    openPaidReactionModal,\n    reportMessages,\n    openTodoListModal,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { ref: containerRef } = useShowTransition({\n    isOpen,\n    onCloseAnimationEnd,\n    className: false,\n  });\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n  const [selectionQuoteOffset, setSelectionQuoteOffset] = useState(UNQUOTABLE_OFFSET);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canLoadReadDate && isOpen) {\n      loadOutboxReadDate({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canLoadReadDate, isOpen, message.chatId, message.id, message.readDate]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    const global = getGlobal();\n    if (album) {\n      return album.messages.some((msg) => {\n        const downloadableMedia = selectMessageDownloadableMedia(global, msg);\n        if (!downloadableMedia) return false;\n        return getIsDownloading(activeDownloads, downloadableMedia);\n      });\n    }\n\n    const downloadableMedia = selectMessageDownloadableMedia(global, message);\n    if (!downloadableMedia) return false;\n    return getIsDownloading(activeDownloads, downloadableMedia);\n  }, [activeDownloads, album, message]);\n\n  const selectionRange = canReply && selection?.rangeCount ? selection.getRangeAt(0) : undefined;\n\n  useEffect(() => {\n    if (isMessageTranslated) {\n      setSelectionQuoteOffset(UNQUOTABLE_OFFSET);\n      return;\n    }\n\n    const isMessageTextSelected = selectionRange\n      && !selectionRange.collapsed\n      && Boolean(message.content.text?.text)\n      && isSelectionRangeInsideMessage(selectionRange);\n\n    if (!isMessageTextSelected) {\n      setSelectionQuoteOffset(UNQUOTABLE_OFFSET);\n      return;\n    }\n\n    const selectionText = getSelectionAsFormattedText(selectionRange);\n\n    const messageText = message.content.text!.text.replace(/\\u00A0/g, ' ');\n\n    const canQuote = selectionText.text.trim().length > 0\n      && messageText.includes(selectionText.text);\n    if (!canQuote) {\n      setSelectionQuoteOffset(UNQUOTABLE_OFFSET);\n      return;\n    }\n\n    setSelectionQuoteOffset(selectionRange.startOffset);\n  }, [\n    selectionRange, selectionRange?.collapsed, selectionRange?.startOffset, selectionRange?.endOffset,\n    isMessageTranslated, message.content.text,\n  ]);\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    closeMenu();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    openDeleteMessageModal({\n      chatId: message.chatId,\n      messageIds,\n      isSchedule: messageListType === 'scheduled',\n    });\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    const quoteText = selectionQuoteOffset !== UNQUOTABLE_OFFSET && selectionRange\n      ? getSelectionAsFormattedText(selectionRange) : undefined;\n    if (!canReplyInChat) {\n      openReplyMenu({\n        fromChatId: message.chatId, messageId: message.id, quoteText, quoteOffset: selectionQuoteOffset,\n      });\n    } else {\n      updateDraftReplyInfo({\n        replyToMsgId: message.id,\n        quoteText,\n        quoteOffset: selectionQuoteOffset,\n        monoforumPeerId: savedDialogId,\n        replyToPeerId: undefined,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    if (message.content.todo) {\n      openTodoListModal({\n        chatId: message.chatId,\n        messageId: message.id,\n      });\n    } else {\n      setEditingId({ messageId: message.id });\n    }\n    closeMenu();\n  });\n\n  const handleAppendTodoList = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('SubscribeToTelegramPremiumForAppendToDo'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'todo' },\n        },\n        actionText: oldLang('PremiumMore'),\n      });\n    } else {\n      openTodoListModal({\n        chatId: message.chatId,\n        messageId: message.id,\n        forNewTask: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ chatId: message.chatId, messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyMessageLink({\n      chatId: message.chatId,\n      messageId: message.id,\n      shouldIncludeThread: threadId !== MAIN_THREAD_ID,\n      shouldIncludeGrouped: true, // TODO: Provide correct value when ability to target specific message is added\n    });\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    const global = getGlobal();\n    (album?.messages || [message]).forEach((msg) => {\n      const downloadableMedia = selectMessageDownloadableMedia(global, msg);\n      if (!downloadableMedia) return;\n\n      if (isDownloading) {\n        cancelMediaDownload({ media: downloadableMedia });\n      } else {\n        downloadMedia({ media: downloadableMedia, originMessage: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isInSavedMessages && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n    } else {\n      toggleReaction({\n        chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleSendPaidReaction = useLastCallback(() => {\n    addLocalPaidReaction({\n      chatId: message.chatId, messageId: message.id, count: 1,\n    });\n    closeMenu();\n  });\n\n  const handlePaidReactionModalOpen = useLastCallback(() => {\n    openPaidReactionModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  const handleReport = useLastCallback(() => {\n    if (!chat) return;\n    setIsMenuOpen(false);\n    onClose();\n    reportMessages({\n      chatId: chat.id, messageIds: reportMessageIds,\n    });\n  });\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div ref={containerRef} className={buildClassName('ContextMenuContainer', className)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        defaultTagReactions={defaultTagReactions}\n        isWithPaidReaction={isWithPaidReaction}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        reactionsLimit={reactionsLimit}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canQuote={selectionQuoteOffset !== UNQUOTABLE_OFFSET}\n        canDelete={canDelete}\n        canPin={canPin}\n        canReport={canReport}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canAppendTodoList={canAppendTodoList}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        shouldRenderShowWhen={shouldRenderShowWhen}\n        canLoadReadDate={canLoadReadDate}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        isInSavedMessages={isInSavedMessages}\n        noReplies={noReplies}\n        poll={poll}\n        webPage={webPage}\n        story={story}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onAppendTodoList={handleAppendTodoList}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onSendPaidReaction={handleSendPaidReaction}\n        onShowPaidReactionModal={handlePaidReactionModalOpen}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n        userFullName={userFullName}\n        canGift={canGift}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={oldLang('lng_polls_stop_warning')}\n        confirmLabel={oldLang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): Complete<StateProps> => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n\n    const { defaultTags, topReactions, availableReactions } = global.reactions;\n\n    const activeDownloads = selectActiveDownloads(global);\n    const chat = selectChat(global, message.chatId);\n    const isPrivate = chat && isUserId(chat.id);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const user = selectUser(global, message.chatId);\n    const userFullName = user && getUserFullName(user);\n\n    const {\n      seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions, readDateExpiresAt,\n    } = global.appConfig;\n\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n\n    const {\n      noOptions,\n      canReplyGlobally,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const canForward = selectCanForwardMessage(global, message);\n\n    const userStatus = isPrivate ? selectUserStatus(global, chat.id) : undefined;\n    const isOwn = isOwnMessage(message);\n    const chatBot = chat && selectBot(global, chat.id);\n    const isBot = Boolean(chatBot);\n    const isMessageUnread = selectIsMessageUnread(global, message);\n    const canLoadReadDate = Boolean(\n      isPrivate\n      && isOwn\n      && !isBot\n      && !isMessageUnread\n      && readDateExpiresAt\n      && message.date > Date.now() / 1000 - readDateExpiresAt\n      && !userStatus?.isReadDateRestricted\n      && messageListType !== 'scheduled',\n    );\n    const shouldRenderShowWhen = Boolean(\n      canLoadReadDate && isPrivate && selectUserStatus(global, chat.id)?.isReadDateRestrictedByMe,\n    );\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n\n    const threadInfo = threadId && selectThreadInfo(global, message.chatId, threadId);\n    const isMessageThread = Boolean(threadInfo && !threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = threadId ? selectTopic(global, message.chatId, threadId) : undefined;\n\n    const canSendText = chat && !isUserRightBanned(chat, 'sendPlain', chatFullInfo);\n\n    const canReplyInChat = chat && threadId ? getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && canSendText : false;\n\n    const isLocal = isMessageLocal(message);\n    const hasTtl = hasMessageTtl(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && !chat.isMonoforum\n      && !isMessageUnread\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n\n    const poll = selectPollFromMessage(global, message);\n    const webPage = selectWebPageFromMessage(global, message);\n    const storyData = message.content.storyData;\n    const story = storyData ? selectPeerStory(global, storyData.peerId, storyData.id) : undefined;\n\n    const canGift = selectCanGift(global, message.chatId);\n\n    const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n    const todoItemsMax = global.appConfig.todoItemsMax;\n    const canAppendTodoList = message.content.todo?.todo.othersCanAppend\n      && message.content.todo?.todo.items?.length < todoItemsMax;\n\n    return {\n      threadId,\n      chat,\n      availableReactions,\n      topReactions,\n      defaultTagReactions: defaultTags,\n      noOptions,\n      canReport,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReplyGlobally,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canAppendTodoList,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: (canCopyNumber || (!isProtected && canCopy)),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      canLoadReadDate,\n      shouldRenderShowWhen,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      reactionsLimit,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction\n        && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID && !hasTtl,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      isMessageTranslated: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      isInSavedMessages,\n      isChannel,\n      canReplyInChat,\n      isWithPaidReaction: chatFullInfo?.isPaidReactionAvailable,\n      poll,\n      story,\n      userFullName,\n      canGift,\n      savedDialogId,\n      webPage,\n    };\n  },\n)(ContextMenuContainer));\n","export function isSelectionRangeInsideMessage(range: Range) {\n  const ancestor = range.commonAncestorContainer;\n  const el = ancestor.nodeType === Node.TEXT_NODE\n    ? ancestor.parentNode! as Element\n    : ancestor as Element;\n\n  return Boolean(el.closest('.message-content-wrapper .text-content'))\n    && !(Boolean(el.closest('.EmbeddedMessage')) || Boolean(el.closest('.WebPage')));\n}\n"],"names":["useImageLoader","file","urlRef","useRef","result","image","useAsync","Promise","resolve","undefined","current","URL","revokeObjectURL","url","createObjectURL","preloadImage","useEffect","useTransitionActiveKey","deps","noAnimation","activeKey","useMemo","memo","withGlobal","global","peerId","forceShowSelf","peer","isSavedMessages","selectPeer","user","selectUser","isSelf","PeerChip","icon","title","isMinimized","canClose","isCloseNonDestructive","clickArg","mockPeer","customPeer","className","withPeerColors","withEmojiStatus","onClick","itemClassName","lang","useOldLang","apiPeer","anyPeer","chat","isApiPeerChat","iconElement","titleElement","titleText","_jsx","children","Icon","name","style","Avatar","size","getPeerTitle","FullNameTitle","fullClassName","buildClassName","isForum","isAvatarSquare","getPeerColorClass","_jsxs","dir","isRtl","ICON_SIZE","REM","EFFECT_SIZE","MIN_PARTICLE_SIZE","containerId","genericEmojiEffects","reactions","activeReactions","selectTabState","withEffects","selectPerformanceSettingsValue","availableReactions","genericEffects","ReactionAnimatedEmoji","reaction","effectSize","withEffectOnly","shouldPause","shouldLoop","loopLimit","observeIntersection","stopActiveReaction","getActions","ref","isCustom","type","availableReaction","find","r","isSameReaction","centerIconId","centerIcon","id","customEmoji","useCustomEmoji","documentId","assignedEffectId","aroundAnimation","assignedId","available","emoticon","emoji","effectId","stickers","Math","floor","random","length","isIntersecting","useIsIntersecting","mediaHashCenterIcon","getStickerHashById","mediaHashEffect","mediaDataCenterIcon","useMedia","mediaDataEffect","activeReaction","active","shouldPlayEffect","Boolean","shouldPlayCenter","shouldRender","shouldRenderEffect","transitionClassNames","animationClassNames","useShowTransitionDeprecated","shouldRenderCenter","centerAnimationClassNames","handleEnded","useLastCallback","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","useFlag","shouldShowStatic","shouldRenderStatic","staticClassNames","rootClassName","styles","root","animating","ReactionStaticEmoji","CustomEmoji","noPlay","noVideoOnMobile","observeIntersectionForPlaying","forceAlways","AnimatedSticker","animatedIcon","roundToNearestEven","tgsUrl","play","noLoop","onLoad","onEnded","_Fragment","effect","CustomEmojiEffect","particleSize","max","shouldFocusOnResize","focusLastMessage","messageHeightRef","handleResize","entry","lastHeight","newHeight","contentRect","height","isAnimatingScroll","container","target","closest","beginHeavyAnimation","resizeDiff","offsetHeight","scrollHeight","scrollTop","round","throttledResize","useThrottledCallback","useResizeObserver","callback","delay","savedCallback","setTimeout","clearTimeout","PasswordForm","isLoading","isPasswordVisible","error","hint","placeholder","submitLabel","description","shouldShowSubmit","shouldResetValue","shouldDisablePasswordManager","noRipple","onClearError","onChangePasswordVisibility","onInputChange","onSubmit","inputRef","useLang","isMobile","useAppLayout","password","setPassword","useState","canSubmit","setCanSubmit","focusDelayTimeoutMs","useTimeout","IS_TOUCH_ENV","focus","requestMutation","select","action","event","preventDefault","stopEvent","autoComplete","tabIndex","value","spellCheck","IS_TAURI","onChange","e","MIN_PASSWORD_LENGTH","maxLength","role","Button","ripple","disabled","getPointerPosition","x","touches","clientX","y","clientY","withIconHeart","staticIconId","staticIcon","mediaHash","mediaData","useMediaTransitionDeprecated","shouldApplySizeFix","shouldReplaceWithHeartIcon","src","blankUrl","alt","draggable","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","progress","isPrimary","isNegative","animationDirection","floatingBadgeContentRef","parentContainerRef","shiftX","setShiftX","beakPosition","setBeakPosition","badgeWidth","setBadgeWidth","prevBadgeWidth","usePrevious","positiveProgress","setPositiveProgress","negativeProgress","setNegativeProgress","badgeProgress","setBadgeProgress","layerProgress","setLayerProgress","showLayer","setShowLayer","disableMainProgressTransition","setDisableMainProgressTransition","disableLayerProgressTransition","setDisableLayerProgressTransition","hideMainLayer","setHideMainLayer","isCycling","setIsCycling","badgeActiveKey","shouldAnimateCaptionsRef","prevLeftText","prevRightText","prevIsNegative","CORNER_BEAK_THRESHOLD","BEAK_WIDTH_PX","BADGE_HORIZONTAL_PADDING_PX","updateBadgePosition","parentWidth","offsetWidth","halfBadgeWidth","minBadgeShift","maxBadgeShift","halfBeakWidth","currentShift","safeShift","min","newBeakPositionPx","clientWidth","forceUpdate","useForceUpdate","useSyncEffect","timeoutId","timeoutMs","LAYER_PROGRESS_TRANSITION_MS","window","shouldAnimateCaptions","hasFloatingBadge","displayLeftText","displayRightText","prevProgress","timers","targetProgress","setMainProgress","isForward","push","forEach","renderProgressLayer","isPositive","currentProgress","layerClassName","disableTransition","typeClass","buildStyle","Transition","shouldCleanup","width","viewBox","fill","d","props","isOpen","CalendarModal","useModuleLoader","Bundles","Extra","useSchedule","canScheduleUntilOnline","onCancel","openAt","onScheduled","setOnScheduled","handleMessageSchedule","date","isWhenOnline","scheduledAt","getTime","Date","now","getServerTimeOffset","handleMessageScheduleUntilOnline","SCHEDULED_WHEN_ONLINE","handleCloseCalendar","requestCalendar","whenScheduled","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","withTimePicker","selectedAt","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onClose","onSecondButtonClick","AvatarList","peers","limit","badgeText","pxSize","AVATAR_SIZES","renderingBadgeText","slice","map","MediaSpoiler","isVisible","withAnimation","thumbDataUri","isNsfw","canvasRef","useCanvasBlur","handleClick","el","rect","currentTarget","getBoundingClientRect","left","top","shiftY","setAttribute","resolveTransitionName","animationLevel","isDisabled","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MED","IS_ANDROID","IS_IOS","AVATAR_SIZE","ChannelPhotoAction","channelPhoto","photo","loopIndefinitely","withVideo","sticker","selectGiftStickerForDuration","months","selectGiftStickerForStars","stars","selectGiftStickerForTon","cryptoAmount","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","GiftAction","observeIntersectionForLoading","stickerRef","message","contentBox","stickerWrapper","StickerView","containerRef","noLoad","info","pluralValue","amount","renderTonTitle","cryptoCurrency","formatCurrency","asFontIcon","renderTextWithEntities","actionButton","Sparkles","preset","currentUserId","channel","boostPeerId","selectChat","GiveawayPrizeAction","sender","channelLink","channelTitle","channelFallbackText","renderPeerLink","peerLink","peerTitle","peerFallbackText","isViaGiveaway","withNodes","withMarkdown","renderTextFilters","translateWithYou","currentUser","messageSender","selectSender","giftSender","fromId","messageRecipient","isOutgoing","chatId","recipient","starGiftMaxConvertPeriod","appConfig","StarGiftAction","isHover","markHover","unmarkHover","getStickerFromGift","gift","isChannel","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","fallbackPeerTitle","giftDescription","starsAmount","starsToConvert","formatStarsAsText","isUpgraded","alreadyPaidUpgradeStars","isConverted","getServerTime","starGift","onMouseEnter","onMouseLeave","GiftRibbon","color","text","total","formatIntegerCompact","subtitle","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","tableData","shouldShowFrom","isUpgrade","uniqueGift","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","patternSize","yPosition","clearBottomSector","textColor","number","MiniTable","data","valueClassName","uniqueValue","SuggestedPhotoAction","openMediaViewer","uploadProfilePhoto","showNotification","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","showAvatarNotification","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","l","videoStartTs","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","suggestedAvatar","suggestedText","CropModal","ConfirmDialog","confirmHandler","selectMonoforumChannel","replyInfo","getMessageReplyInfo","originalSender","replyToMsgId","replyMessage","selectReplyMessage","ageMinSeconds","starsSuggestedPostAgeMin","isAdmin","selectIsMonoforumAdmin","SuggestedPostApproval","oldLang","scheduleDate","chatTitle","getPeerFullTitle","renderChatLink","originalSenderTitle","originalSenderLink","publishDate","formatScheduledDateTime","isPostPublished","currency","amountValue","formattedAmount","TON_CURRENCY_CODE","formatTonAsText","convertTonFromNanos","duration","formatShortDuration","suggestedPostContentBox","suggestedPostApprovalTitle","renderText","suggestedPostApprovalSection","selectChatMessage","replyMessageSender","SuggestedPostBalanceTooLow","openStarsBalanceModal","handleGetMoreStars","stopPropagation","targetPeer","suggestedPostInfo","price","STARS_CURRENCY_CODE","currencyName","buyButtonText","suggestedPostBalanceTooLowBox","suggestedPostBalanceTooLowTitle","SuggestedPostRejected","rejectComment","senderTitle","senderLink","suggestedPostRejectedContentBox","suggestedPostRejectedTitle","rejectedIcon","suggestedPostRejectedComment","comment","SimilarChannel","openChat","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","averageColor","getAverageColor","rgb2hex","useAverageColor","membersCount","MoreChannels","channelsCount","isCurrentUserPremium","openPremiumModal","openChatWithInfo","shouldReplaceHistory","profileTab","forceScrollProfileTab","similarChannelIds","isExpanded","count","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","channelJoinInfo","joinInfo","SimilarChannels","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","filter","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","shouldRenderChannels","useHorizontalScroll","scrollIntoView","behavior","handleToggle","joinedDate","Skeleton","xmlns","i","SHOW_CHANNELS_NUMBER","SINGLE_LINE_ACTIONS","Set","HIDDEN_TEXT_ACTIONS","tabState","themes","settings","isInsideTopic","replyToPeerId","isFocused","selectIsMessageFocused","direction","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","scrollTargetPosition","focusedMessage","hasUnreadReaction","unreadReactions","includes","isAccountFrozen","selectIsCurrentUserFrozen","isInSelectMode","selectIsInSelectMode","selectTheme","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","onIntersectPinnedMessage","observeIntersectionForBottom","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","focusMessage","content","isLocal","isLocalMessageId","isTextHidden","has","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","isClickableText","messageReplyInfo","withServiceReactions","areReactionsPossible","results","shouldSkipRender","isTouchScreen","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","isPinned","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","useFluidBackgroundFilter","ChannelAvatar","slug","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","GiveawayPrize","Gift","StarGift","StarGiftUnique","isBalanceTooLow","isRejected","getMessageHtmlId","singleLine","fluidMultiline","hasFullContent","onMouseDown","preventMessageInputBlur","onContextMenu","inlineWrapper","hoverable","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","shouldPreventDefault","handleScroll","deltaX","scrollLeft","deltaY","addEventListener","passive","removeEventListener","MIN_SIZE","ringsCount","ovalFactor","withLinearGradient","getContainerSize","setContainerSize","useSignal","dpr","useDevicePixelRatio","emojiImage","setEmojiImage","previewMediaHash","getStickerMediaHash","previewUrl","then","patternPositions","coordinates","ring","ringItemCount","ringProgress","ringRadius","angleShift","PI","angle","xOffset","cos","yOffset","sin","sizeFactor","clientHeight","draw","canvas","ctx","getContext","centerX","centerY","clearRect","renderX","renderY","drawImage","fillStyle","hex","factor","rgba","hexToRgb","g","b","a","toString","adjustBrightness","globalCompositeOperation","fillRect","radialGradient","createRadialGradient","addColorStop","translate","scale","fillHeight","useLayoutEffect","display","windowHeight","windowSize","get","MAX_EFFECT_COUNT","QUALITY","PaidReactionEmoji","localAmount","effectRef","effectsIds","setEffectsIds","canAddMoreEffects","useEffectWithPrevDeps","prevLocalAmount","prev","noMountTransition","withShouldRender","newEffectsIds","teactFastList","StarIcon","AnimatedIcon","LOCAL_TGS_URLS","StarReactionEffect","nonInteractive","quality","REACTION_SIZE","selectStarsState","ReactionButton","isOwnMessage","recentReactors","chosenClassName","onPaidClick","resetLocalPaidReactions","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","starsState","useSelector","areStarsLoaded","handlePaidClick","prevReaction","button","balance","originReaction","startX","startY","currentScale","Number","getComputedStyle","cancel","animate","offset","easing","prevAmount","shouldRenderPaidCounter","own","paid","outside","isReactionChosen","chosen","animatedEmoji","AnimatedCounter","paidCounter","counter","maxWidth","metaChildren","noRecentReactors","tags","toggleReaction","addLocalPaidReaction","updateMiddleSearch","performMiddleSearch","openFrozenAccountModal","areTags","recentReactions","totalCount","reduce","acc","recentReactorsByReactionKey","recentReaction","key","getReactionKey","messageKey","getMessageKey","reactionKey","shouldHideRecentReactors","tag","isChosen","update","savedTag","initialSection","paidLocalCount","localId","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","RADIUS","ITERATIONS","dataUri","withRaf","radius","preferredWidth","preferredHeight","isStarted","img","Image","processBlur","alpha","IS_CANVAS_FILTER_SUPPORTED","fastBlur","onload","requestMeasure","PickerItem","avatarElement","inputElement","inputPosition","inactive","titleClassName","subtitleClassName","onDisabledClick","isClickable","RippleEffect","SVG_MAP","Map","SvgFluidBackgroundFilter","referenceCount","constructor","this","filterId","addSvgDefinition","SVG_NAMESPACE","in","stdDeviation","mode","values","in2","operator","getFilterId","removeReference","removeSvgDefinition","isUsed","asValue","colorFilter","delete","prepareStyle","svg","set","renderMessageText","highlight","emojiSize","asPreview","truncateLength","isProtected","forcePlayback","shouldRenderAsHtml","isForMediaViewer","maxTimestamp","entities","contentNotSupportedText","getMessageTextWithFallback","getTranslationFn","trimText","renderMessageSummary","noEmoji","TRUNCATED_SUMMARY_LENGTH","statefulContent","getMessageStatefulContent","hasSpoilers","some","ApiMessageEntityTypes","Spoiler","hasCustomEmoji","getMessageSummaryText","getMessageSummaryEmoji","emojiWithSpace","getMessageSummaryDescription","Array","isArray","replyOriginForId","loadMessage","ITEM_CLASS_NAME","PeerPicker","categories","itemIds","categoryPlaceholderKey","filterValue","filterPlaceholder","notFoundText","searchInputId","noScrollRestore","isSearchable","lockedUnselectedSubtitle","isViewOnly","itemInputType","withStatus","withPeerTypes","withPeerUsernames","withDefaultPadding","onFilterChange","onLoadMore","optionalProps","allowMultiple","lockedSelectedIds","lockedUnselectedIds","selectedCategories","selectedCategory","MEMO_EMPTY_ARRAY","selectedIds","selectedId","shouldMinimize","focusNoScroll","lockedSelectedIdsSet","lockedUnselectedIdsSet","unlockedSelectedIds","categoriesByType","buildCollectionByKey","sortedItemIds","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","concat","handleItemClick","categoryType","newSelectedCategories","splice","indexOf","onSelectedCategoriesChange","newSelectedIds","onSelectedIdsChange","onSelectedCategoryChange","onSelectedIdChange","handleFilterChange","viewportIds","getMore","useInfiniteScroll","renderItem","useCallback","isCategory","category","peerOrCategory","DEBUG","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","username","getMainUsername","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","onlineStatus","langKey","getPeerTypeKey","getSubtitle","Radio","checked","onlyInput","Checkbox","beforeChildren","pickerCategoryTitle","header","peerChip","InputText","InfiniteScroll","pickerList","padded","items","itemSelector","Loading","noResults","useRunDebounced","ms","noFirst","noLast","useDebouncedCallback","cb","DEFAULT_DURATION","stopById","animateHorizontalScroll","selectCanAnimateInterface","getAttribute","containerWidth","scrollWidth","dataset","scrollId","path","remainingPath","isStopped","scrollSnapType","startAt","cleanup","t","currentPath","transition","CUSTOM_PEER_PREMIUM","isCustomPeer","titleKey","subtitleKey","avatarIcon","withPremiumGradient","CUSTOM_PEER_INCLUDED_CHAT_TYPES","peerColorId","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","CUSTOM_PEER_HIDDEN","loadedPreviewUrls","otherProps","isThumbOpen","unmarkThumbOpen","thumbClassNames","isPreviewOpen","markPreviewOpen","unmarkPreviewOpen","previewClassNames","isAnimationReady","markAnimationReady","handlePreviewLoad","add","handleAnimationReady","useCustomBackground","theme","settingValue","setThemeSettings","setValue","startsWith","cacheApi","CUSTOM_BG_CACHE_NAME","Blob","catch","background","isBlurred","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","attr","getTotalGiftAvailability","originalDetails","getGiftAttributesFromList","scheduledAnimationsCounter","resetCounterOnTickEnd","throttleWithTickEnd","prevText","usePreviousDeprecated","shouldAnimate","characters","elements","textLength","prevTextLength","charIndex","prevTextCharIndex","unshift","renderAnimatedCharacters","scrollLockEl","excludedClosestSelector","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","getTouchY","contains","preventDefaultForScrollKeys","HTMLElement","element","tagName","toLowerCase","isTextBox","disableScrolling","_excludedClosestSelector","document","onkeydown","enableScrolling","useFolderManagerForOrderedIds","folderId","addOrderedIdsCallback","getOrderedIds","useFolderManagerForUnreadCounters","addUnreadCountersCallback","getUnreadCounters","useFolderManagerForChatsCount","addChatsCountCallback","getChatsCount","useFolderManagerForUnreadChatsByFolder","addUnreadChatsByFolderIdCallback","getUnreadChatsByFolderId","ReactionSelectorCustomReaction","isReady","noAppearAnimation","onToggleReaction","onSendPaidReaction","onShowPaidReactionModal","StarReaction","ReactionSelectorReaction","mediaAppearData","appearAnimation","selectAnimation","staticIconData","isFirstPlay","unmarkIsFirstPlay","isActivated","activate","deactivate","cn","createClassNameBuilder","ReactionSelector","allAvailableReactions","topReactions","defaultTagReactions","enabledReactions","currentReactions","reactionsLimit","isPrivate","isInSavedMessages","isInStoryViewer","isForEffects","effectReactions","isWithPaidReaction","onShowMore","areReactionsLocked","shouldUseCurrentReactions","allowed","filteredReactions","isCustomReaction","isInactive","canSendReaction","sortedReactions","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","handleOpenPremiumModal","hintText","parts","split","Link","MODAL_HIDE_DELAY_MS","useInputFocusOnOpen","isConnected","blur","BOTTOM_FOCUS_OFFSET","RELOCATED_FOCUS_OFFSET","SCROLL_MAX_DISTANCE","FOCUS_MARGIN","isQuote","isRelocatedRef","isRelocated","messagesContainer","isToBottom","scrollPosition","exec","maxDistance","animateScroll","position","margin","forceDirection","forceNormalContainerHeight","shouldReturnMutationFn","firstQuote","querySelector","addExtraClass","requestForcedReflow","forcePreview","thumbnail","localMediaHash","previewBlobUrl","AnimatedIconWithPreview","VERIFIED_PRIORITY_BASE","PINNED_PRIORITY_BASE","sortChatIds","chatIds","shouldPrioritizeVerified","priorityIds","orderBy","Infinity","priority","lastMessage","selectChatLastMessage","isVerified","ENTITY_CLASS_BY_NODE_NAME","B","Bold","STRONG","I","Italic","EM","INS","Underline","U","S","Strike","STRIKE","DEL","CODE","Code","PRE","Pre","BLOCKQUOTE","Blockquote","MAX_TAG_DEEPNESS","parseHtmlAsFormattedText","html","withMarkdownLinks","skipMarkdown","fragment","createElement","innerHTML","parsedHtml","replace","IS_EMOJI_SUPPORTED","parseMarkdown","RegExp","RE_LINK_TEMPLATE","_","link","parseMarkdownLinks","fixImageContent","innerText","trim","textIndex","recursionDeepness","addEntity","node","nodeType","Node","COMMENT_NODE","index","entity","rawText","entityType","nodeName","MentionName","Url","href","Email","Phone","TextUrl","getEntityTypeFromNode","rawIndex","substring","userId","language","Timestamp","timestamp","isNaN","getEntityDataFromNode","hasChildNodes","from","childNodes","querySelectorAll","replaceWith","ELEMENT_NODE","getMessageIdsForSelectedText","selection","getSelection","selectedFragments","rangeCount","getRangeAt","cloneContents","shouldIncludeLastMessage","focusNode","focusOffset","hasParentWithClassName","MESSAGE_CONTENT_CLASS_NAME","childElementCount","classList","messageEl","firstChild","removeChild","pop","parentNode","BadgeButton","currentArgs","onHeavyAnimationEnd","isAnimating","args","mutate","createMutateFunction","restartCurrentScrollAnimation","cancelSingleAnimation","forceDuration","FocusDirection","Static","elementHeight","currentScrollTop","containerHeight","elementTop","getOffsetToContainer","targetContainerHeight","normalHeight","scrollTo","scrollFrom","calculateScrollFrom","absPath","abs","SCROLL_SHORT_TRANSITION_MAX_DISTANCE","shortTransition","longTransition","SCROLL_MIN_DURATION","SCROLL_MAX_DURATION","prevOnHeavyAnimationEnd","animateSingle","newScrollTop","cancelScrollBlockingAnimation","isLottie","stickerHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","withSharedAnimation","onAnimationEnd","COLORS","red","blue","purple","green","orange","COLOR_KEYS","Object","keys","validSvgRandomId","useUniqueId","colorKey","isDarkTheme","gradientColor","startColor","endColor","ribbon","x1","y1","x2","y2","gradientUnits","keyClassName","PromptDialog","submitText","initialValue","setText","handleTextChange","handleSubmit","Modal","isSlim","teactExperimentControlled","isText","withCount","editSavedReactionTag","menuRef","isRenamePromptOpen","openRenamePrompt","closeRenamePrompt","hasText","handleRemoveClick","handleRenameTag","newTitle","getTriggerElement","getRootElement","body","getMenuElement","getLayout","withPortal","shouldAvoidNegativePosition","tagText","tail","tailFill","Menu","autoClose","MenuItem","destructive","preventScroll","div","ALLOWED_QUOTE_ENTITIES","getSelectionAsFormattedText","range","clonedSelection","appendChild","commonAncestorContainer","currentElement","parentElement","wrapHtmlWithMarkupTags","getSelectionAsHtml","stripEntitiesForQuote","PinMessageModal","getCopyLabel","hasSelection","editDate","formatDateAtTime","shouldRenderShowWhen","canLoadReadDate","closeContextMenu","openPrivacySettingsNoticeModal","readDate","handleOpenModal","isReadDate","MessageContextMenu","isReactionPickerOpen","poll","webPage","story","targetHref","canSendNow","canReschedule","canBuyPremium","canReply","canQuote","canEdit","canAppendTodoList","noReplies","canPin","canUnpin","canDelete","canForward","canReport","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canDownload","canSaveGif","canRevote","canClosePoll","canTranslate","canShowOriginal","canSelectLanguage","isDownloading","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","customEmojiSets","onReply","onOpenThread","onEdit","onAppendTodoList","onPin","onUnpin","onForward","onDelete","onFaveSticker","onReport","onUnfaveSticker","onSelect","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","userFullName","canGift","openStickerSet","openCustomEmojiSets","loadStickers","openGiftModal","scrollableRef","noReactions","withReactions","isEdited","seenByDates","isPremiumGift","isGiftCode","isStarGift","isStarGiftUnique","shouldShowGiftButton","isUserId","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleGiftClick","forUserId","customEmojiSet","stickerSetInfo","accessHash","handleOpenCustomEmojiSets","shortName","setIds","copyOptions","afterEffect","options","getMessageText","getMessagePhoto","getWebPageVideo","getWebPagePhoto","contact","getMessageContact","canImageBeCopied","hasMediaLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","IS_SAFARI","label","handler","mediaLoader","blobUrl","copyImageToClipboard","copyTextToClipboard","anchorNode","selectionParentNode","selectedMessageElement","checkMessageHasSelection","execCommand","clipboardText","copyHtmlToClipboard","join","getMessageTextWithSpoilers","getMessageCopyOptions","groupStatefulContent","extraHeightAudioPlayer","middleColumn","getElementById","middleColumnComputedStyle","extraHeightPinned","parseFloat","getPropertyValue","extraPaddingX","extraTopPadding","extraMarginTop","menuElMinWidth","handleOpenMessageReactionPicker","withMaxHeight","messagesCount","option","withPreventDefaultOnMouseDown","MenuSeparator","inline","withWrap","reactors","getUserFullName","ReadTimeMenuItem","LastEditTimeMenuItem","UNQUOTABLE_OFFSET","detectedLanguage","selectCurrentMessageList","defaultTags","activeDownloads","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","maxUniqueReactions","readDateExpiresAt","noOptions","canReplyGlobally","selectAllowedMessageActionsSlow","selectCanForwardMessage","isOwn","chatBot","selectBot","isBot","isMessageUnread","selectIsMessageUnread","isReadDateRestricted","isReadDateRestrictedByMe","isScheduled","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","topic","selectTopic","canSendText","isUserRightBanned","canReplyInChat","getCanPostInChat","isMessageLocal","hasTtl","hasMessageTtl","isMonoforum","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","selectIsMessageProtected","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","translationRequestLanguage","selectRequestedMessageTranslationLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","selectRequestedChatTranslationLanguage","selectIsChatWithSelf","selectPollFromMessage","selectWebPageFromMessage","storyData","selectPeerStory","selectCanGift","savedDialogId","selectSavedDialogIdFromMessage","todoItemsMax","todo","othersCanAppend","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","selectIsPremiumPurchaseBlocked","selectCanScheduleUntilOnline","isMessageTranslated","selectIsReactionPickerOpen","isPaidReactionAvailable","album","openThread","updateDraftReplyInfo","setEditingId","pinMessage","openForwardMenu","openReplyMenu","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","downloadMedia","cancelMediaDownload","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","loadReactors","copyMessagesByIds","saveGif","cancelPollVote","closePoll","requestMessageTranslation","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","loadOutboxReadDate","copyMessageLink","openDeleteMessageModal","reportMessages","openTodoListModal","isMenuOpen","setIsMenuOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","selectionQuoteOffset","setSelectionQuoteOffset","calendar","chatsById","chats","byId","usersById","users","uniqueReactors","PREVIEW_AVATAR_COUNT","messages","msg","downloadableMedia","selectMessageDownloadableMedia","getIsDownloading","selectionRange","collapsed","ancestor","TEXT_NODE","isSelectionRangeInsideMessage","selectionText","messageText","startOffset","endOffset","closeMenu","handleDelete","isSchedule","closePinModal","handleReply","quoteText","quoteOffset","monoforumPeerId","fromChatId","handleOpenThread","handleEdit","handleAppendTodoList","forNewTask","handlePin","handleUnpin","isUnpin","handleForward","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","shouldIncludeThread","shouldIncludeGrouped","handleCopyNumber","phoneNumber","handleDownloadClick","media","originMessage","handleSaveGif","video","getMessageVideo","gif","handleToggleReaction","shouldAddToRecent","handleSendPaidReaction","handlePaidReactionModalOpen","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","handleReport","confirmLabel"],"sourceRoot":""}