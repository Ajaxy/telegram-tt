{"version":3,"file":"2859.789ed6382708b07c4cb7.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n  ApiTopic,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  MAX_INT_32,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addNotifyExceptions,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceNotifyExceptions,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.markChatRead({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = selectIsCurrentUserFrozen(global) ? undefined\n    : await callApi('fetchDiscussionMessage', {\n      chat: selectChat(global, loadingChatId)!,\n      messageId: Number(loadingThreadId),\n    });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  let { mutedUntil } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if (isMuted && !mutedUntil) {\n    mutedUntil = MAX_INT_32;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { mutedUntil } });\n});\n\naddActionHandler('updateChatSilentPosting', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { isSilentPosting: isEnabled } });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isMuted, mutedUntil,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, mutedUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('markChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  void callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markChatMessagesRead', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  if (!chat.isForum) {\n    await callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    actions.readAllMentions({ chatId: id });\n    actions.readAllReactions({ chatId: id });\n    if (chat.hasUnreadMark) {\n      actions.markChatRead({ id });\n    }\n    return;\n  }\n\n  let hasMoreTopics = true;\n  let lastTopic: ApiTopic | undefined;\n  let processedCount = 0;\n\n  while (hasMoreTopics) {\n    const result = await callApi('fetchTopics', {\n      chat, offsetDate: lastTopic?.date, offsetTopicId: lastTopic?.id, offsetId: lastTopic?.lastMessageId, limit: 100,\n    });\n\n    if (!result?.topics?.length) return;\n\n    result.topics.forEach((topic) => {\n      if (!topic.unreadCount && !topic.unreadMentionsCount && !topic.unreadReactionsCount) return;\n      actions.markTopicRead({ chatId: id, topicId: topic.id });\n    });\n\n    lastTopic = result.topics[result.topics.length - 1];\n    processedCount += result.topics.length;\n    if (result.count <= processedCount) {\n      hasMoreTopics = false;\n    }\n  }\n});\n\naddActionHandler('markChatRead', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) return;\n\n  callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n  actions.readAllMentions({ chatId, threadId: topicId });\n  actions.readAllReactions({ chatId, threadId: topicId });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, force } = payload;\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePaidMessagesPrice', async (global, actions, payload): Promise<void> => {\n  const { chatId, paidMessagesStars, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('updatePaidMessagesPrice', {\n    chat,\n    paidMessagesStars,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = updateChat(global, chatId, { paidMessagesStars });\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n  const shouldReplaceStaleState = listType === 'active' && isFirstBatch;\n  const isAccountFreeze = selectIsCurrentUserFrozen(global);\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch && !isAccountFreeze,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch && !isAccountFreeze,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n  }\n\n  if (shouldReplaceStaleState) {\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceNotifyExceptions(global, result.notifyExceptionById);\n  } else {\n    global = addUserStatuses(global, result.userStatusesById);\n    global = addNotifyExceptions(global, result.notifyExceptionById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","shouldReplaceStaleState","isAccountFreeze","selectIsCurrentUserFrozen","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","addChatListIds","replaceUserStatuses","userStatusesById","replaceNotifyExceptions","notifyExceptionById","addUserStatuses","addNotifyExceptions","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","length","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openChatWithParams","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","callAttachBot","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","markChatRead","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","isMuted","mutedUntil","openFrozenAccountModal","MAX_INT_32","settings","isEnabled","isSilentPosting","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","readAllMentions","readAllReactions","lastTopic","hasMoreTopics","processedCount","date","offsetTopicId","lastMessageId","topics","unreadCount","unreadMentionsCount","unreadReactionsCount","markTopicRead","count","selectTopic","lastTopicMessageId","updateTopic","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","inviteHash","voicechat","livestream","substring","start","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","key","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","channelPostId","currentChat","starRefStartPrefixes","appConfig","prefix","p","slice","action","usernameChat","requestAppWebView","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","peer","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","paidMessagesStars","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}