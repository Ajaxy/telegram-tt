{"version":3,"file":"2385.61364d8640e26ab8ed89.js","mappings":"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","sources":["webpack://telegram-t/webpack/runtime/chunk loaded","webpack://telegram-t/webpack/runtime/startup chunk dependencies","webpack://telegram-t/./src/config.ts","webpack://telegram-t/./src/util/debugConsole.ts","webpack://telegram-t/./src/util/schedulers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/peers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/helpers.ts","webpack://telegram-t/./src/util/iteratees.ts","webpack://telegram-t/./src/util/serverTime.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/pathBytesToSvg.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/common.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/symbols.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messageContent.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/bots.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/calls.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/reactions.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/chats.ts","webpack://telegram-t/./src/util/waveform.ts","webpack://telegram-t/./src/api/gramjs/gramjsBuilders/index.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/users.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/misc.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/stories.ts","webpack://telegram-t/./src/api/gramjs/scheduleUnmute.ts","webpack://telegram-t/./src/api/gramjs/updates/UpdatePts.ts","webpack://telegram-t/./src/api/gramjs/updates/updater.ts","webpack://telegram-t/./src/api/gramjs/methods/auth.ts","webpack://telegram-t/./src/util/SortedQueue.ts","webpack://telegram-t/./src/api/gramjs/updates/updateManager.ts","webpack://telegram-t/./src/util/cacheApi.ts","webpack://telegram-t/./src/api/gramjs/methods/media.ts","webpack://telegram-t/./src/api/gramjs/ChatAbortController.ts","webpack://telegram-t/./src/api/gramjs/methods/client.ts","webpack://telegram-t/./src/api/gramjs/methods/bots.ts","webpack://telegram-t/./src/api/gramjs/methods/calls.ts","webpack://telegram-t/./src/api/gramjs/methods/chats.ts","webpack://telegram-t/./src/api/gramjs/methods/account.ts","webpack://telegram-t/./src/util/files.ts","webpack://telegram-t/./src/api/gramjs/methods/messages.ts","webpack://telegram-t/./src/util/messageKey.ts","webpack://telegram-t/./src/api/gramjs/methods/users.ts","webpack://telegram-t/./src/api/gramjs/methods/symbols.ts","webpack://telegram-t/./src/api/gramjs/methods/management.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/appConfig.ts","webpack://telegram-t/./src/api/gramjs/methods/settings.ts","webpack://telegram-t/./src/api/gramjs/methods/twoFaSettings.ts","webpack://telegram-t/./src/api/gramjs/methods/reactions.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/statistics.ts","webpack://telegram-t/./src/api/gramjs/methods/statistics.ts","webpack://telegram-t/./src/api/gramjs/methods/phoneCallState.ts","webpack://telegram-t/./src/api/gramjs/methods/payments.ts","webpack://telegram-t/./src/api/gramjs/methods/init.ts","webpack://telegram-t/./src/api/gramjs/methods/stories.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/payments.ts","webpack://telegram-t/./src/api/gramjs/worker/worker.ts","webpack://telegram-t/./src/api/types/messages.ts","webpack://telegram-t/./src/api/types/media.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js","webpack://telegram-t/./src/lib/twemojiRegex.js","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/util/emoji/fixNonStandardEmoji.ts","webpack://telegram-t/./src/util/emoji/parseEmojiOnlyString.ts","webpack://telegram-t/webpack/bootstrap","webpack://telegram-t/webpack/runtime/compat get default export","webpack://telegram-t/webpack/runtime/define property getters","webpack://telegram-t/webpack/runtime/ensure chunk","webpack://telegram-t/webpack/runtime/get javascript chunk filename","webpack://telegram-t/webpack/runtime/get mini-css chunk filename","webpack://telegram-t/webpack/runtime/global","webpack://telegram-t/webpack/runtime/hasOwnProperty shorthand","webpack://telegram-t/webpack/runtime/make namespace object","webpack://telegram-t/webpack/runtime/node module decorator","webpack://telegram-t/webpack/runtime/publicPath","webpack://telegram-t/webpack/runtime/importScripts chunk loading","webpack://telegram-t/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([5802,8764,1649,1637].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","import type { ApiReactionEmoji } from './api/types';\nimport type { ApiLimitType, ApiLimitTypeForPromo, ApiPremiumSection } from './global/types';\n\nexport const APP_CODE_NAME = 'A';\nexport const APP_NAME = process.env.APP_NAME || `Telegram Web ${APP_CODE_NAME}`;\nexport const RELEASE_DATETIME = process.env.RELEASE_DATETIME;\n\nexport const PRODUCTION_HOSTNAME = 'web.telegram.org';\nexport const PRODUCTION_URL = 'https://web.telegram.org/a';\nexport const WEB_VERSION_BASE = 'https://web.telegram.org/'; // Used to redirect to other versions\nexport const BASE_URL = process.env.BASE_URL;\n\nexport const IS_MOCKED_CLIENT = process.env.APP_MOCKED_CLIENT === '1';\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\nexport const IS_BETA = process.env.APP_ENV === 'staging';\nexport const IS_PACKAGED_ELECTRON = process.env.IS_PACKAGED_ELECTRON;\n\nexport const DEBUG = process.env.APP_ENV !== 'production';\nexport const DEBUG_MORE = false;\nexport const DEBUG_LOG_FILENAME = 'tt-log.json';\nexport const STRICTERDOM_ENABLED = DEBUG;\n\nexport const BETA_CHANGELOG_URL = 'https://telegra.ph/WebA-Beta-03-20';\nexport const ELECTRON_HOST_URL = process.env.ELECTRON_HOST_URL!;\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const PAGE_TITLE = process.env.APP_TITLE!;\nexport const INACTIVE_MARKER = '[Inactive]';\n\nexport const DEBUG_PAYMENT_SMART_GLOCAL = false;\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const PASSCODE_CACHE_NAME = 'tt-passcode';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state';\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;\nexport const GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT = 10;\nexport const GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT = 150;\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const CUSTOM_EMOJI_PREVIEW_CACHE_DISABLED = false;\nexport const CUSTOM_EMOJI_PREVIEW_CACHE_NAME = 'tt-custom-emoji-preview';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs-v32';\nexport const ASSET_CACHE_NAME = 'tt-assets';\nexport const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];\nexport const DATA_BROADCAST_CHANNEL_NAME = 'tt-global';\nexport const ESTABLISH_BROADCAST_CHANNEL_NAME = 'tt-establish';\nexport const MULTITAB_LOCALSTORAGE_KEY = 'tt-multitab';\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const ARCHIVE_MINIMIZED_HEIGHT = 36;\nexport const CHAT_HEIGHT_PX = 72;\nexport const TOPIC_HEIGHT_PX = 65;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const GLOBAL_TOPIC_SEARCH_SLICE = 5;\nexport const GLOBAL_SEARCH_CONTACTS_LIMIT = 20;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_PHOTOS_LIMIT = 40;\nexport const PROFILE_SENSITIVE_AREA = 500;\nexport const TOPIC_LIST_SENSITIVE_AREA = 600;\nexport const COMMON_CHATS_LIMIT = 100;\nexport const GROUP_CALL_PARTICIPANTS_LIMIT = 100;\nexport const STORY_LIST_LIMIT = 100;\nexport const API_GENERAL_ID_LIMIT = 100;\nexport const STATISTICS_PUBLIC_FORWARDS_LIMIT = 50;\n\nexport const STORY_VIEWS_MIN_SEARCH = 15;\nexport const STORY_MIN_REACTIONS_SORT = 10;\nexport const STORY_VIEWS_MIN_CONTACTS_FILTER = 20;\n\n// As in Telegram for Android\n// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7799\nexport const TOP_REACTIONS_LIMIT = 100;\n\n// As in Telegram for Android\n// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7781\nexport const RECENT_REACTIONS_LIMIT = 50;\nexport const REACTION_LIST_LIMIT = 100;\nexport const REACTION_UNREAD_SLICE = 100;\nexport const MENTION_UNREAD_SLICE = 100;\nexport const TOPICS_SLICE = 20;\nexport const TOPICS_SLICE_SECOND_LOAD = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\n\nexport const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min\n\nexport const DEFAULT_VOLUME = 1;\nexport const DEFAULT_PLAYBACK_RATE = 1;\nexport const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min\n\nexport const ANIMATION_LEVEL_CUSTOM = -1;\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const PREVIEW_AVATAR_COUNT = 3;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\nexport const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s\n// 10000s from https://corefork.telegram.org/api/url-authorization#automatic-authorization\nexport const APP_CONFIG_REFETCH_INTERVAL = 10000 * 1000;\nexport const GENERAL_REFETCH_INTERVAL = 60 * 60 * 1000; // 1h\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\nexport const EDITABLE_STORY_INPUT_ID = 'editable-story-input-text';\n// eslint-disable-next-line max-len\nexport const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition_slide-active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .Transition_slide-to #${EDITABLE_INPUT_ID}`;\nexport const EDITABLE_INPUT_MODAL_CSS_SELECTOR = `#${EDITABLE_INPUT_MODAL_ID}`;\nexport const EDITABLE_STORY_INPUT_CSS_SELECTOR = `#${EDITABLE_STORY_INPUT_ID}`;\n\nexport const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\nexport const MESSAGE_CONTENT_CLASS_NAME = 'message-content';\nexport const MESSAGE_CONTENT_SELECTOR = '.message-content';\n\n// Screen width where Pinned Message / Audio Player in the Middle Header can be safely displayed\nexport const SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1440; // px\n// Screen width where Pinned Message / Audio Player in the Middle Header shouldn't collapse with ChatInfo\nexport const SAFE_SCREEN_WIDTH_FOR_CHAT_INFO = 1150; // px\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES = 1340; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const MAX_INT_32 = 2 ** 31 - 1;\nexport const TMP_CHAT_ID = '0';\n\nexport const ANIMATION_END_DELAY = 100;\n\nexport const FAST_SMOOTH_MIN_DURATION = 300;\nexport const FAST_SMOOTH_MAX_DURATION = 600;\nexport const FAST_SMOOTH_MAX_DISTANCE = 750;\nexport const FAST_SMOOTH_SHORT_TRANSITION_MAX_DISTANCE = 300; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((FAST_SMOOTH_MIN_DURATION + FAST_SMOOTH_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n  'updateThreadInfos',\n]);\n\nexport const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 72;\nexport const EMOJI_SIZE_PICKER = 36;\nexport const COMPOSER_EMOJI_SIZE_PICKER = 32;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_PICKER_MAX_SHARED_COVERS = 20;\nexport const STICKER_SIZE_SEARCH = 72;\nexport const STICKER_SIZE_MODAL = 72;\nexport const EMOJI_SIZE_MODAL = 36;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_PASSCODE = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 100;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const STICKER_SIZE_JOIN_REQUESTS = 140;\nexport const STICKER_SIZE_INVITES = 140;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const RECENT_STATUS_LIMIT = 20;\nexport const EMOJI_STATUS_LOOP_LIMIT = 2;\nexport const EMOJI_SIZES = 7;\nexport const TOP_SYMBOL_SET_ID = 'top';\nexport const POPULAR_SYMBOL_SET_ID = 'popular';\nexport const RECENT_SYMBOL_SET_ID = 'recent';\nexport const FAVORITE_SYMBOL_SET_ID = 'favorite';\nexport const CHAT_STICKER_SET_ID = 'chatStickers';\nexport const DEFAULT_TOPIC_ICON_STICKER_ID = 'topic-default-icon';\nexport const DEFAULT_STATUS_ICON_ID = 'status-default-icon';\nexport const EMOJI_IMG_REGEX = /<img[^>]+alt=\"([^\"]+)\"(?![^>]*data-document-id)[^>]*>/gm;\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const VIDEO_WEBM_TYPE = 'video/webm';\nexport const GIF_MIME_TYPE = 'image/gif';\n\nexport const LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';\nexport const VIDEO_STICKER_MIME_TYPE = 'video/webm';\n\nexport const SUPPORTED_IMAGE_CONTENT_TYPES = new Set([\n  'image/png', 'image/jpeg', GIF_MIME_TYPE,\n]);\n\nexport const SUPPORTED_VIDEO_CONTENT_TYPES = new Set([\n  'video/mp4', 'video/quicktime',\n]);\n\nexport const SUPPORTED_AUDIO_CONTENT_TYPES = new Set([\n  'audio/mp3',\n  'audio/ogg',\n  'audio/wav',\n  'audio/mpeg',\n  'audio/flac',\n  'audio/aac',\n  'audio/m4a',\n  'audio/mp4',\n  'audio/x-m4a',\n]);\n\nexport const CONTENT_TYPES_WITH_PREVIEW = new Set([\n  ...SUPPORTED_IMAGE_CONTENT_TYPES,\n  ...SUPPORTED_VIDEO_CONTENT_TYPES,\n]);\n\nexport const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Telegram.';\n\n// Taken from https://github.com/telegramdesktop/tdesktop/blob/41d9a9fcbd0c809c60ddbd9350791b1436aff7d9/Telegram/SourceFiles/ui/boxes/choose_language_box.cpp#L28\nexport const SUPPORTED_TRANSLATION_LANGUAGES = [\n  // Official\n  'en', 'ar', 'be', 'ca', 'zh', 'nl', 'fr', 'de', 'id',\n  'it', 'ja', 'ko', 'pl', 'pt', 'ru', 'es', 'uk',\n  // Unofficial\n  'af', 'sq', 'am', 'hy', 'az', 'eu', 'bn', 'bs', 'bg',\n  'ceb', 'zh-CN', 'zh-TW', 'co', 'hr', 'cs', 'da', 'eo',\n  'et', 'fi', 'fy', 'gl', 'ka', 'el', 'gu', 'ht', 'ha',\n  'haw', 'he', 'iw', 'hi', 'hmn', 'hu', 'is', 'ig', 'ga',\n  'jv', 'kn', 'kk', 'km', 'rw', 'ku', 'ky', 'lo', 'la',\n  'lv', 'lt', 'lb', 'mk', 'mg', 'ms', 'ml', 'mt', 'mi',\n  'mr', 'mn', 'my', 'ne', 'no', 'ny', 'or', 'ps', 'fa',\n  'pa', 'ro', 'sm', 'gd', 'sr', 'st', 'sn', 'sd', 'si',\n  'sk', 'sl', 'so', 'su', 'sw', 'sv', 'tl', 'tg', 'ta',\n  'tt', 'te', 'th', 'tr', 'tk', 'ur', 'ug', 'uz', 'vi',\n  'cy', 'xh', 'yi', 'yo', 'zu',\n];\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z][-a-zA-Z0-9]{1,62})\\\\b([-a-zA-Z0-9()@:%_+.,~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TG_LINK = /^tg:(\\/\\/)?/i;\nexport const RE_TME_LINK = /^(https?:\\/\\/)?([-a-zA-Z0-9@:%_+~#=]{1,32}\\.)?t\\.me/i;\nexport const RE_TELEGRAM_LINK = /^(https?:\\/\\/)?telegram\\.org\\//i;\nexport const TME_LINK_PREFIX = 'https://t.me/';\nexport const BOT_FATHER_USERNAME = 'botfather';\nexport const USERNAME_PURCHASE_ERROR = 'USERNAME_PURCHASE_AVAILABLE';\nexport const PURCHASE_USERNAME = 'auction';\nexport const TME_WEB_DOMAINS = new Set(['t.me', 'web.t.me', 'a.t.me', 'k.t.me', 'z.t.me']);\nexport const WEB_APP_PLATFORM = 'weba';\n\n// eslint-disable-next-line max-len\nexport const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);\n\nexport const API_CHAT_TYPES = ['bots', 'channels', 'chats', 'users'] as const;\n\nexport const HEART_REACTION: ApiReactionEmoji = {\n  emoticon: '❤',\n};\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = '777000';\nexport const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513\nexport const ANONYMOUS_USER_ID = '2666000';\nexport const RESTRICTED_EMOJI_SET_ID = '7173162320003080';\nexport const CHANNEL_ID_LENGTH = 14; // 14 symbols, including -100 prefix\nexport const DEFAULT_GIF_SEARCH_BOT_USERNAME = 'gif';\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const SAVED_FOLDER_ID = -1;\nexport const DELETED_COMMENTS_CHANNEL_ID = '-100777';\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const DEFAULT_LANG_CODE = 'en';\nexport const DEFAULT_LANG_PACK = 'android';\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';\nexport const FAQ_URL = 'https://telegram.org/faq';\nexport const PRIVACY_URL = 'https://telegram.org/privacy';\nexport const MINI_APP_TOS_URL = 'https://telegram.org/tos/mini-apps';\nexport const GENERAL_TOPIC_ID = 1;\nexport const STORY_EXPIRE_PERIOD = 86400; // 1 day\nexport const STORY_VIEWERS_EXPIRE_PERIOD = 86400; // 1 day\nexport const FRESH_AUTH_PERIOD = 86400; // 1 day\n\nexport const LIGHT_THEME_BG_COLOR = '#99BA92';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';\nexport const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';\nexport const PEER_COLOR_BG_OPACITY = '1a';\nexport const PEER_COLOR_BG_ACTIVE_OPACITY = '2b';\nexport const PEER_COLOR_GRADIENT_STEP = 5; // px\nexport const MAX_UPLOAD_FILEPART_SIZE = 524288;\n\n// Group calls\nexport const GROUP_CALL_VOLUME_MULTIPLIER = 100;\nexport const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;\nexport const GROUP_CALL_THUMB_VIDEO_DISABLED = true;\n\nexport const DEFAULT_LIMITS: Record<ApiLimitType, readonly [number, number]> = {\n  uploadMaxFileparts: [4000, 8000],\n  stickersFaved: [5, 10],\n  savedGifs: [200, 400],\n  dialogFiltersChats: [100, 200],\n  dialogFilters: [10, 20],\n  dialogFolderPinned: [5, 10],\n  captionLength: [1024, 2048],\n  channels: [500, 1000],\n  channelsPublic: [10, 20],\n  aboutLength: [70, 140],\n  chatlistInvites: [3, 100],\n  chatlistJoined: [2, 20],\n  recommendedChannels: [10, 100],\n  savedDialogsPinned: [5, 100],\n};\n\nexport const ONE_TIME_MEDIA_TTL_SECONDS = 2147483647;\n\n// Premium\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'stories',\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n  'saved_tags',\n  'last_seen',\n  'message_privacy',\n] as const;\n\nexport const PREMIUM_BOTTOM_VIDEOS: ApiPremiumSection[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n  'saved_tags',\n  'last_seen',\n  'message_privacy',\n];\n\nexport const PREMIUM_LIMITS_ORDER: ApiLimitTypeForPromo[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n  'recommendedChannels',\n];\n","/* eslint-disable no-console */\n\nexport const DEBUG_LEVELS = ['log', 'error', 'warn', 'info', 'debug'] as const;\nexport type DebugLevel = typeof DEBUG_LEVELS[number];\n// @ts-ignore\nconst ORIGINAL_FUNCTIONS: Record<DebugLevel, (...args: any[]) => void> = DEBUG_LEVELS.reduce((acc, level) => {\n  // @ts-ignore\n  acc[level] = console[level];\n  return acc;\n}, {});\n\ntype DebugEntry = {\n  level: DebugLevel;\n  args: any[];\n  date: Date;\n};\nlet DEBUG_LOGS: DebugEntry[] = [];\n\nexport function logDebugMessage(level: DebugLevel, ...args: any[]) {\n  DEBUG_LOGS.push({\n    level,\n    args,\n    date: new Date(),\n  });\n  ORIGINAL_FUNCTIONS[level](...args);\n}\n\nexport function initDebugConsole() {\n  DEBUG_LOGS = [];\n  DEBUG_LEVELS.forEach((level) => {\n    // @ts-ignore\n    console[level] = (...args: any[]) => {\n      logDebugMessage(level, ...args);\n    };\n  });\n}\n\nexport function disableDebugConsole() {\n  DEBUG_LEVELS.forEach((level) => {\n    // @ts-ignore\n    console[level] = ORIGINAL_FUNCTIONS[level];\n  });\n  DEBUG_LOGS = [];\n}\n\nexport function getDebugLogs() {\n  return JSON.stringify(DEBUG_LOGS, (key, value) => (typeof value === 'bigint'\n    ? value.toString()\n    : value));\n}\n","export type Scheduler = typeof requestAnimationFrame | typeof onTickEnd;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onIdle(cb: NoneToVoidFunction, timeout?: number) {\n  // eslint-disable-next-line no-restricted-globals\n  if (self.requestIdleCallback) {\n    // eslint-disable-next-line no-restricted-globals\n    self.requestIdleCallback(cb, { timeout });\n  } else {\n    onTickEnd(cb);\n  }\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nconst FAST_RAF_TIMEOUT_FALLBACK_MS = 35; // < 30 FPS\n\nlet fastRafCallbacks: Set<NoneToVoidFunction> | undefined;\nlet fastRafFallbackCallbacks: Set<NoneToVoidFunction> | undefined;\nlet fastRafFallbackTimeout: number | undefined;\n\n// May result in an immediate execution if called from another RAF callback which was scheduled\n// (and therefore is executed) earlier than RAF callback scheduled by `fastRaf`\nexport function fastRaf(callback: NoneToVoidFunction, withTimeoutFallback = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = new Set([callback]);\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n\n      fastRafCallbacks = undefined;\n      fastRafFallbackCallbacks = undefined;\n\n      if (fastRafFallbackTimeout) {\n        clearTimeout(fastRafFallbackTimeout);\n        fastRafFallbackTimeout = undefined;\n      }\n\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    fastRafCallbacks.add(callback);\n  }\n\n  if (withTimeoutFallback) {\n    if (!fastRafFallbackCallbacks) {\n      fastRafFallbackCallbacks = new Set([callback]);\n    } else {\n      fastRafFallbackCallbacks.add(callback);\n    }\n\n    if (!fastRafFallbackTimeout) {\n      fastRafFallbackTimeout = window.setTimeout(() => {\n        const currentTimeoutCallbacks = fastRafFallbackCallbacks!;\n\n        if (fastRafCallbacks) {\n          currentTimeoutCallbacks.forEach(fastRafCallbacks.delete, fastRafCallbacks);\n        }\n        fastRafFallbackCallbacks = undefined;\n\n        if (fastRafFallbackTimeout) {\n          clearTimeout(fastRafFallbackTimeout);\n          fastRafFallbackTimeout = undefined;\n        }\n\n        currentTimeoutCallbacks.forEach((cb) => cb());\n      }, FAST_RAF_TIMEOUT_FALLBACK_MS);\n    }\n  }\n}\n\nlet onTickEndCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onTickEnd(callback: NoneToVoidFunction) {\n  if (!onTickEndCallbacks) {\n    onTickEndCallbacks = [callback];\n\n    Promise.resolve().then(() => {\n      const currentCallbacks = onTickEndCallbacks!;\n      onTickEndCallbacks = undefined;\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    onTickEndCallbacks.push(callback);\n  }\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiEmojiStatus, ApiPeerColor } from '../../types';\n\nexport function isPeerUser(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerUser {\n  return peer.hasOwnProperty('userId');\n}\n\nexport function isPeerChat(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChat {\n  return peer.hasOwnProperty('chatId');\n}\n\nexport function isPeerChannel(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChannel {\n  return peer.hasOwnProperty('channelId');\n}\n\nexport function buildApiPeerId(id: BigInt.BigInteger, type: 'user' | 'chat' | 'channel') {\n  if (type === 'user') {\n    return id.toString();\n  }\n\n  if (type === 'channel') {\n    return `-100${id}`;\n  }\n\n  return `-${id}`;\n}\n\nexport function getApiChatIdFromMtpPeer(peer: GramJs.TypePeer | GramJs.TypeInputPeer) {\n  if (isPeerUser(peer)) {\n    return buildApiPeerId(peer.userId, 'user');\n  } else if (isPeerChat(peer)) {\n    return buildApiPeerId(peer.chatId, 'chat');\n  } else {\n    return buildApiPeerId((peer as GramJs.InputPeerChannel).channelId, 'channel');\n  }\n}\n\nexport function buildApiPeerColor(peerColor: GramJs.TypePeerColor): ApiPeerColor {\n  const { color, backgroundEmojiId } = peerColor;\n  return {\n    color,\n    backgroundEmojiId: backgroundEmojiId?.toString(),\n  };\n}\n\nexport function buildApiEmojiStatus(mtpEmojiStatus: GramJs.TypeEmojiStatus): ApiEmojiStatus | undefined {\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatus) {\n    return { documentId: mtpEmojiStatus.documentId.toString() };\n  }\n\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatusUntil) {\n    return { documentId: mtpEmojiStatus.documentId.toString(), until: mtpEmojiStatus.until };\n  }\n\n  return undefined;\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import { Api as GramJs } from '../../lib/gramjs';\n\nimport type { StoryRepairInfo } from './localDb';\n\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\nimport localDb from './localDb';\n\nconst LOG_BACKGROUND = '#111111DD';\nconst LOG_PREFIX_COLOR = '#E4D00A';\nconst LOG_SUFFIX = {\n  INVOKE: '#49DBF5',\n  BEACON: '#F549DB',\n  RESPONSE: '#6887F7',\n  CONNECTING: '#E4D00A',\n  CONNECTED: '#26D907',\n  'CONNECTING ERROR': '#D1191C',\n  'INVOKE ERROR': '#D1191C',\n  UPDATE: '#0DD151',\n  'UNEXPECTED UPDATE': '#9C9C9C',\n  'UNEXPECTED RESPONSE': '#D1191C',\n};\n\nexport function resolveMessageApiChatId(mtpMessage: GramJs.TypeMessage) {\n  if (!(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return getApiChatIdFromMtpPeer(mtpMessage.peerId);\n}\n\nexport function isChatFolder(\n  filter?: GramJs.TypeDialogFilter,\n): filter is GramJs.DialogFilter | GramJs.DialogFilterChatlist {\n  return filter instanceof GramJs.DialogFilter || filter instanceof GramJs.DialogFilterChatlist;\n}\n\nexport function addMessageToLocalDb(message: GramJs.Message | GramJs.MessageService) {\n  const messageFullId = `${resolveMessageApiChatId(message)}-${message.id}`;\n\n  let mockMessage = message;\n  if (message instanceof GramJs.Message\n    && message.media instanceof GramJs.MessageMediaInvoice\n    && message.media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    mockMessage = new GramJs.Message({\n      ...message,\n      media: message.media.extendedMedia.media,\n    });\n  }\n\n  localDb.messages[messageFullId] = mockMessage;\n\n  if (mockMessage instanceof GramJs.Message) {\n    if (mockMessage.media) addMediaToLocalDb(mockMessage.media);\n\n    if (mockMessage.replyTo instanceof GramJs.MessageReplyHeader && mockMessage.replyTo.replyMedia) {\n      addMediaToLocalDb(mockMessage.replyTo.replyMedia);\n    }\n  }\n\n  if (mockMessage instanceof GramJs.MessageService && 'photo' in mockMessage.action) {\n    addPhotoToLocalDb(mockMessage.action.photo);\n  }\n}\n\nfunction addMediaToLocalDb(media: GramJs.TypeMessageMedia) {\n  if (media instanceof GramJs.MessageMediaDocument\n    && media.document instanceof GramJs.Document\n  ) {\n    localDb.documents[String(media.document.id)] = media.document;\n  }\n\n  if (media instanceof GramJs.MessageMediaWebPage\n    && media.webpage instanceof GramJs.WebPage\n    && media.webpage.document instanceof GramJs.Document\n  ) {\n    localDb.documents[String(media.webpage.document.id)] = media.webpage.document;\n  }\n\n  if (media instanceof GramJs.MessageMediaGame) {\n    if (media.game.document instanceof GramJs.Document) {\n      localDb.documents[String(media.game.document.id)] = media.game.document;\n    }\n    addPhotoToLocalDb(media.game.photo);\n  }\n\n  if (media instanceof GramJs.MessageMediaInvoice\n    && media.photo) {\n    localDb.webDocuments[String(media.photo.url)] = media.photo;\n  }\n}\n\nexport function addStoryToLocalDb(story: GramJs.TypeStoryItem, peerId: string) {\n  if (!(story instanceof GramJs.StoryItem)) {\n    return;\n  }\n\n  const storyData = {\n    id: story.id,\n    peerId,\n  };\n\n  if (story.media instanceof GramJs.MessageMediaPhoto) {\n    const photo = story.media.photo as GramJs.Photo & StoryRepairInfo;\n    photo.storyData = storyData;\n    addPhotoToLocalDb(photo);\n  }\n  if (story.media instanceof GramJs.MessageMediaDocument) {\n    if (story.media.document instanceof GramJs.Document) {\n      const doc = story.media.document as GramJs.Document & StoryRepairInfo;\n      doc.storyData = storyData;\n      localDb.documents[String(story.media.document.id)] = doc;\n    }\n\n    if (story.media.altDocument instanceof GramJs.Document) {\n      const doc = story.media.altDocument as GramJs.Document & StoryRepairInfo;\n      doc.storyData = storyData;\n      localDb.documents[String(story.media.altDocument.id)] = doc;\n    }\n  }\n}\n\nexport function addPhotoToLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.Photo) {\n    localDb.photos[String(photo.id)] = photo;\n  }\n}\n\nexport function addChatToLocalDb(chat: GramJs.Chat | GramJs.Channel) {\n  const id = buildApiPeerId(chat.id, chat instanceof GramJs.Chat ? 'chat' : 'channel');\n  const storedChat = localDb.chats[id];\n\n  const isStoredMin = storedChat && 'min' in storedChat && storedChat.min;\n  const isChatMin = 'min' in chat && chat.min;\n  if (storedChat && !isStoredMin && isChatMin) return;\n\n  localDb.chats[id] = chat;\n}\n\nexport function addUserToLocalDb(user: GramJs.User) {\n  const id = buildApiPeerId(user.id, 'user');\n  const storedUser = localDb.users[id];\n  if (storedUser && !storedUser.min && user.min) return;\n\n  localDb.users[id] = user;\n}\n\nexport function addEntitiesToLocalDb(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities.forEach((entity) => {\n    if (entity instanceof GramJs.User) {\n      addUserToLocalDb(entity);\n    } else if ((entity instanceof GramJs.Chat || entity instanceof GramJs.Channel)) {\n      addChatToLocalDb(entity);\n    }\n  });\n}\n\nexport function swapLocalInvoiceMedia(\n  chatId: string, messageId: number, extendedMedia: GramJs.TypeMessageExtendedMedia,\n) {\n  const localMessage = localDb.messages[`${chatId}-${messageId}`];\n  if (!(localMessage instanceof GramJs.Message) || !localMessage.media) return;\n\n  if (extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n    if (!(localMessage.media instanceof GramJs.MessageMediaInvoice)) {\n      return;\n    }\n    localMessage.media.extendedMedia = extendedMedia;\n  }\n\n  if (extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    localMessage.media = extendedMedia.media;\n  }\n}\n\nexport function serializeBytes(value: Buffer) {\n  return String.fromCharCode(...value);\n}\n\nexport function deserializeBytes(value: string) {\n  return Buffer.from(value, 'binary');\n}\n\nexport function log(suffix: keyof typeof LOG_SUFFIX, ...data: any) {\n  /* eslint-disable max-len */\n  /* eslint-disable no-console */\n  const func = suffix === 'UNEXPECTED RESPONSE' ? console.error\n    : suffix === 'INVOKE ERROR' || suffix === 'UNEXPECTED UPDATE' ? console.warn : console.log;\n  /* eslint-enable no-console */\n  func(\n    `%cGramJS%c${suffix}`,\n    `color: ${LOG_PREFIX_COLOR}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem;`,\n    `color: ${LOG_SUFFIX[suffix]}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem; margin-left: 0.25rem;`,\n    ...data,\n  );\n  /* eslint-enable max-len */\n}\n\nexport function isResponseUpdate<T extends GramJs.AnyRequest>(result: T['__response']): result is GramJs.TypeUpdate {\n  return result instanceof GramJs.UpdatesTooLong || result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates\n    || result instanceof GramJs.UpdateShortSentMessage;\n}\n","type CollectionByKey<Member> = Record<number | string, Member>;\n\ntype OrderDirection =\n  'asc'\n  | 'desc';\n\ninterface OrderCallback<T> {\n  (member: T): any;\n}\n\nexport function buildCollectionByKey<T extends AnyLiteral>(collection: T[], key: keyof T) {\n  return collection.reduce((byKey: CollectionByKey<T>, member: T) => {\n    byKey[member[key]] = member;\n\n    return byKey;\n  }, {});\n}\n\nexport function buildCollectionByCallback<T extends AnyLiteral, K extends number | string, R extends unknown>(\n  collection: T[],\n  callback: (member: T) => [K, R],\n) {\n  return collection.reduce((byKey: Record<K, R>, member: T) => {\n    const [key, value] = callback(member);\n    byKey[key] = value;\n\n    return byKey;\n  }, {} as Record<K, R>);\n}\n\nexport function mapValues<R extends any, M extends any>(\n  byKey: CollectionByKey<M>,\n  callback: (member: M, key: string, index: number, originalByKey: CollectionByKey<M>) => R,\n): CollectionByKey<R> {\n  return Object.keys(byKey).reduce((newByKey: CollectionByKey<R>, key, index) => {\n    newByKey[key] = callback(byKey[key], key, index, byKey);\n    return newByKey;\n  }, {});\n}\n\nexport function pick<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    result[key] = object[key];\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function pickTruthy<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    if (object[key]) {\n      result[key] = object[key];\n    }\n\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function omit<T extends object, K extends keyof T>(object: T, keys: K[]): Omit<T, K> {\n  const stringKeys = new Set(keys.map(String));\n  const savedKeys = Object.keys(object)\n    .filter((key) => !stringKeys.has(key)) as Array<Exclude<keyof T, K>>;\n\n  return pick(object, savedKeys);\n}\n\nexport function omitUndefined<T extends object>(object: T): T {\n  return Object.keys(object).reduce((result, stringKey) => {\n    const key = stringKey as keyof T;\n    if (object[key] !== undefined) {\n      result[key as keyof T] = object[key];\n    }\n    return result;\n  }, {} as T);\n}\n\nexport function orderBy<T>(\n  collection: T[],\n  orderRule: (keyof T) | OrderCallback<T> | ((keyof T) | OrderCallback<T>)[],\n  mode: OrderDirection | [OrderDirection, OrderDirection] = 'asc',\n): T[] {\n  function compareValues(a: T, b: T, currentOrderRule: (keyof T) | OrderCallback<T>, isAsc: boolean) {\n    const aValue = (typeof currentOrderRule === 'function' ? currentOrderRule(a) : a[currentOrderRule]) || 0;\n    const bValue = (typeof currentOrderRule === 'function' ? currentOrderRule(b) : b[currentOrderRule]) || 0;\n\n    return isAsc ? aValue - bValue : bValue - aValue;\n  }\n\n  if (Array.isArray(orderRule)) {\n    const [mode1, mode2] = Array.isArray(mode) ? mode : [mode, mode];\n    const [orderRule1, orderRule2] = orderRule;\n    const isAsc1 = mode1 === 'asc';\n    const isAsc2 = mode2 === 'asc';\n\n    return collection.sort((a, b) => {\n      return compareValues(a, b, orderRule1, isAsc1) || compareValues(a, b, orderRule2, isAsc2);\n    });\n  }\n\n  const isAsc = mode === 'asc';\n  return collection.sort((a, b) => {\n    return compareValues(a, b, orderRule, isAsc);\n  });\n}\n\nexport function unique<T extends any>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n\nexport function uniqueByField<T extends any>(array: T[], field: keyof T): T[] {\n  return [...new Map(array.map((item) => [item[field], item])).values()];\n}\n\nexport function compact<T extends any>(array: T[]) {\n  return array.filter(Boolean);\n}\n\nexport function areSortedArraysEqual(array1: any[], array2: any[]) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((item, i) => item === array2[i]);\n}\n\nexport function areSortedArraysIntersecting(array1: any[], array2: any[]) {\n  return array1[0] <= array2[array2.length - 1] && array1[array1.length - 1] >= array2[0];\n}\n\nexport function findIntersectionWithSet<T>(array: T[], set: Set<T>): T[] {\n  return array.filter((a) => set.has(a));\n}\n/**\n * Exlude elements from base array. Both arrays should be sorted in same order\n * @param base\n * @param toExclude\n * @returns New array without excluded elements\n */\nexport function excludeSortedArray<T extends any>(base: T[], toExclude: T[]) {\n  if (!base?.length) return base;\n\n  const result: T[] = [];\n\n  let excludeIndex = 0;\n\n  for (let i = 0; i < base.length; i++) {\n    if (toExclude[excludeIndex] === base[i]) {\n      excludeIndex += 1;\n    } else {\n      result.push(base[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function split<T extends any>(array: T[], chunkSize: number) {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n\nexport function partition<T extends unknown>(\n  array: T[], filter: (value: T, index: number, array: T[]) => boolean,\n): [T[], T[]] {\n  const pass: T[] = [];\n  const fail: T[] = [];\n\n  array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));\n\n  return [pass, fail];\n}\n\nexport function cloneDeep<T>(value: T): T {\n  if (!isObject(value)) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(cloneDeep) as typeof value;\n  }\n\n  return Object.keys(value).reduce((acc, key) => {\n    acc[key as keyof T] = cloneDeep(value[key as keyof T]);\n    return acc;\n  }, {} as T);\n}\n\nfunction isObject(value: any): value is object {\n  // eslint-disable-next-line no-null/no-null\n  return typeof value === 'object' && value !== null;\n}\n\nexport function findLast<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): T | undefined {\n  let cursor = array.length;\n\n  while (cursor--) {\n    if (predicate(array[cursor], cursor, array)) {\n      return array[cursor];\n    }\n  }\n\n  return undefined;\n}\n\nexport function compareFields<T>(a: T, b: T) {\n  return Number(b) - Number(a);\n}\n","let serverTimeOffset = 0;\n\nexport function setServerTimeOffset(_serverTimeOffset: number) {\n  serverTimeOffset = _serverTimeOffset;\n}\n\nexport function getServerTimeOffset() {\n  return serverTimeOffset;\n}\n\nexport function getServerTime() {\n  return Math.floor(Date.now() / 1000) + serverTimeOffset;\n}\n","/* eslint-disable no-bitwise */\n\n// eslint-disable-next-line max-len\nconst TEMPLATE = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 {{width}} {{height}}\" xml:space=\"preserve\"><path fill-opacity=\"0.1\" d=\"{{path}}\" /></svg>';\nconst LOOKUP = 'AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,';\n\nexport function pathBytesToSvg(bytes: Buffer, width: number, height: number) {\n  return TEMPLATE\n    .replace('{{path}}', buildPath(bytes))\n    .replace('{{width}}', String(width))\n    .replace('{{height}}', String(height));\n}\n\nfunction buildPath(bytes: Buffer) {\n  let path = 'M';\n\n  const len = bytes.length;\n  for (let i = 0; i < len; i++) {\n    const num = bytes[i];\n    if (num >= 128 + 64) {\n      path += LOOKUP[num - 128 - 64];\n    } else {\n      if (num >= 128) {\n        path += ',';\n      } else if (num >= 64) {\n        path += '-';\n      }\n      path += String(num & 63);\n    }\n  }\n\n  path += 'z';\n\n  return path;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport { strippedPhotoToJpg } from '../../../lib/gramjs/Utils';\n\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../../types';\nimport type {\n  ApiFormattedText,\n  ApiMessageEntity,\n  ApiMessageEntityDefault,\n  ApiPhoto,\n  ApiPhotoSize,\n  ApiThumbnail,\n  ApiUsername,\n  ApiVideoSize,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport { compact } from '../../../util/iteratees';\nimport localDb from '../localDb';\nimport { bytesToDataUri } from './helpers';\nimport { pathBytesToSvg } from './pathBytesToSvg';\nimport { buildApiPeerId } from './peers';\n\nconst DEFAULT_THUMB_SIZE = { w: 100, h: 100 };\n\nexport function buildApiThumbnailFromStripped(\n  sizes?: GramJs.TypePhotoSize[], mimeType?: string,\n): ApiThumbnail | undefined {\n  if (!sizes || !sizes.length) {\n    return undefined;\n  }\n\n  const thumb = sizes.find((s: any): s is GramJs.PhotoStrippedSize => s instanceof GramJs.PhotoStrippedSize);\n  if (!thumb) {\n    return undefined;\n  }\n\n  const realSizes = sizes.filter((s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  const { w, h } = realSizes.length ? realSizes[realSizes.length - 1] : DEFAULT_THUMB_SIZE;\n  const { bytes } = thumb;\n  const dataUri = bytesToDataUri(\n    !mimeType || mimeType === 'image/jpeg' ? strippedPhotoToJpg(bytes) : bytes,\n    undefined,\n    mimeType,\n  );\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromCached(photoSize: GramJs.PhotoCachedSize): ApiThumbnail | undefined {\n  const { w, h, bytes } = photoSize;\n  const dataUri = bytesToDataUri(bytes, undefined, 'image/webp');\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromPath(\n  photoSize: GramJs.PhotoPathSize,\n  sizeAttribute: GramJs.DocumentAttributeImageSize | GramJs.DocumentAttributeVideo,\n): ApiThumbnail | undefined {\n  const { w, h } = sizeAttribute;\n  const dataUri = `data:image/svg+xml;utf8,${pathBytesToSvg(photoSize.bytes, w, h)}`;\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiPhoto(photo: GramJs.Photo, isSpoiler?: boolean): ApiPhoto {\n  const sizes = photo.sizes\n    .filter((s: any): s is GramJs.PhotoSize => {\n      return s instanceof GramJs.PhotoSize || s instanceof GramJs.PhotoSizeProgressive;\n    })\n    .map(buildApiPhotoSize);\n\n  return {\n    id: String(photo.id),\n    thumbnail: buildApiThumbnailFromStripped(photo.sizes),\n    sizes,\n    isSpoiler,\n    ...(photo.videoSizes && { videoSizes: compact(photo.videoSizes.map(buildApiVideoSize)), isVideo: true }),\n  };\n}\n\nexport function buildApiVideoSize(videoSize: GramJs.TypeVideoSize): ApiVideoSize | undefined {\n  if (!(videoSize instanceof GramJs.VideoSize)) return undefined;\n\n  const {\n    videoStartTs, size, h, w, type,\n  } = videoSize;\n\n  return {\n    videoStartTs,\n    size,\n    height: h,\n    width: w,\n    type: type as ('u' | 'v'),\n  };\n}\n\nexport function buildApiPhotoSize(photoSize: GramJs.PhotoSize): ApiPhotoSize {\n  const { w, h, type } = photoSize;\n\n  return {\n    width: w,\n    height: h,\n    type: type as ('m' | 'x' | 'y'),\n  };\n}\n\nexport function buildApiUsernames(mtpPeer: GramJs.User | GramJs.Channel | GramJs.UpdateUserName) {\n  if (!mtpPeer.usernames && !('username' in mtpPeer && mtpPeer.username)) {\n    return undefined;\n  }\n\n  const usernames: ApiUsername[] = [];\n\n  if ('username' in mtpPeer && mtpPeer.username) {\n    usernames.push({\n      username: mtpPeer.username,\n      isActive: true,\n      isEditable: true,\n    });\n  }\n\n  if (mtpPeer.usernames) {\n    mtpPeer.usernames.forEach(({ username, active, editable }) => {\n      usernames.push({\n        username,\n        ...(active && { isActive: true }),\n        ...(editable && { isEditable: true }),\n      });\n    });\n  }\n\n  return usernames;\n}\n\nexport function buildPrivacyRules(rules: GramJs.TypePrivacyRule[]): ApiPrivacySettings {\n  let visibility: PrivacyVisibility | undefined;\n  let isUnspecified: boolean | undefined;\n  let allowUserIds: string[] | undefined;\n  let allowChatIds: string[] | undefined;\n  let blockUserIds: string[] | undefined;\n  let blockChatIds: string[] | undefined;\n\n  const localChats = localDb.chats;\n\n  rules.forEach((rule) => {\n    if (rule instanceof GramJs.PrivacyValueAllowAll) {\n      visibility ||= 'everybody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowContacts) {\n      visibility ||= 'contacts';\n    } else if (rule instanceof GramJs.PrivacyValueAllowCloseFriends) {\n      visibility ||= 'closeFriends';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowContacts) {\n      visibility ||= 'nonContacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowAll) {\n      visibility ||= 'nobody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowUsers) {\n      allowUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowUsers) {\n      blockUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueAllowChatParticipants) {\n      // Server allows channel ids here, so we need to check\n      allowChatIds = rule.chats.map((chatId) => {\n        const dialogId = buildApiPeerId(chatId, 'chat');\n        const channelId = buildApiPeerId(chatId, 'channel');\n        if (localChats[dialogId]) return dialogId;\n        return channelId;\n      });\n    } else if (rule instanceof GramJs.PrivacyValueDisallowChatParticipants) {\n      blockChatIds = rule.chats.map((chatId) => {\n        const dialogId = buildApiPeerId(chatId, 'chat');\n        const channelId = buildApiPeerId(chatId, 'channel');\n        if (localChats[dialogId]) return dialogId;\n        return channelId;\n      });\n    }\n  });\n\n  if (!visibility) {\n    // Disallow by default\n    visibility = 'nobody';\n    isUnspecified = true;\n  }\n\n  return {\n    visibility,\n    isUnspecified,\n    allowUserIds: allowUserIds || [],\n    allowChatIds: allowChatIds || [],\n    blockUserIds: blockUserIds || [],\n    blockChatIds: blockChatIds || [],\n  };\n}\n\nexport function buildApiFormattedText(textWithEntities: GramJs.TextWithEntities): ApiFormattedText {\n  const { text, entities } = textWithEntities;\n\n  return {\n    text,\n    entities: entities.map(buildApiMessageEntity),\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const {\n    className: type, offset, length,\n  } = entity;\n\n  if (entity instanceof GramJs.MessageEntityMentionName) {\n    return {\n      type: ApiMessageEntityTypes.MentionName,\n      offset,\n      length,\n      userId: buildApiPeerId(entity.userId, 'user'),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityTextUrl) {\n    return {\n      type: ApiMessageEntityTypes.TextUrl,\n      offset,\n      length,\n      url: entity.url,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityPre) {\n    return {\n      type: ApiMessageEntityTypes.Pre,\n      offset,\n      length,\n      language: entity.language,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityCustomEmoji) {\n    return {\n      type: ApiMessageEntityTypes.CustomEmoji,\n      offset,\n      length,\n      documentId: entity.documentId.toString(),\n    };\n  }\n\n  return {\n    type: type as `${ApiMessageEntityDefault['type']}`,\n    offset,\n    length,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiEmojiInteraction, ApiSticker, ApiStickerSet, ApiStickerSetInfo, GramJsEmojiInteraction,\n} from '../../types';\n\nimport { LOTTIE_STICKER_MIME_TYPE, VIDEO_STICKER_MIME_TYPE } from '../../../config';\nimport { compact } from '../../../util/iteratees';\nimport localDb from '../localDb';\nimport { buildApiThumbnailFromCached, buildApiThumbnailFromPath } from './common';\n\nexport function buildStickerFromDocument(document: GramJs.TypeDocument, isNoPremium?: boolean): ApiSticker | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const { mimeType, videoThumbs } = document;\n  const stickerAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeSticker => (\n      attr instanceof GramJs.DocumentAttributeSticker\n    ));\n  const customEmojiAttribute = document.attributes\n    .find((attr): attr is GramJs.DocumentAttributeCustomEmoji => attr instanceof GramJs.DocumentAttributeCustomEmoji);\n\n  const fileAttribute = (mimeType === LOTTIE_STICKER_MIME_TYPE || mimeType === VIDEO_STICKER_MIME_TYPE)\n    && document.attributes\n      .find((attr: any): attr is GramJs.DocumentAttributeFilename => (\n        attr instanceof GramJs.DocumentAttributeFilename\n      ));\n\n  if (!(stickerAttribute || customEmojiAttribute) && !fileAttribute) {\n    return undefined;\n  }\n\n  const isLottie = mimeType === LOTTIE_STICKER_MIME_TYPE;\n  const isVideo = mimeType === VIDEO_STICKER_MIME_TYPE;\n  const isCustomEmoji = Boolean(customEmojiAttribute);\n  const shouldUseTextColor = isCustomEmoji && customEmojiAttribute.textColor;\n\n  const imageSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeImageSize => (\n      attr instanceof GramJs.DocumentAttributeImageSize\n    ));\n\n  const videoSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeVideo => (\n      attr instanceof GramJs.DocumentAttributeVideo\n    ));\n\n  const sizeAttribute = imageSizeAttribute || videoSizeAttribute;\n\n  const stickerOrEmojiAttribute = (stickerAttribute || customEmojiAttribute)!;\n  const stickerSetInfo = buildApiStickerSetInfo(stickerOrEmojiAttribute?.stickerset);\n  const emoji = stickerOrEmojiAttribute?.alt;\n  const isFree = Boolean(customEmojiAttribute?.free ?? true);\n\n  const cachedThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoCachedSize => s instanceof GramJs.PhotoCachedSize,\n  );\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_STICKER_MIME_TYPE && !(self as any).isWebmSupported && !cachedThumb) {\n    const staticThumb = document.thumbs && document.thumbs.find(\n      (s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize,\n    );\n\n    if (!staticThumb) {\n      return undefined;\n    }\n  }\n\n  const pathThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize,\n  );\n\n  const thumbnail = cachedThumb ? (\n    buildApiThumbnailFromCached(cachedThumb)\n  ) : pathThumb && sizeAttribute ? (\n    buildApiThumbnailFromPath(pathThumb, sizeAttribute)\n  ) : undefined;\n\n  const { w: width, h: height } = cachedThumb as GramJs.PhotoCachedSize || sizeAttribute || {};\n\n  const hasEffect = !isNoPremium && videoThumbs && compact(videoThumbs\n    ?.filter((thumb) => thumb instanceof GramJs.VideoSize) as GramJs.VideoSize[])\n    .some(({ type }) => type === 'f');\n\n  return {\n    id: String(document.id),\n    stickerSetInfo,\n    emoji,\n    isCustomEmoji,\n    isLottie,\n    isVideo,\n    width,\n    height,\n    thumbnail,\n    hasEffect,\n    isFree,\n    shouldUseTextColor,\n  };\n}\n\nexport function buildStickerSet(set: GramJs.StickerSet): ApiStickerSet {\n  const {\n    archived,\n    animated,\n    installedDate,\n    videos,\n    id,\n    accessHash,\n    title,\n    thumbs,\n    count,\n    shortName,\n    emojis,\n    thumbDocumentId,\n  } = set;\n\n  return {\n    isArchived: archived,\n    isLottie: animated,\n    isVideos: videos,\n    isEmoji: emojis,\n    installedDate,\n    id: String(id),\n    accessHash: String(accessHash),\n    title,\n    hasThumbnail: Boolean(thumbs?.length || thumbDocumentId),\n    thumbCustomEmojiId: thumbDocumentId?.toString(),\n    count,\n    shortName,\n  };\n}\n\nfunction buildApiStickerSetInfo(inputSet?: GramJs.TypeInputStickerSet): ApiStickerSetInfo {\n  if (inputSet instanceof GramJs.InputStickerSetID) {\n    return {\n      id: String(inputSet.id),\n      accessHash: String(inputSet.accessHash),\n    };\n  }\n  if (inputSet instanceof GramJs.InputStickerSetShortName) {\n    return {\n      shortName: inputSet.shortName,\n    };\n  }\n\n  return {\n    isMissing: true,\n  };\n}\n\nexport function buildStickerSetCovered(coveredStickerSet: GramJs.TypeStickerSetCovered): ApiStickerSet {\n  const stickerSet = buildStickerSet(coveredStickerSet.set);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetNoCovered) {\n    return stickerSet;\n  }\n\n  const stickerSetCovers = (coveredStickerSet instanceof GramJs.StickerSetCovered) ? [coveredStickerSet.cover]\n    : (coveredStickerSet instanceof GramJs.StickerSetMultiCovered) ? coveredStickerSet.covers\n      : coveredStickerSet.documents;\n\n  const stickers = processStickerResult(stickerSetCovers);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetFullCovered) {\n    return {\n      ...stickerSet,\n      stickers,\n      packs: processStickerPackResult(coveredStickerSet.packs),\n    };\n  }\n\n  return {\n    ...stickerSet,\n    covers: stickers,\n  };\n}\n\nexport function buildApiEmojiInteraction(json: GramJsEmojiInteraction): ApiEmojiInteraction {\n  return {\n    timestamps: json.a.map(({ t }) => t),\n  };\n}\n\nexport function processStickerPackResult(packs: GramJs.StickerPack[]) {\n  return packs.reduce((acc, { emoticon, documents }) => {\n    acc[emoticon] = documents.map((documentId) => buildStickerFromDocument(\n      localDb.documents[String(documentId)],\n    )).filter(Boolean);\n    return acc;\n  }, {} as Record<string, ApiSticker[]>);\n}\n\nexport function processStickerResult(stickers: GramJs.TypeDocument[]) {\n  return stickers\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const sticker = buildStickerFromDocument(document);\n        if (sticker) {\n          localDb.documents[String(document.id)] = document;\n\n          return sticker;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAudio,\n  ApiContact,\n  ApiDocument,\n  ApiFormattedText,\n  ApiGame,\n  ApiGiveaway,\n  ApiGiveawayResults,\n  ApiInvoice,\n  ApiLocation,\n  ApiMessageExtendedMediaPreview,\n  ApiMessageStoryData,\n  ApiPhoto,\n  ApiPoll,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiWebDocument,\n  ApiWebPage,\n  ApiWebPageStoryData,\n  MediaContent,\n} from '../../types';\nimport type { UniversalMessage } from './messages';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES, VIDEO_WEBM_TYPE } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { addStoryToLocalDb, serializeBytes } from '../helpers';\nimport {\n  buildApiMessageEntity,\n  buildApiPhoto,\n  buildApiPhotoSize,\n  buildApiThumbnailFromPath,\n  buildApiThumbnailFromStripped,\n} from './common';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildStickerFromDocument } from './symbols';\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: MediaContent = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n    && !content.sticker && !content.poll && !content.contact && !content.video?.isRound) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): MediaContent | undefined {\n  const ttlSeconds = 'ttlSeconds' in media ? media.ttlSeconds : undefined;\n\n  const isExpiredVoice = isExpiredVoiceMessage(media);\n  if (isExpiredVoice) {\n    return { isExpiredVoice };\n  }\n  const isExpiredRoundVideo = isExpiredRoundVideoMessage(media);\n  if (isExpiredRoundVideo) {\n    return { isExpiredRoundVideo };\n  }\n\n  const voice = buildVoice(media);\n  if (voice) return { voice, ttlSeconds };\n\n  if ('round' in media && media.round) {\n    const video = buildVideo(media);\n    if (video) return { video, ttlSeconds };\n  }\n\n  // Other disappearing media types are not supported\n  if (ttlSeconds !== undefined) {\n    return undefined;\n  }\n\n  if ('extendedMedia' in media && media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    return buildMessageMediaContent(media.extendedMedia.media);\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  const altVideo = buildAltVideo(media);\n  if (video) return { video, altVideo };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  const storyData = buildMessageStoryData(media);\n  if (storyData) return { storyData };\n\n  const giveaway = buildGiweawayFromMedia(media);\n  if (giveaway) return { giveaway };\n\n  const giveawayResults = buildGiweawayResultsFromMedia(media);\n  if (giveawayResults) return { giveawayResults };\n\n  return undefined;\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo, media.spoiler);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document, isSpoiler?: boolean): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n    nosound,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n    isSpoiler,\n    ...(nosound && { noSound: true }),\n  };\n}\n\nexport function buildAudioFromDocument(document: GramJs.Document): ApiAudio | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, size, attributes,\n  } = document;\n\n  const audioAttributes = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAudio => a instanceof GramJs.DocumentAttributeAudio);\n\n  if (!audioAttributes) {\n    return undefined;\n  }\n\n  const {\n    duration,\n    title,\n    performer,\n  } = audioAttributes;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'audio'),\n    title,\n    performer,\n    size: size.toJSNumber(),\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document, media.spoiler);\n}\n\nfunction buildAltVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.altDocument instanceof GramJs.Document)\n    || !media.altDocument.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.altDocument, media.spoiler);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction isExpiredVoiceMessage(media: GramJs.TypeMessageMedia): MediaContent['isExpiredVoice'] {\n  if (!(media instanceof GramJs.MessageMediaDocument)) {\n    return false;\n  }\n  return !media.document && media.voice;\n}\n\nfunction isExpiredRoundVideoMessage(media: GramJs.TypeMessageMedia): MediaContent['isExpiredRoundVideo'] {\n  if (!(media instanceof GramJs.MessageMediaDocument)) {\n    return false;\n  }\n  return !media.document && media.round;\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  let thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n  if (!thumbnail && thumbs && photoSize) {\n    const photoPath = thumbs.find((s: any): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize);\n    if (photoPath) {\n      thumbnail = buildApiThumbnailFromPath(photoPath, photoSize);\n    }\n  }\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nexport function buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nfunction buildGiweawayFromMedia(media: GramJs.TypeMessageMedia): ApiGiveaway | undefined {\n  if (!(media instanceof GramJs.MessageMediaGiveaway)) {\n    return undefined;\n  }\n\n  return buildGiveaway(media);\n}\n\nfunction buildGiveaway(media: GramJs.MessageMediaGiveaway): ApiGiveaway | undefined {\n  const {\n    channels, months, quantity, untilDate, countriesIso2, onlyNewSubscribers, prizeDescription,\n  } = media;\n\n  const channelIds = channels.map((channel) => buildApiPeerId(channel, 'channel'));\n\n  return {\n    channelIds,\n    months,\n    quantity,\n    untilDate,\n    countries: countriesIso2,\n    isOnlyForNewSubscribers: onlyNewSubscribers,\n    prizeDescription,\n  };\n}\n\nfunction buildGiweawayResultsFromMedia(media: GramJs.TypeMessageMedia): ApiGiveawayResults | undefined {\n  if (!(media instanceof GramJs.MessageMediaGiveawayResults)) {\n    return undefined;\n  }\n\n  return buildGiveawayResults(media);\n}\n\nfunction buildGiveawayResults(media: GramJs.MessageMediaGiveawayResults): ApiGiveawayResults | undefined {\n  const {\n    months, untilDate, onlyNewSubscribers, launchMsgId, unclaimedCount, winners, winnersCount,\n    additionalPeersCount, prizeDescription, refunded, channelId,\n  } = media;\n\n  const winnerIds = winners.map((winner) => buildApiPeerId(winner, 'user'));\n\n  return {\n    months,\n    untilDate,\n    isOnlyForNewSubscribers: onlyNewSubscribers,\n    launchMessageId: launchMsgId,\n    channelId: buildApiPeerId(channelId, 'channel'),\n    unclaimedCount,\n    additionalPeersCount,\n    isRefunded: refunded,\n    prizeDescription,\n    winnerIds,\n    winnersCount,\n  };\n}\n\nexport function buildMessageStoryData(media: GramJs.TypeMessageMedia): ApiMessageStoryData | undefined {\n  if (!(media instanceof GramJs.MessageMediaStory)) {\n    return undefined;\n  }\n\n  const peerId = getApiChatIdFromMtpPeer(media.peer);\n\n  return { id: media.id, peerId, ...(media.viaMention && { isMention: true }) };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId, extendedMedia,\n  } = media;\n\n  const preview = extendedMedia instanceof GramJs.MessageExtendedMediaPreview\n    ? buildApiMessageExtendedMediaPreview(extendedMedia) : undefined;\n\n  return {\n    title,\n    text,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n    extendedMedia: preview,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults?.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((peer) => getApiChatIdFromMtpPeer(peer)),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const {\n    id, photo, document, attributes,\n  } = media.webpage;\n\n  let video;\n  let audio;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('audio/')) {\n    audio = buildAudioFromDocument(document);\n  }\n  let story: ApiWebPageStoryData | undefined;\n  const attributeStory = attributes\n    ?.find((a: any): a is GramJs.WebPageAttributeStory => a instanceof GramJs.WebPageAttributeStory);\n  if (attributeStory) {\n    const peerId = getApiChatIdFromMtpPeer(attributeStory.peer);\n    story = {\n      id: attributeStory.id,\n      peerId,\n    };\n\n    if (attributeStory.story instanceof GramJs.StoryItem) {\n      addStoryToLocalDb(attributeStory.story, peerId);\n    }\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && !audio && document ? buildApiDocument(document) : undefined,\n    video,\n    audio,\n    story,\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildApiMessageExtendedMediaPreview(\n  preview: GramJs.MessageExtendedMediaPreview,\n): ApiMessageExtendedMediaPreview {\n  const {\n    w, h, thumb, videoDuration,\n  } = preview;\n\n  return {\n    width: w,\n    height: h,\n    duration: videoDuration,\n    thumbnail: thumb ? buildApiThumbnailFromStripped([thumb]) : undefined,\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAttachBot,\n  ApiAttachBotIcon,\n  ApiAttachMenuPeerType,\n  ApiBotApp,\n  ApiBotCommand,\n  ApiBotInfo,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotInlineSwitchPm,\n  ApiBotInlineSwitchWebview,\n  ApiBotMenuButton,\n  ApiInlineResultType,\n  ApiMessagesBotApp,\n} from '../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport localDb from '../localDb';\nimport { buildApiPhoto, buildApiThumbnailFromStripped } from './common';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiDocument, buildApiWebDocument, buildVideoFromDocument } from './messageContent';\nimport { buildApiPeerId } from './peers';\nimport { buildStickerFromDocument } from './symbols';\n\nexport function buildApiBotInlineResult(result: GramJs.BotInlineResult, queryId: string): ApiBotInlineResult {\n  const {\n    id, type, title, description, url, thumb,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    url,\n    webThumbnail: buildApiWebDocument(thumb),\n  };\n}\n\nexport function buildApiBotInlineMediaResult(\n  result: GramJs.BotInlineMediaResult, queryId: string,\n): ApiBotInlineMediaResult {\n  const {\n    id, type, title, description, photo, document,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    ...(type === 'sticker' && document instanceof GramJs.Document && { sticker: buildStickerFromDocument(document) }),\n    ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n    ...(type === 'gif' && document instanceof GramJs.Document && { gif: buildVideoFromDocument(document) }),\n    ...(type === 'video' && document instanceof GramJs.Document && {\n      thumbnail: buildApiThumbnailFromStripped(document.thumbs),\n    }),\n  };\n}\n\nexport function buildBotSwitchPm(switchPm?: GramJs.InlineBotSwitchPM) {\n  return switchPm ? pick(switchPm, ['text', 'startParam']) as ApiBotInlineSwitchPm : undefined;\n}\n\nexport function buildBotSwitchWebview(switchWebview?: GramJs.InlineBotWebView) {\n  return switchWebview ? pick(switchWebview, ['text', 'url']) as ApiBotInlineSwitchWebview : undefined;\n}\n\nexport function buildApiAttachBot(bot: GramJs.AttachMenuBot): ApiAttachBot {\n  return {\n    id: bot.botId.toString(),\n    shouldRequestWriteAccess: bot.requestWriteAccess,\n    shortName: bot.shortName,\n    isForAttachMenu: bot.showInAttachMenu!,\n    isForSideMenu: bot.showInSideMenu,\n    attachMenuPeerTypes: bot.peerTypes?.map(buildApiAttachMenuPeerType)!,\n    icons: bot.icons.map(buildApiAttachMenuIcon).filter(Boolean),\n    isInactive: bot.inactive,\n    isDisclaimerNeeded: bot.sideMenuDisclaimerNeeded,\n  };\n}\n\nfunction buildApiAttachMenuPeerType(peerType: GramJs.TypeAttachMenuPeerType): ApiAttachMenuPeerType {\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBotPM) return 'bots';\n  if (peerType instanceof GramJs.AttachMenuPeerTypePM) return 'users';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeChat) return 'chats';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBroadcast) return 'channels';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeSameBotPM) return 'self';\n  return undefined!; // Never reached\n}\n\nfunction buildApiAttachMenuIcon(icon: GramJs.AttachMenuBotIcon): ApiAttachBotIcon | undefined {\n  if (!(icon.icon instanceof GramJs.Document)) return undefined;\n\n  const document = buildApiDocument(icon.icon);\n\n  if (!document) return undefined;\n\n  localDb.documents[String(icon.icon.id)] = icon.icon;\n\n  return {\n    name: icon.name,\n    document,\n  };\n}\n\nexport function buildApiBotInfo(botInfo: GramJs.BotInfo, chatId: string): ApiBotInfo {\n  const {\n    description, descriptionPhoto, descriptionDocument, userId, commands, menuButton,\n  } = botInfo;\n\n  const botId = userId && buildApiPeerId(userId, 'user');\n  const photo = descriptionPhoto instanceof GramJs.Photo ? buildApiPhoto(descriptionPhoto) : undefined;\n  const gif = descriptionDocument instanceof GramJs.Document ? buildVideoFromDocument(descriptionDocument) : undefined;\n\n  const commandsArray = commands?.map((command) => buildApiBotCommand(botId || chatId, command));\n\n  return {\n    botId: botId || chatId,\n    description,\n    gif,\n    photo,\n    menuButton: buildApiBotMenuButton(menuButton),\n    commands: commandsArray?.length ? commandsArray : undefined,\n  };\n}\n\nfunction buildApiBotCommand(botId: string, command: GramJs.BotCommand): ApiBotCommand {\n  return {\n    botId,\n    ...omitVirtualClassFields(command),\n  };\n}\n\nexport function buildApiBotMenuButton(menuButton?: GramJs.TypeBotMenuButton): ApiBotMenuButton {\n  if (menuButton instanceof GramJs.BotMenuButton) {\n    return {\n      type: 'webApp',\n      text: menuButton.text,\n      url: menuButton.url,\n    };\n  }\n\n  return {\n    type: 'commands',\n  };\n}\n\nexport function buildApiBotApp(app: GramJs.TypeBotApp): ApiBotApp | undefined {\n  if (app instanceof GramJs.BotAppNotModified) return undefined;\n\n  const {\n    id, accessHash, title, description, shortName, photo, document,\n  } = app;\n\n  const apiPhoto = photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined;\n  const apiDocument = document instanceof GramJs.Document ? buildApiDocument(document) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    title,\n    description,\n    shortName,\n    photo: apiPhoto,\n    document: apiDocument,\n  };\n}\n\nexport function buildApiMessagesBotApp(botApp: GramJs.messages.BotApp): ApiMessagesBotApp | undefined {\n  const { app, inactive, requestWriteAccess } = botApp;\n  const baseApp = buildApiBotApp(app);\n  if (!baseApp) return undefined;\n\n  return {\n    ...baseApp,\n    isInactive: inactive,\n    shouldRequestWriteAccess: requestWriteAccess,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiCallProtocol,\n  ApiPhoneCallConnection,\n  GroupCallParticipant,\n  GroupCallParticipantVideo,\n  SsrcGroup,\n} from '../../../lib/secret-sauce';\nimport type { ApiGroupCall, ApiPhoneCall } from '../../types';\n\nimport { getApiChatIdFromMtpPeer, isPeerUser } from './peers';\n\nexport function buildApiGroupCallParticipant(participant: GramJs.GroupCallParticipant): GroupCallParticipant {\n  const {\n    self, min, about, date, versioned, canSelfUnmute, justJoined, left, muted, mutedByYou, source, volume,\n    volumeByAdmin, videoJoined, peer, video, presentation, raiseHandRating,\n  } = participant;\n\n  return {\n    isSelf: self,\n    isMin: min,\n    canSelfUnmute,\n    isLeft: left,\n    isMuted: muted,\n    isMutedByMe: mutedByYou,\n    hasJustJoined: justJoined,\n    isVolumeByAdmin: volumeByAdmin,\n    isVersioned: versioned,\n    isVideoJoined: videoJoined,\n    about,\n    source,\n    raiseHandRating: raiseHandRating?.toString(),\n    volume,\n    date: new Date(date),\n    isUser: isPeerUser(peer),\n    id: getApiChatIdFromMtpPeer(peer),\n    video: video ? buildApiGroupCallParticipantVideo(video) : undefined,\n    presentation: presentation ? buildApiGroupCallParticipantVideo(presentation) : undefined,\n  };\n}\n\nfunction buildApiGroupCallParticipantVideo(\n  participantVideo: GramJs.GroupCallParticipantVideo,\n): GroupCallParticipantVideo {\n  const {\n    audioSource, endpoint, paused, sourceGroups,\n  } = participantVideo;\n  return {\n    audioSource,\n    endpoint,\n    isPaused: paused,\n    sourceGroups: sourceGroups.map(buildApiGroupCallParticipantVideoSourceGroup),\n  };\n}\n\nfunction buildApiGroupCallParticipantVideoSourceGroup(\n  participantVideoSourceGroup: GramJs.GroupCallParticipantVideoSourceGroup,\n): SsrcGroup {\n  return {\n    semantics: participantVideoSourceGroup.semantics,\n    sources: participantVideoSourceGroup.sources,\n  };\n}\n\nexport function buildApiGroupCall(groupCall: GramJs.TypeGroupCall): ApiGroupCall {\n  const {\n    id, accessHash,\n  } = groupCall;\n\n  if (groupCall instanceof GramJs.GroupCallDiscarded) {\n    return {\n      connectionState: 'discarded',\n      id: id.toString(),\n      accessHash: accessHash.toString(),\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    };\n  }\n\n  const {\n    version, participantsCount, streamDcId, scheduleDate, canChangeJoinMuted, joinMuted, canStartVideo,\n    scheduleStartSubscribed,\n  } = groupCall;\n\n  return {\n    connectionState: 'disconnected',\n    isLoaded: true,\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    version,\n    participantsCount,\n    streamDcId,\n    scheduleDate,\n    canChangeJoinMuted,\n    joinMuted,\n    canStartVideo,\n    scheduleStartSubscribed,\n    participants: {},\n  };\n}\n\nexport function getGroupCallId(groupCall: GramJs.TypeInputGroupCall) {\n  return groupCall.id.toString();\n}\n\nexport function buildPhoneCall(call: GramJs.TypePhoneCall): ApiPhoneCall {\n  const { id } = call;\n\n  let phoneCall: ApiPhoneCall = {\n    id: id.toString(),\n  };\n\n  if (call instanceof GramJs.PhoneCallAccepted\n    || call instanceof GramJs.PhoneCallWaiting\n    || call instanceof GramJs.PhoneCall\n    || call instanceof GramJs.PhoneCallRequested) {\n    const {\n      accessHash, adminId, date, video, participantId, protocol,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      accessHash: accessHash.toString(),\n      adminId: adminId.toString(),\n      participantId: participantId.toString(),\n      date,\n      isVideo: video,\n      protocol: buildApiCallProtocol(protocol),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCall) {\n    const {\n      p2pAllowed, gAOrB, keyFingerprint, connections, startDate,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      state: 'active',\n      gAOrB: Array.from(gAOrB),\n      keyFingerprint: keyFingerprint.toString(),\n      startDate,\n      isP2pAllowed: Boolean(p2pAllowed),\n      connections: connections.map(buildApiCallConnection).filter(Boolean) as ApiPhoneCallConnection[],\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallDiscarded) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'discarded',\n      duration: call.duration,\n      reason: buildApiCallDiscardReason(call.reason),\n      needRating: call.needRating,\n      needDebug: call.needDebug,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallWaiting) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'waiting',\n      receiveDate: call.receiveDate,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallAccepted) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'accepted',\n      gB: Array.from(call.gB),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallRequested) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'requested',\n      gAHash: Array.from(call.gAHash),\n    };\n  }\n\n  return phoneCall;\n}\n\nexport function buildApiCallDiscardReason(discardReason?: GramJs.TypePhoneCallDiscardReason) {\n  if (discardReason instanceof GramJs.PhoneCallDiscardReasonMissed) {\n    return 'missed';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonBusy) {\n    return 'busy';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonHangup) {\n    return 'hangup';\n  } else {\n    return 'disconnect';\n  }\n}\n\nfunction buildApiCallConnection(connection: GramJs.TypePhoneConnection): ApiPhoneCallConnection | undefined {\n  if (connection instanceof GramJs.PhoneConnectionWebrtc) {\n    const {\n      username, password, turn, stun, ip, ipv6, port,\n    } = connection;\n\n    return {\n      username,\n      password,\n      isTurn: turn,\n      isStun: stun,\n      ip,\n      ipv6,\n      port,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function buildApiCallProtocol(protocol: GramJs.PhoneCallProtocol): ApiCallProtocol {\n  const {\n    libraryVersions, minLayer, maxLayer, udpP2p, udpReflector,\n  } = protocol;\n\n  return {\n    libraryVersions,\n    minLayer,\n    maxLayer,\n    isUdpP2p: udpP2p,\n    isUdpReflector: udpReflector,\n  };\n}\n\nexport function buildCallProtocol() {\n  return new GramJs.PhoneCallProtocol({\n    libraryVersions: ['4.0.0'],\n    minLayer: 92,\n    maxLayer: 92,\n    udpReflector: true,\n    udpP2p: true,\n  });\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAvailableReaction,\n  ApiPeerReaction,\n  ApiReaction,\n  ApiReactionCount,\n  ApiReactionEmoji,\n  ApiReactions,\n  ApiSavedReactionTag,\n} from '../../types';\n\nimport { buildApiDocument } from './messageContent';\nimport { getApiChatIdFromMtpPeer } from './peers';\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList, reactionsAsTags,\n  } = reactions;\n\n  return {\n    areTags: reactionsAsTags,\n    canSeeList,\n    results: results.map(buildReactionCount).filter(Boolean).sort(reactionCountComparator),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction).filter(Boolean),\n  };\n}\n\nfunction reactionCountComparator(a: ApiReactionCount, b: ApiReactionCount) {\n  const diff = b.count - a.count;\n  if (diff) return diff;\n  if (a.chosenOrder !== undefined && b.chosenOrder !== undefined) {\n    return a.chosenOrder - b.chosenOrder;\n  }\n  if (a.chosenOrder !== undefined) return 1;\n  if (b.chosenOrder !== undefined) return -1;\n  return 0;\n}\n\nexport function buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount | undefined {\n  const { chosenOrder, count, reaction } = reactionCount;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    chosenOrder,\n    count,\n    reaction: apiReaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiPeerReaction | undefined {\n  const {\n    peerId, reaction, big, unread, date, my,\n  } = userReaction;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    peerId: getApiChatIdFromMtpPeer(peerId),\n    reaction: apiReaction,\n    addedDate: date,\n    isUnread: unread,\n    isBig: big,\n    isOwn: my,\n  };\n}\n\nexport function buildApiReaction(reaction: GramJs.TypeReaction): ApiReaction | undefined {\n  if (reaction instanceof GramJs.ReactionEmoji) {\n    return {\n      emoticon: reaction.emoticon,\n    };\n  }\n\n  if (reaction instanceof GramJs.ReactionCustomEmoji) {\n    return {\n      documentId: reaction.documentId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSavedReactionTag(tag: GramJs.SavedReactionTag): ApiSavedReactionTag | undefined {\n  const { reaction, title, count } = tag;\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    reaction: apiReaction,\n    title,\n    count,\n  };\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title, appearAnimation,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    appearAnimation: buildApiDocument(appearAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction: { emoticon: reaction } as ApiReactionEmoji,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiBotCommand,\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiChatInviteImporter,\n  ApiChatlistExportedInvite,\n  ApiChatlistInvite,\n  ApiChatMember,\n  ApiChatReactions,\n  ApiChatSettings,\n  ApiExportedInvite,\n  ApiRestrictionReason,\n  ApiSendAsPeerId,\n  ApiTopic,\n} from '../../types';\n\nimport { omitUndefined, pick, pickTruthy } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { buildApiUsernames } from './common';\nimport { omitVirtualClassFields } from './helpers';\nimport {\n  buildApiEmojiStatus,\n  buildApiPeerColor,\n  buildApiPeerId,\n  getApiChatIdFromMtpPeer,\n  isPeerChat,\n  isPeerUser,\n} from './peers';\nimport { buildApiReaction } from './reactions';\n\ntype PeerEntityApiChatFields = Omit<ApiChat, (\n  'id' | 'type' | 'title' |\n  'lastReadOutboxMessageId' | 'lastReadInboxMessageId' |\n  'unreadCount' | 'unreadMentionsCount' | 'isMuted'\n)>;\n\nfunction buildApiChatFieldsFromPeerEntity(\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n  isSupport = false,\n): PeerEntityApiChatFields {\n  const isMin = Boolean('min' in peerEntity && peerEntity.min);\n  const accessHash = ('accessHash' in peerEntity) ? String(peerEntity.accessHash) : undefined;\n  const hasVideoAvatar = 'photo' in peerEntity && peerEntity.photo && 'hasVideo' in peerEntity.photo\n    && peerEntity.photo.hasVideo;\n  const avatarHash = ('photo' in peerEntity) && peerEntity.photo ? buildAvatarHash(peerEntity.photo) : undefined;\n  const isSignaturesShown = Boolean('signatures' in peerEntity && peerEntity.signatures);\n  const hasPrivateLink = Boolean('hasLink' in peerEntity && peerEntity.hasLink);\n  const isScam = Boolean('scam' in peerEntity && peerEntity.scam);\n  const isFake = Boolean('fake' in peerEntity && peerEntity.fake);\n  const isJoinToSend = Boolean('joinToSend' in peerEntity && peerEntity.joinToSend);\n  const isJoinRequest = Boolean('joinRequest' in peerEntity && peerEntity.joinRequest);\n  const usernames = buildApiUsernames(peerEntity);\n  const isForum = Boolean('forum' in peerEntity && peerEntity.forum);\n  const areStoriesHidden = Boolean('storiesHidden' in peerEntity && peerEntity.storiesHidden);\n  const maxStoryId = 'storiesMaxId' in peerEntity ? peerEntity.storiesMaxId : undefined;\n  const storiesUnavailable = Boolean('storiesUnavailable' in peerEntity && peerEntity.storiesUnavailable);\n  const color = ('color' in peerEntity && peerEntity.color) ? buildApiPeerColor(peerEntity.color) : undefined;\n  const emojiStatus = ('emojiStatus' in peerEntity && peerEntity.emojiStatus)\n    ? buildApiEmojiStatus(peerEntity.emojiStatus) : undefined;\n  const boostLevel = ('level' in peerEntity) ? peerEntity.level : undefined;\n\n  return omitUndefined<PeerEntityApiChatFields>({\n    isMin,\n    hasPrivateLink,\n    isSignaturesShown,\n    usernames,\n    accessHash,\n    hasVideoAvatar,\n    avatarHash,\n    ...('verified' in peerEntity && { isVerified: peerEntity.verified }),\n    ...('callActive' in peerEntity && { isCallActive: peerEntity.callActive }),\n    ...('callNotEmpty' in peerEntity && { isCallNotEmpty: peerEntity.callNotEmpty }),\n    ...('date' in peerEntity && { creationDate: peerEntity.date }),\n    ...('participantsCount' in peerEntity && peerEntity.participantsCount !== undefined && {\n      membersCount: peerEntity.participantsCount,\n    }),\n    ...('noforwards' in peerEntity && { isProtected: Boolean(peerEntity.noforwards) }),\n    isSupport: isSupport || undefined,\n    ...buildApiChatPermissions(peerEntity),\n    ...('creator' in peerEntity && { isCreator: peerEntity.creator }),\n    ...buildApiChatRestrictions(peerEntity),\n    ...buildApiChatMigrationInfo(peerEntity),\n    fakeType: isScam ? 'scam' : (isFake ? 'fake' : undefined),\n    color,\n    isJoinToSend,\n    isJoinRequest,\n    isForum,\n    areStoriesHidden,\n    maxStoryId,\n    hasStories: Boolean(maxStoryId) && !storiesUnavailable,\n    emojiStatus,\n    boostLevel,\n  });\n}\n\nexport function buildApiChatFromDialog(\n  dialog: GramJs.Dialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n): ApiChat {\n  const {\n    peer, folderId, unreadMark, unreadCount, unreadMentionsCount, unreadReactionsCount,\n    notifySettings: { silent, muteUntil },\n    readOutboxMaxId, readInboxMaxId, draft, viewForumAsMessages,\n  } = dialog;\n  const isMuted = silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil);\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    ...(folderId && { folderId }),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastReadInboxMessageId: readInboxMaxId,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    isMuted,\n    muteUntil,\n    ...(unreadMark && { hasUnreadMark: true }),\n    ...(draft instanceof GramJs.DraftMessage && { draftDate: draft.date }),\n    ...(viewForumAsMessages && { isForumAsMessages: true }),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nexport function buildApiChatFromSavedDialog(\n  dialog: GramJs.SavedDialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n): ApiChat {\n  const { peer } = dialog;\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nfunction buildApiChatPermissions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  adminRights?: ApiChatAdminRights;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n} {\n  if (!(peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel)) {\n    return {};\n  }\n\n  return {\n    adminRights: peerEntity.adminRights ? omitVirtualClassFields(peerEntity.adminRights) : undefined,\n    currentUserBannedRights: 'bannedRights' in peerEntity && peerEntity.bannedRights\n      ? omitVirtualClassFields(peerEntity.bannedRights)\n      : undefined,\n    defaultBannedRights: peerEntity.defaultBannedRights\n      ? omitVirtualClassFields(peerEntity.defaultBannedRights)\n      : undefined,\n  };\n}\n\nfunction buildApiChatRestrictions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  isNotJoined?: boolean;\n  isForbidden?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n} {\n  if (peerEntity instanceof GramJs.ChatForbidden) {\n    return {\n      isForbidden: true,\n    };\n  }\n\n  if (peerEntity instanceof GramJs.ChannelForbidden) {\n    return {\n      isRestricted: true,\n    };\n  }\n\n  const restrictions = {};\n\n  if ('restricted' in peerEntity) {\n    const restrictionReason = peerEntity.restricted\n      ? buildApiChatRestrictionReason(peerEntity.restrictionReason)\n      : undefined;\n\n    if (restrictionReason) {\n      Object.assign(restrictions, {\n        isRestricted: true,\n        restrictionReason,\n      });\n    }\n  }\n\n  if (peerEntity instanceof GramJs.Chat) {\n    Object.assign(restrictions, {\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  if (peerEntity instanceof GramJs.Channel) {\n    Object.assign(restrictions, {\n      // `left` is weirdly set to `true` on all channels never joined before\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  return restrictions;\n}\n\nfunction buildApiChatMigrationInfo(peerEntity: GramJs.TypeChat): {\n  migratedTo?: {\n    chatId: string;\n    accessHash?: string;\n  };\n} {\n  if (\n    'migratedTo' in peerEntity\n    && peerEntity.migratedTo\n    && !(peerEntity.migratedTo instanceof GramJs.InputChannelEmpty)\n  ) {\n    return {\n      migratedTo: {\n        chatId: getApiChatIdFromMtpPeer(peerEntity.migratedTo),\n        ...(peerEntity.migratedTo instanceof GramJs.InputChannel && {\n          accessHash: String(peerEntity.migratedTo.accessHash),\n        }),\n      },\n    };\n  }\n\n  return {};\n}\n\nfunction buildApiChatRestrictionReason(\n  restrictionReasons?: GramJs.RestrictionReason[],\n): ApiRestrictionReason | undefined {\n  if (!restrictionReasons) {\n    return undefined;\n  }\n\n  const targetReason = restrictionReasons.find(({ platform }) => platform === 'all');\n  return targetReason ? pick(targetReason, ['reason', 'text']) : undefined;\n}\n\nexport function buildApiChatFromPreview(\n  preview: GramJs.TypeChat | GramJs.TypeUser,\n  isSupport = false,\n): ApiChat | undefined {\n  if (preview instanceof GramJs.ChatEmpty || preview instanceof GramJs.UserEmpty) {\n    return undefined;\n  }\n  const id = buildApiPeerId(\n    preview.id,\n    preview instanceof GramJs.User ? 'user'\n      : (preview instanceof GramJs.Chat || preview instanceof GramJs.ChatForbidden) ? 'chat' : 'channel',\n  );\n\n  return {\n    id,\n    type: getApiChatTypeFromPeerEntity(preview),\n    title: preview instanceof GramJs.User ? getUserName(preview) : preview.title,\n    ...buildApiChatFieldsFromPeerEntity(preview, isSupport),\n  };\n}\n\nexport function getApiChatTypeFromPeerEntity(peerEntity: GramJs.TypeChat | GramJs.TypeUser) {\n  if (peerEntity instanceof GramJs.User || peerEntity instanceof GramJs.UserEmpty) {\n    return 'chatTypePrivate';\n  } else if (\n    peerEntity instanceof GramJs.Chat\n    || peerEntity instanceof GramJs.ChatForbidden\n    || peerEntity instanceof GramJs.ChatEmpty\n  ) {\n    return 'chatTypeBasicGroup';\n  } else {\n    return peerEntity.megagroup ? 'chatTypeSuperGroup' : 'chatTypeChannel';\n  }\n}\n\nexport function getPeerKey(peer: GramJs.TypePeer) {\n  if (isPeerUser(peer)) {\n    return `user${peer.userId}`;\n  } else if (isPeerChat(peer)) {\n    return `chat${peer.chatId}`;\n  } else {\n    return `chat${peer.channelId}`;\n  }\n}\n\nexport function getApiChatTitleFromMtpPeer(peer: GramJs.TypePeer, peerEntity: GramJs.User | GramJs.Chat) {\n  if (isPeerUser(peer)) {\n    return getUserName(peerEntity as GramJs.User);\n  } else {\n    return (peerEntity as GramJs.Chat).title;\n  }\n}\n\nfunction getUserName(user: GramJs.User) {\n  return user.firstName\n    ? `${user.firstName}${user.lastName ? ` ${user.lastName}` : ''}`\n    : (user.lastName || '');\n}\n\nexport function buildAvatarHash(photo: GramJs.TypeUserProfilePhoto | GramJs.TypeChatPhoto) {\n  if ('photoId' in photo) {\n    return String(photo.photoId);\n  }\n\n  return undefined;\n}\n\nexport function buildChatMember(\n  member: GramJs.TypeChatParticipant | GramJs.TypeChannelParticipant,\n): ApiChatMember | undefined {\n  const userId = (member instanceof GramJs.ChannelParticipantBanned || member instanceof GramJs.ChannelParticipantLeft)\n    ? getApiChatIdFromMtpPeer(member.peer)\n    : buildApiPeerId(member.userId, 'user');\n\n  return {\n    userId,\n    inviterId: 'inviterId' in member && member.inviterId\n      ? buildApiPeerId(member.inviterId as BigInt.BigInteger, 'user')\n      : undefined,\n    joinedDate: 'date' in member ? member.date : undefined,\n    kickedByUserId: 'kickedBy' in member && member.kickedBy ? buildApiPeerId(member.kickedBy, 'user') : undefined,\n    promotedByUserId: 'promotedBy' in member && member.promotedBy\n      ? buildApiPeerId(member.promotedBy, 'user')\n      : undefined,\n    bannedRights: 'bannedRights' in member ? omitVirtualClassFields(member.bannedRights) : undefined,\n    adminRights: 'adminRights' in member ? omitVirtualClassFields(member.adminRights) : undefined,\n    customTitle: 'rank' in member ? member.rank : undefined,\n    ...((member instanceof GramJs.ChannelParticipantAdmin || member instanceof GramJs.ChatParticipantAdmin) && {\n      isAdmin: true,\n    }),\n    ...((member instanceof GramJs.ChannelParticipantCreator || member instanceof GramJs.ChatParticipantCreator) && {\n      isOwner: true,\n    }),\n  };\n}\n\nexport function buildChatMembers(\n  participants: GramJs.TypeChatParticipants | GramJs.channels.ChannelParticipants,\n) {\n  // Duplicate code because of TS union-type shenanigans\n  if (participants instanceof GramJs.ChatParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n  if (participants instanceof GramJs.channels.ChannelParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n\n  return undefined;\n}\n\nexport function buildChatTypingStatus(\n  update: GramJs.UpdateUserTyping | GramJs.UpdateChatUserTyping | GramJs.UpdateChannelUserTyping,\n) {\n  let action: string = '';\n  let emoticon: string | undefined;\n  if (update.action instanceof GramJs.SendMessageCancelAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageTypingAction) {\n    action = 'lng_user_typing';\n  } else if (update.action instanceof GramJs.SendMessageRecordVideoAction) {\n    action = 'lng_send_action_record_video';\n  } else if (update.action instanceof GramJs.SendMessageUploadVideoAction) {\n    action = 'lng_send_action_upload_video';\n  } else if (update.action instanceof GramJs.SendMessageRecordAudioAction) {\n    action = 'lng_send_action_record_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadAudioAction) {\n    action = 'lng_send_action_upload_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadPhotoAction) {\n    action = 'lng_send_action_upload_photo';\n  } else if (update.action instanceof GramJs.SendMessageUploadDocumentAction) {\n    action = 'lng_send_action_upload_file';\n  } else if (update.action instanceof GramJs.SendMessageGeoLocationAction) {\n    action = 'selecting a location to share';\n  } else if (update.action instanceof GramJs.SendMessageChooseContactAction) {\n    action = 'selecting a contact to share';\n  } else if (update.action instanceof GramJs.SendMessageGamePlayAction) {\n    action = 'lng_playing_game';\n  } else if (update.action instanceof GramJs.SendMessageRecordRoundAction) {\n    action = 'lng_send_action_record_round';\n  } else if (update.action instanceof GramJs.SendMessageUploadRoundAction) {\n    action = 'lng_send_action_upload_round';\n  } else if (update.action instanceof GramJs.SendMessageChooseStickerAction) {\n    action = 'lng_send_action_choose_sticker';\n  } else if (update.action instanceof GramJs.SpeakingInGroupCallAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteractionSeen) {\n    action = 'lng_user_action_watching_animations';\n    emoticon = update.action.emoticon;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n    return undefined;\n  }\n\n  return {\n    action,\n    ...(emoticon && { emoji: emoticon }),\n    ...(!(update instanceof GramJs.UpdateUserTyping) && { userId: getApiChatIdFromMtpPeer(update.fromId) }),\n    timestamp: Date.now() + getServerTimeOffset() * 1000,\n  };\n}\n\nexport function buildApiChatFolder(filter: GramJs.DialogFilter | GramJs.DialogFilterChatlist): ApiChatFolder {\n  if (filter instanceof GramJs.DialogFilterChatlist) {\n    return {\n      ...pickTruthy(filter, [\n        'id', 'title', 'emoticon',\n      ]),\n      excludedChatIds: [],\n      includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n      pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n      hasMyInvites: filter.hasMyInvites,\n      isChatList: true,\n    };\n  }\n\n  return {\n    ...pickTruthy(filter, [\n      'id', 'title', 'emoticon', 'contacts', 'nonContacts', 'groups', 'bots',\n      'excludeMuted', 'excludeRead', 'excludeArchived',\n    ]),\n    channels: filter.broadcasts,\n    pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    excludedChatIds: filter.excludePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n  };\n}\n\nexport function buildApiChatFolderFromSuggested({\n  filter, description,\n}: {\n  filter: GramJs.TypeDialogFilter;\n  description: string;\n}): ApiChatFolder | undefined {\n  if (!(filter instanceof GramJs.DialogFilter || filter instanceof GramJs.DialogFilterChatlist)) return undefined;\n  return {\n    ...buildApiChatFolder(filter),\n    description,\n  };\n}\n\nexport function buildApiChatBotCommands(botInfos: GramJs.BotInfo[]) {\n  return botInfos.reduce((botCommands, botInfo) => {\n    const botId = buildApiPeerId(botInfo.userId!, 'user');\n\n    if (botInfo.commands) {\n      botCommands = botCommands.concat(botInfo.commands.map((mtpCommand) => ({\n        botId,\n        ...omitVirtualClassFields(mtpCommand),\n      })));\n    }\n\n    return botCommands;\n  }, [] as ApiBotCommand[]);\n}\n\nexport function buildApiExportedInvite(invite: GramJs.ChatInviteExported): ApiExportedInvite {\n  const {\n    revoked,\n    date,\n    expireDate,\n    link,\n    permanent,\n    startDate,\n    usage,\n    usageLimit,\n    requested,\n    requestNeeded,\n    title,\n    adminId,\n  } = invite;\n  return {\n    isRevoked: revoked,\n    date,\n    expireDate,\n    link,\n    isPermanent: permanent,\n    startDate,\n    usage,\n    usageLimit,\n    isRequestNeeded: requestNeeded,\n    requested,\n    title,\n    adminId: buildApiPeerId(adminId, 'user'),\n  };\n}\n\nexport function buildChatInviteImporter(importer: GramJs.ChatInviteImporter): ApiChatInviteImporter {\n  const {\n    userId,\n    date,\n    about,\n    requested,\n    viaChatlist,\n  } = importer;\n  return {\n    userId: buildApiPeerId(userId, 'user'),\n    date,\n    about,\n    isRequested: requested,\n    isFromChatList: viaChatlist,\n  };\n}\n\nexport function buildApiChatSettings({\n  autoarchived,\n  reportSpam,\n  addContact,\n  blockContact,\n}: GramJs.PeerSettings): ApiChatSettings {\n  return {\n    isAutoArchived: Boolean(autoarchived),\n    canReportSpam: Boolean(reportSpam),\n    canAddContact: Boolean(addContact),\n    canBlockContact: Boolean(blockContact),\n  };\n}\n\nexport function buildApiChatReactions(chatReactions?: GramJs.TypeChatReactions): ApiChatReactions | undefined {\n  if (chatReactions instanceof GramJs.ChatReactionsAll) {\n    return {\n      type: 'all',\n      areCustomAllowed: chatReactions.allowCustom,\n    };\n  }\n  if (chatReactions instanceof GramJs.ChatReactionsSome) {\n    return {\n      type: 'some',\n      allowed: chatReactions.reactions.map(buildApiReaction).filter(Boolean),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSendAsPeerId(sendAs: GramJs.SendAsPeer): ApiSendAsPeerId {\n  return {\n    id: getApiChatIdFromMtpPeer(sendAs.peer),\n    isPremium: sendAs.premiumRequired,\n  };\n}\n\nexport function buildApiTopic(forumTopic: GramJs.TypeForumTopic): ApiTopic | undefined {\n  if (forumTopic instanceof GramJs.ForumTopicDeleted) {\n    return undefined;\n  }\n\n  const {\n    id,\n    my,\n    closed,\n    pinned,\n    hidden,\n    short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId,\n    topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId,\n    notifySettings: {\n      silent, muteUntil,\n    },\n  } = forumTopic;\n\n  return {\n    id,\n    isClosed: closed,\n    isPinned: pinned,\n    isHidden: hidden,\n    isOwner: my,\n    isMin: short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId?.toString(),\n    lastMessageId: topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId: getApiChatIdFromMtpPeer(fromId),\n    isMuted: silent || (typeof muteUntil === 'number' ? getServerTime() < muteUntil : undefined),\n    muteUntil,\n  };\n}\n\nexport function buildApiChatlistInvite(\n  invite: GramJs.chatlists.TypeChatlistInvite | undefined, slug: string,\n): ApiChatlistInvite | undefined {\n  if (invite instanceof GramJs.chatlists.ChatlistInvite) {\n    return {\n      slug,\n      title: invite.title,\n      emoticon: invite.emoticon,\n      peerIds: invite.peers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    };\n  }\n\n  if (invite instanceof GramJs.chatlists.ChatlistInviteAlready) {\n    return {\n      slug,\n      folderId: invite.filterId,\n      missingPeerIds: invite.missingPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n      alreadyPeerIds: invite.alreadyPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiChatlistExportedInvite(\n  invite: GramJs.TypeExportedChatlistInvite | undefined,\n): ApiChatlistExportedInvite | undefined {\n  if (!(invite instanceof GramJs.ExportedChatlistInvite)) return undefined;\n\n  const {\n    title,\n    url,\n    peers,\n  } = invite;\n\n  return {\n    title,\n    url,\n    peerIds: peers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n  };\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { generateRandomBytes, readBigIntFromBuffer } from '../../../lib/gramjs/Helpers';\n\nimport type { ApiInputPrivacyRules, ApiPrivacyKey } from '../../../types';\nimport type {\n  ApiBotApp,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiChatReactions,\n  ApiFormattedText,\n  ApiGroupCall,\n  ApiInputReplyInfo,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiPhoneCall,\n  ApiPhoto,\n  ApiPoll,\n  ApiReaction,\n  ApiReportReason,\n  ApiRequestInputInvoice,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThemeParameters,\n  ApiVideo,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport { CHANNEL_ID_LENGTH, DEFAULT_STATUS_ICON_ID } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { deserializeBytes } from '../helpers';\nimport localDb from '../localDb';\n\nconst LEGACY_CHANNEL_ID_MIN_LENGTH = 11; // Example: -1234567890\n\nfunction checkIfChannelId(id: string) {\n  if (id.length >= CHANNEL_ID_LENGTH) return id.startsWith('-100');\n  // LEGACY Unprefixed channel id\n  if (id.length === LEGACY_CHANNEL_ID_MIN_LENGTH && id.startsWith('-4')) return false;\n  return id.length >= LEGACY_CHANNEL_ID_MIN_LENGTH;\n}\n\nexport function getEntityTypeById(chatOrUserId: string) {\n  if (!chatOrUserId.startsWith('-')) {\n    return 'user';\n  } else if (checkIfChannelId(chatOrUserId)) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\nexport function buildPeer(chatOrUserId: string): GramJs.TypePeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.PeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.PeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n    });\n  } else {\n    return new GramJs.PeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeer(chatOrUserId: string, accessHash?: string): GramJs.TypeInputPeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputPeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputPeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return new GramJs.InputPeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeerFromLocalDb(chatOrUserId: string): GramJs.TypeInputPeer | undefined {\n  const type = getEntityTypeById(chatOrUserId);\n  let accessHash: BigInt.BigInteger | undefined;\n\n  if (type === 'user') {\n    accessHash = localDb.users[chatOrUserId]?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  } else if (type === 'channel') {\n    accessHash = (localDb.chats[chatOrUserId] as GramJs.Channel)?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  }\n\n  return buildInputPeer(chatOrUserId, String(accessHash));\n}\n\nexport function buildInputEntity(chatOrUserId: string, accessHash?: string) {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return buildMtpPeerId(chatOrUserId, 'chat');\n  }\n}\n\nexport function buildInputStickerSet(id: string, accessHash: string) {\n  return new GramJs.InputStickerSetID({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash),\n  });\n}\n\nexport function buildInputStickerSetShortName(shortName: string) {\n  return new GramJs.InputStickerSetShortName({\n    shortName,\n  });\n}\n\nexport function buildInputDocument(media: ApiSticker | ApiVideo) {\n  const document = localDb.documents[media.id];\n\n  if (!document) {\n    return undefined;\n  }\n\n  return new GramJs.InputDocument(pick(document, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputMediaDocument(media: ApiSticker | ApiVideo) {\n  const inputDocument = buildInputDocument(media);\n\n  if (!inputDocument) {\n    return undefined;\n  }\n\n  return new GramJs.InputMediaDocument({ id: inputDocument });\n}\n\nexport function buildInputPoll(pollParams: ApiNewPoll, randomId: BigInt.BigInteger) {\n  const { summary, quiz } = pollParams;\n\n  const poll = new GramJs.Poll({\n    id: randomId,\n    publicVoters: summary.isPublic,\n    question: summary.question,\n    answers: summary.answers.map(({ text, option }) => {\n      return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n    }),\n    quiz: summary.quiz,\n    multipleChoice: summary.multipleChoice,\n  });\n\n  if (!quiz) {\n    return new GramJs.InputMediaPoll({ poll });\n  }\n\n  const correctAnswers = quiz.correctAnswers.map(deserializeBytes);\n  const { solution } = quiz;\n  const solutionEntities = quiz.solutionEntities ? quiz.solutionEntities.map(buildMtpMessageEntity) : [];\n\n  return new GramJs.InputMediaPoll({\n    poll,\n    correctAnswers,\n    ...(solution && {\n      solution,\n      solutionEntities,\n    }),\n  });\n}\n\nexport function buildInputPollFromExisting(poll: ApiPoll, shouldClose = false) {\n  return new GramJs.InputMediaPoll({\n    poll: new GramJs.Poll({\n      id: BigInt(poll.id),\n      publicVoters: poll.summary.isPublic,\n      question: poll.summary.question,\n      answers: poll.summary.answers.map(({ text, option }) => {\n        return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n      }),\n      quiz: poll.summary.quiz,\n      multipleChoice: poll.summary.multipleChoice,\n      closeDate: poll.summary.closeDate,\n      closePeriod: poll.summary.closePeriod,\n      closed: shouldClose ? true : poll.summary.closed,\n    }),\n    correctAnswers: poll.results.results?.filter((o) => o.isCorrect).map((o) => deserializeBytes(o.option)),\n    solution: poll.results.solution,\n    solutionEntities: poll.results.solutionEntities?.map(buildMtpMessageEntity),\n  });\n}\n\nexport function buildFilterFromApiFolder(folder: ApiChatFolder): GramJs.DialogFilter | GramJs.DialogFilterChatlist {\n  const {\n    emoticon,\n    contacts,\n    nonContacts,\n    groups,\n    channels,\n    bots,\n    excludeArchived,\n    excludeMuted,\n    excludeRead,\n    pinnedChatIds,\n    includedChatIds,\n    excludedChatIds,\n  } = folder;\n\n  const pinnedPeers = pinnedChatIds\n    ? pinnedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const includePeers = includedChatIds\n    ? includedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const excludePeers = excludedChatIds\n    ? excludedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  if (folder.isChatList) {\n    return new GramJs.DialogFilterChatlist({\n      id: folder.id,\n      title: folder.title,\n      emoticon: emoticon || undefined,\n      pinnedPeers,\n      includePeers,\n      hasMyInvites: folder.hasMyInvites,\n    });\n  }\n\n  return new GramJs.DialogFilter({\n    id: folder.id,\n    title: folder.title,\n    emoticon: emoticon || undefined,\n    contacts: contacts || undefined,\n    nonContacts: nonContacts || undefined,\n    groups: groups || undefined,\n    bots: bots || undefined,\n    excludeArchived: excludeArchived || undefined,\n    excludeMuted: excludeMuted || undefined,\n    excludeRead: excludeRead || undefined,\n    broadcasts: channels || undefined,\n    pinnedPeers,\n    includePeers,\n    excludePeers,\n  });\n}\n\nexport function buildInputStory(story: ApiStory | ApiStorySkipped) {\n  const peer = buildInputPeerFromLocalDb(story.peerId)!;\n  return new GramJs.InputMediaStory({\n    peer,\n    id: story.id,\n  });\n}\n\nexport function generateRandomBigInt() {\n  return readBigIntFromBuffer(generateRandomBytes(8), true, true);\n}\n\nexport function generateRandomInt() {\n  return readBigIntFromBuffer(generateRandomBytes(4), true, true).toJSNumber();\n}\n\nexport function buildMessageFromUpdate(\n  id: number,\n  chatId: string,\n  update: GramJs.UpdateShortSentMessage | GramJs.UpdateServiceNotification,\n) {\n  // This is not a proper message, but we only need these fields for downloading media through `localDb`.\n  return new GramJs.Message({\n    id,\n    peerId: buildPeer(chatId),\n    fromId: buildPeer(chatId),\n    media: update.media,\n  } as GramJs.Message);\n}\n\nexport function buildMtpMessageEntity(entity: ApiMessageEntity): GramJs.TypeMessageEntity {\n  const {\n    type, offset, length,\n  } = entity;\n\n  const user = 'userId' in entity ? localDb.users[entity.userId] : undefined;\n\n  switch (type) {\n    case ApiMessageEntityTypes.Bold:\n      return new GramJs.MessageEntityBold({ offset, length });\n    case ApiMessageEntityTypes.Italic:\n      return new GramJs.MessageEntityItalic({ offset, length });\n    case ApiMessageEntityTypes.Underline:\n      return new GramJs.MessageEntityUnderline({ offset, length });\n    case ApiMessageEntityTypes.Strike:\n      return new GramJs.MessageEntityStrike({ offset, length });\n    case ApiMessageEntityTypes.Code:\n      return new GramJs.MessageEntityCode({ offset, length });\n    case ApiMessageEntityTypes.Pre:\n      return new GramJs.MessageEntityPre({ offset, length, language: entity.language || '' });\n    case ApiMessageEntityTypes.Blockquote:\n      return new GramJs.MessageEntityBlockquote({ offset, length });\n    case ApiMessageEntityTypes.TextUrl:\n      return new GramJs.MessageEntityTextUrl({ offset, length, url: entity.url });\n    case ApiMessageEntityTypes.Url:\n      return new GramJs.MessageEntityUrl({ offset, length });\n    case ApiMessageEntityTypes.Hashtag:\n      return new GramJs.MessageEntityHashtag({ offset, length });\n    case ApiMessageEntityTypes.MentionName:\n      return new GramJs.InputMessageEntityMentionName({\n        offset,\n        length,\n        userId: new GramJs.InputUser({ userId: BigInt(user!.id), accessHash: user!.accessHash! }),\n      });\n    case ApiMessageEntityTypes.Spoiler:\n      return new GramJs.MessageEntitySpoiler({ offset, length });\n    case ApiMessageEntityTypes.CustomEmoji:\n      return new GramJs.MessageEntityCustomEmoji({ offset, length, documentId: BigInt(entity.documentId) });\n    default:\n      return new GramJs.MessageEntityUnknown({ offset, length });\n  }\n}\n\nexport function isMessageWithMedia(message: GramJs.Message | GramJs.UpdateServiceNotification) {\n  const { media } = message;\n  if (!media) {\n    return false;\n  }\n\n  return (\n    media instanceof GramJs.MessageMediaPhoto\n    || media instanceof GramJs.MessageMediaDocument\n    || (\n      media instanceof GramJs.MessageMediaWebPage\n      && media.webpage instanceof GramJs.WebPage\n      && (\n        media.webpage.photo instanceof GramJs.Photo || (\n          media.webpage.document instanceof GramJs.Document\n        )\n      )\n    ) || (\n      media instanceof GramJs.MessageMediaGame\n      && (media.game.document instanceof GramJs.Document || media.game.photo instanceof GramJs.Photo)\n    ) || (\n      media instanceof GramJs.MessageMediaInvoice && (media.photo || media.extendedMedia)\n    )\n  );\n}\n\nexport function isServiceMessageWithMedia(message: GramJs.MessageService) {\n  return 'photo' in message.action && message.action.photo instanceof GramJs.Photo;\n}\n\nexport function buildChatPhotoForLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.PhotoEmpty) {\n    return new GramJs.ChatPhotoEmpty();\n  }\n\n  const { dcId, id: photoId } = photo;\n\n  return new GramJs.ChatPhoto({\n    dcId,\n    photoId,\n  });\n}\n\nexport function buildInputPhoto(photo: ApiPhoto) {\n  const localPhoto = localDb.photos[photo?.id];\n\n  if (!localPhoto) {\n    return undefined;\n  }\n\n  return new GramJs.InputPhoto(pick(localPhoto, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone: string;\n  firstName: string;\n  lastName: string;\n}) {\n  return new GramJs.InputPhoneContact({\n    clientId: BigInt(1),\n    phone,\n    firstName,\n    lastName,\n  });\n}\n\nexport function buildChatBannedRights(\n  bannedRights: ApiChatBannedRights,\n  untilDate = 0,\n) {\n  return new GramJs.ChatBannedRights({\n    ...bannedRights,\n    untilDate,\n  });\n}\n\nexport function buildChatAdminRights(\n  adminRights: ApiChatAdminRights,\n) {\n  return new GramJs.ChatAdminRights(adminRights);\n}\n\nexport function buildShippingInfo(info: GramJs.PaymentRequestedInfo) {\n  const { shippingAddress } = info;\n  return new GramJs.PaymentRequestedInfo({\n    ...info,\n    shippingAddress: shippingAddress\n      ? new GramJs.PostAddress(shippingAddress)\n      : undefined,\n  });\n}\n\nexport function buildInputPrivacyKey(privacyKey: ApiPrivacyKey) {\n  switch (privacyKey) {\n    case 'phoneNumber':\n      return new GramJs.InputPrivacyKeyPhoneNumber();\n\n    case 'addByPhone':\n      return new GramJs.InputPrivacyKeyAddedByPhone();\n\n    case 'lastSeen':\n      return new GramJs.InputPrivacyKeyStatusTimestamp();\n\n    case 'profilePhoto':\n      return new GramJs.InputPrivacyKeyProfilePhoto();\n\n    case 'forwards':\n      return new GramJs.InputPrivacyKeyForwards();\n\n    case 'chatInvite':\n      return new GramJs.InputPrivacyKeyChatInvite();\n\n    case 'phoneCall':\n      return new GramJs.InputPrivacyKeyPhoneCall();\n\n    case 'phoneP2P':\n      return new GramJs.InputPrivacyKeyPhoneP2P();\n\n    case 'voiceMessages':\n      return new GramJs.InputPrivacyKeyVoiceMessages();\n\n    case 'bio':\n      return new GramJs.InputPrivacyKeyAbout();\n  }\n\n  return undefined;\n}\n\nexport function buildInputReportReason(reason: ApiReportReason) {\n  switch (reason) {\n    case 'spam':\n      return new GramJs.InputReportReasonSpam();\n    case 'violence':\n      return new GramJs.InputReportReasonViolence();\n    case 'childAbuse':\n      return new GramJs.InputReportReasonChildAbuse();\n    case 'pornography':\n      return new GramJs.InputReportReasonPornography();\n    case 'copyright':\n      return new GramJs.InputReportReasonCopyright();\n    case 'fake':\n      return new GramJs.InputReportReasonFake();\n    case 'geoIrrelevant':\n      return new GramJs.InputReportReasonGeoIrrelevant();\n    case 'illegalDrugs':\n      return new GramJs.InputReportReasonIllegalDrugs();\n    case 'personalDetails':\n      return new GramJs.InputReportReasonPersonalDetails();\n    case 'other':\n      return new GramJs.InputReportReasonOther();\n  }\n\n  return undefined;\n}\n\nexport function buildSendMessageAction(action: ApiSendMessageAction) {\n  switch (action.type) {\n    case 'cancel':\n      return new GramJs.SendMessageCancelAction();\n    case 'typing':\n      return new GramJs.SendMessageTypingAction();\n    case 'recordAudio':\n      return new GramJs.SendMessageRecordAudioAction();\n    case 'chooseSticker':\n      return new GramJs.SendMessageChooseStickerAction();\n    case 'playingGame':\n      return new GramJs.SendMessageGamePlayAction();\n  }\n  return undefined;\n}\n\nexport function buildInputThemeParams(params: ApiThemeParameters) {\n  return new GramJs.DataJSON({\n    data: JSON.stringify(params),\n  });\n}\n\nexport function buildMtpPeerId(id: string, type: 'user' | 'chat' | 'channel') {\n  if (type === 'user') {\n    return BigInt(id);\n  }\n\n  if (type === 'channel') {\n    if (id.length === CHANNEL_ID_LENGTH) {\n      return BigInt(id.slice(4));\n    }\n\n    // LEGACY Unprefixed channel id\n    return BigInt(id.slice(1));\n  }\n\n  return BigInt(id.slice(1));\n}\n\nexport function buildInputGroupCall(groupCall: Partial<ApiGroupCall>) {\n  return new GramJs.InputGroupCall({\n    id: BigInt(groupCall.id!),\n    accessHash: BigInt(groupCall.accessHash!),\n  });\n}\n\nexport function buildInputPhoneCall({ id, accessHash }: ApiPhoneCall) {\n  return new GramJs.InputPhoneCall({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash!),\n  });\n}\n\nexport function buildInputInvoice(invoice: ApiRequestInputInvoice) {\n  if ('slug' in invoice) {\n    return new GramJs.InputInvoiceSlug({\n      slug: invoice.slug,\n    });\n  } else {\n    return new GramJs.InputInvoiceMessage({\n      peer: buildInputPeer(invoice.chat.id, invoice.chat.accessHash),\n      msgId: invoice.messageId,\n    });\n  }\n}\n\nexport function buildInputReaction(reaction?: ApiReaction) {\n  if (reaction && 'emoticon' in reaction) {\n    return new GramJs.ReactionEmoji({\n      emoticon: reaction.emoticon,\n    });\n  }\n\n  if (reaction && 'documentId' in reaction) {\n    return new GramJs.ReactionCustomEmoji({\n      documentId: BigInt(reaction.documentId),\n    });\n  }\n\n  return new GramJs.ReactionEmpty();\n}\n\nexport function buildInputChatReactions(chatReactions?: ApiChatReactions) {\n  if (chatReactions?.type === 'all') {\n    return new GramJs.ChatReactionsAll({\n      allowCustom: chatReactions.areCustomAllowed,\n    });\n  }\n\n  if (chatReactions?.type === 'some') {\n    return new GramJs.ChatReactionsSome({\n      reactions: chatReactions.allowed.map(buildInputReaction),\n    });\n  }\n\n  return new GramJs.ChatReactionsNone();\n}\n\nexport function buildInputEmojiStatus(emojiStatus: ApiSticker, expires?: number) {\n  if (emojiStatus.id === DEFAULT_STATUS_ICON_ID) {\n    return new GramJs.EmojiStatusEmpty();\n  }\n\n  if (expires) {\n    return new GramJs.EmojiStatusUntil({\n      documentId: BigInt(emojiStatus.id),\n      until: expires,\n    });\n  }\n\n  return new GramJs.EmojiStatus({\n    documentId: BigInt(emojiStatus.id),\n  });\n}\n\nexport function buildInputTextWithEntities(formatted: ApiFormattedText) {\n  return new GramJs.TextWithEntities({\n    text: formatted.text,\n    entities: formatted.entities?.map(buildMtpMessageEntity) || [],\n  });\n}\n\nexport function buildInputBotApp(app: ApiBotApp) {\n  return new GramJs.InputBotAppID({\n    id: BigInt(app.id),\n    accessHash: BigInt(app.accessHash),\n  });\n}\n\nexport function buildInputReplyTo(replyInfo: ApiInputReplyInfo) {\n  if (replyInfo.type === 'story') {\n    return new GramJs.InputReplyToStory({\n      peer: buildInputPeerFromLocalDb(replyInfo.peerId)!,\n      storyId: replyInfo.storyId,\n    });\n  }\n\n  if (replyInfo.type === 'message') {\n    const {\n      replyToMsgId, replyToTopId, replyToPeerId, quoteText,\n    } = replyInfo;\n    return new GramJs.InputReplyToMessage({\n      replyToMsgId,\n      topMsgId: replyToTopId,\n      replyToPeerId: replyToPeerId ? buildInputPeerFromLocalDb(replyToPeerId)! : undefined,\n      quoteText: quoteText?.text,\n      quoteEntities: quoteText?.entities?.map(buildMtpMessageEntity),\n    });\n  }\n\n  return undefined;\n}\n\nexport function buildInputPrivacyRules(\n  rules: ApiInputPrivacyRules,\n) {\n  const privacyRules: GramJs.TypeInputPrivacyRule[] = [];\n\n  if (rules.allowedUsers?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowUsers({\n      users: rules.allowedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.allowedChats?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowChatParticipants({\n      chats: rules.allowedChats.map(({ id, type }) => (\n        buildMtpPeerId(id, type === 'chatTypeBasicGroup' ? 'chat' : 'channel')\n      )),\n    }));\n  }\n  if (rules.blockedUsers?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowUsers({\n      users: rules.blockedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.blockedChats?.length) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowChatParticipants({\n      chats: rules.blockedChats.map(({ id, type }) => (\n        buildMtpPeerId(id, type === 'chatTypeBasicGroup' ? 'chat' : 'channel')\n      )),\n    }));\n  }\n\n  if (!rules.isUnspecified) {\n    switch (rules.visibility) {\n      case 'everybody':\n        privacyRules.push(new GramJs.InputPrivacyValueAllowAll());\n        break;\n\n      case 'contacts':\n        privacyRules.push(new GramJs.InputPrivacyValueAllowContacts());\n        break;\n\n      case 'nonContacts':\n        privacyRules.push(new GramJs.InputPrivacyValueDisallowContacts());\n        break;\n\n      case 'nobody':\n        privacyRules.push(new GramJs.InputPrivacyValueDisallowAll());\n        break;\n    }\n  }\n\n  return privacyRules;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSponsoredWebPage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiBotApp } from './bots';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended, sponsorInfo,\n    additionalInfo, showPeerPhoto, webpage, buttonText, app,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(webpage && { webPage: buildSponsoredWebPage(webpage) }),\n    ...(showPeerPhoto && { isAvatarShown: true }),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n    ...(sponsorInfo && { sponsorInfo }),\n    ...(additionalInfo && { additionalInfo }),\n    ...(buttonText && { buttonText }),\n    ...(app && { botApp: buildApiBotApp(app) }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId' | 'fromBoostsApplied'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: string;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      const cryptoAmountWithDecimals = action.cryptoAmount!.divide(1e7).toJSNumber() / 100;\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: cryptoAmountWithDecimals.toFixed(2),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nfunction buildSponsoredWebPage(webPage: GramJs.TypeSponsoredWebPage): ApiSponsoredWebPage {\n  let photo: ApiPhoto | undefined;\n  if (webPage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(webPage.photo);\n    photo = buildApiPhoto(webPage.photo);\n  }\n\n  return {\n    ...pick(webPage, [\n      'url',\n      'siteName',\n    ]),\n    photo,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiPremiumGiftOption,\n  ApiUser,\n  ApiUserFullInfo,\n  ApiUserStatus,\n  ApiUserType,\n} from '../../types';\n\nimport { buildApiBotInfo } from './bots';\nimport { buildApiPhoto, buildApiUsernames } from './common';\nimport { buildApiEmojiStatus, buildApiPeerColor, buildApiPeerId } from './peers';\n\nexport function buildApiUserFullInfo(mtpUserFull: GramJs.users.UserFull): ApiUserFullInfo {\n  const {\n    fullUser: {\n      about, commonChatsCount, pinnedMsgId, botInfo, blocked,\n      profilePhoto, voiceMessagesForbidden, premiumGifts,\n      fallbackPhoto, personalPhoto, translationsDisabled, storiesPinnedAvailable,\n      contactRequirePremium,\n    },\n    users,\n  } = mtpUserFull;\n\n  const userId = buildApiPeerId(users[0].id, 'user');\n\n  return {\n    bio: about,\n    commonChatsCount,\n    pinnedMessageId: pinnedMsgId,\n    isBlocked: Boolean(blocked),\n    noVoiceMessages: voiceMessagesForbidden,\n    hasPinnedStories: Boolean(storiesPinnedAvailable),\n    isTranslationDisabled: translationsDisabled,\n    profilePhoto: profilePhoto instanceof GramJs.Photo ? buildApiPhoto(profilePhoto) : undefined,\n    fallbackPhoto: fallbackPhoto instanceof GramJs.Photo ? buildApiPhoto(fallbackPhoto) : undefined,\n    personalPhoto: personalPhoto instanceof GramJs.Photo ? buildApiPhoto(personalPhoto) : undefined,\n    ...(premiumGifts && { premiumGifts: premiumGifts.map((gift) => buildApiPremiumGiftOption(gift)) }),\n    ...(botInfo && { botInfo: buildApiBotInfo(botInfo, userId) }),\n    isContactRequirePremium: contactRequirePremium,\n  };\n}\n\nexport function buildApiUser(mtpUser: GramJs.TypeUser): ApiUser | undefined {\n  if (!(mtpUser instanceof GramJs.User)) {\n    return undefined;\n  }\n\n  const {\n    id, firstName, lastName, fake, scam, support, closeFriend, storiesUnavailable, storiesMaxId,\n  } = mtpUser;\n  const hasVideoAvatar = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? Boolean(mtpUser.photo.hasVideo)\n    : undefined;\n  const avatarHash = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? String(mtpUser.photo.photoId)\n    : undefined;\n  const userType = buildApiUserType(mtpUser);\n  const usernames = buildApiUsernames(mtpUser);\n  const emojiStatus = mtpUser.emojiStatus ? buildApiEmojiStatus(mtpUser.emojiStatus) : undefined;\n\n  return {\n    id: buildApiPeerId(id, 'user'),\n    isMin: Boolean(mtpUser.min),\n    fakeType: scam ? 'scam' : (fake ? 'fake' : undefined),\n    ...(mtpUser.self && { isSelf: true }),\n    isPremium: Boolean(mtpUser.premium),\n    ...(mtpUser.verified && { isVerified: true }),\n    ...(closeFriend && { isCloseFriend: true }),\n    ...(support && { isSupport: true }),\n    ...((mtpUser.contact || mtpUser.mutualContact) && { isContact: true }),\n    type: userType,\n    firstName,\n    lastName,\n    canEditBot: Boolean(mtpUser.botCanEdit),\n    ...(userType === 'userTypeBot' && { canBeInvitedToGroup: !mtpUser.botNochats }),\n    ...(usernames && { usernames }),\n    phoneNumber: mtpUser.phone || '',\n    noStatus: !mtpUser.status,\n    ...(mtpUser.accessHash && { accessHash: String(mtpUser.accessHash) }),\n    ...(avatarHash && { avatarHash }),\n    emojiStatus,\n    hasVideoAvatar,\n    areStoriesHidden: Boolean(mtpUser.storiesHidden),\n    maxStoryId: storiesMaxId,\n    hasStories: Boolean(storiesMaxId) && !storiesUnavailable,\n    ...(mtpUser.bot && mtpUser.botInlinePlaceholder && { botPlaceholder: mtpUser.botInlinePlaceholder }),\n    ...(mtpUser.bot && mtpUser.botAttachMenu && { isAttachBot: mtpUser.botAttachMenu }),\n    color: mtpUser.color && buildApiPeerColor(mtpUser.color),\n  };\n}\n\nfunction buildApiUserType(user: GramJs.User): ApiUserType {\n  if (user.bot) {\n    return 'userTypeBot';\n  }\n  if (user.deleted) {\n    return 'userTypeDeleted';\n  }\n\n  return 'userTypeRegular';\n}\n\nexport function buildApiUserStatus(mtpStatus?: GramJs.TypeUserStatus): ApiUserStatus {\n  if (!mtpStatus || mtpStatus instanceof GramJs.UserStatusEmpty) {\n    return { type: 'userStatusEmpty' };\n  } else if (mtpStatus instanceof GramJs.UserStatusOnline) {\n    return { type: 'userStatusOnline', expires: mtpStatus.expires };\n  } else if (mtpStatus instanceof GramJs.UserStatusOffline) {\n    return { type: 'userStatusOffline', wasOnline: mtpStatus.wasOnline };\n  } else if (mtpStatus instanceof GramJs.UserStatusRecently) {\n    return { type: 'userStatusRecently', isReadDateRestrictedByMe: mtpStatus.byMe };\n  } else if (mtpStatus instanceof GramJs.UserStatusLastWeek) {\n    return { type: 'userStatusLastWeek', isReadDateRestrictedByMe: mtpStatus.byMe };\n  } else {\n    return { type: 'userStatusLastMonth', isReadDateRestrictedByMe: mtpStatus.byMe };\n  }\n}\n\nexport function buildApiUsersAndStatuses(mtpUsers: GramJs.TypeUser[]) {\n  const userStatusesById: Record<string, ApiUserStatus> = {};\n  const usersById: Record<string, ApiUser> = {};\n\n  mtpUsers.forEach((mtpUser) => {\n    const user = buildApiUser(mtpUser);\n    if (!user) {\n      return;\n    }\n\n    const duplicateUser = usersById[user.id];\n    if (!duplicateUser || duplicateUser.isMin) {\n      usersById[user.id] = user;\n    }\n\n    if ('status' in mtpUser) {\n      userStatusesById[user.id] = buildApiUserStatus(mtpUser.status);\n    }\n  });\n\n  return { users: Object.values(usersById), userStatusesById };\n}\n\nexport function buildApiPremiumGiftOption(option: GramJs.TypePremiumGiftOption): ApiPremiumGiftOption {\n  const {\n    months, currency, amount, botUrl,\n  } = option;\n\n  return {\n    months,\n    currency,\n    amount: amount.toJSNumber(),\n    botUrl,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiPrivacyKey } from '../../../types';\nimport type {\n  ApiConfig, ApiCountry, ApiLangString,\n  ApiPeerColors,\n  ApiSession, ApiUrlAuthResult, ApiWallpaper, ApiWebSession,\n} from '../../types';\n\nimport { buildCollectionByCallback, omit, pick } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { addUserToLocalDb } from '../helpers';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiDocument } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildApiReaction } from './reactions';\nimport { buildApiUser } from './users';\n\nexport function buildApiWallpaper(wallpaper: GramJs.TypeWallPaper): ApiWallpaper | undefined {\n  if (wallpaper instanceof GramJs.WallPaperNoFile) {\n    // TODO: Plain color wallpapers\n    return undefined;\n  }\n\n  const { slug } = wallpaper;\n\n  const document = buildApiDocument(wallpaper.document);\n\n  if (!document) {\n    return undefined;\n  }\n\n  return {\n    slug,\n    document,\n  };\n}\n\nexport function buildApiSession(session: GramJs.Authorization): ApiSession {\n  return {\n    isCurrent: Boolean(session.current),\n    isOfficialApp: Boolean(session.officialApp),\n    isPasswordPending: Boolean(session.passwordPending),\n    hash: String(session.hash),\n    areCallsEnabled: !session.callRequestsDisabled,\n    areSecretChatsEnabled: !session.encryptedRequestsDisabled,\n    isUnconfirmed: session.unconfirmed,\n    ...pick(session, [\n      'deviceModel', 'platform', 'systemVersion', 'appName', 'appVersion', 'dateCreated', 'dateActive',\n      'ip', 'country', 'region',\n    ]),\n  };\n}\n\nexport function buildApiWebSession(session: GramJs.WebAuthorization): ApiWebSession {\n  return {\n    hash: String(session.hash),\n    botId: buildApiPeerId(session.botId, 'user'),\n    ...pick(session, [\n      'platform', 'browser', 'dateCreated', 'dateActive', 'ip', 'region', 'domain',\n    ]),\n  };\n}\n\nexport function buildPrivacyKey(key: GramJs.TypePrivacyKey): ApiPrivacyKey | undefined {\n  switch (key.className) {\n    case 'PrivacyKeyPhoneNumber':\n      return 'phoneNumber';\n    case 'PrivacyKeyAddedByPhone':\n      return 'addByPhone';\n    case 'PrivacyKeyStatusTimestamp':\n      return 'lastSeen';\n    case 'PrivacyKeyProfilePhoto':\n      return 'profilePhoto';\n    case 'PrivacyKeyPhoneCall':\n      return 'phoneCall';\n    case 'PrivacyKeyPhoneP2P':\n      return 'phoneP2P';\n    case 'PrivacyKeyForwards':\n      return 'forwards';\n    case 'PrivacyKeyVoiceMessages':\n      return 'voiceMessages';\n    case 'PrivacyKeyChatInvite':\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n\nexport function buildApiNotifyException(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n    muteUntil,\n  };\n}\n\nexport function buildApiNotifyExceptionTopic(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer, topicId: number,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    topicId,\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n    muteUntil,\n  };\n}\n\nfunction buildApiCountry(country: GramJs.help.Country, code: GramJs.help.CountryCode) {\n  const {\n    hidden, iso2, defaultName, name,\n  } = country;\n  const { countryCode, prefixes, patterns } = code || {};\n\n  return {\n    isHidden: hidden,\n    iso2,\n    defaultName,\n    name,\n    countryCode,\n    prefixes,\n    patterns,\n  };\n}\n\nexport function buildApiCountryList(countries: GramJs.help.Country[]) {\n  const nonHiddenCountries = countries.filter(({ hidden }) => !hidden);\n  const listByCode = nonHiddenCountries\n    .map((country) => (\n      country.countryCodes.map((code) => buildApiCountry(country, code))\n    ))\n    .flat()\n    .sort((a: ApiCountry, b: ApiCountry) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  const generalList = nonHiddenCountries\n    .map((country) => buildApiCountry(country, country.countryCodes[0]))\n    .sort((a, b) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  return {\n    phoneCodes: listByCode,\n    general: generalList,\n  };\n}\n\nexport function buildJson(json: GramJs.TypeJSONValue): any {\n  if (json instanceof GramJs.JsonNull) return undefined;\n  if (json instanceof GramJs.JsonString\n    || json instanceof GramJs.JsonBool\n    || json instanceof GramJs.JsonNumber) return json.value;\n  if (json instanceof GramJs.JsonArray) return json.value.map(buildJson);\n\n  return json.value.reduce((acc: Record<string, any>, el) => {\n    acc[el.key] = buildJson(el.value);\n    return acc;\n  }, {});\n}\n\nexport function buildApiUrlAuthResult(result: GramJs.TypeUrlAuthResult): ApiUrlAuthResult | undefined {\n  if (result instanceof GramJs.UrlAuthResultRequest) {\n    const { bot, domain, requestWriteAccess } = result;\n    const user = buildApiUser(bot);\n    if (!user) return undefined;\n\n    addUserToLocalDb(bot);\n\n    return {\n      type: 'request',\n      domain,\n      shouldRequestWriteAccess: requestWriteAccess,\n      bot: user,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultAccepted) {\n    return {\n      type: 'accepted',\n      url: result.url,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultDefault) {\n    return {\n      type: 'default',\n    };\n  }\n  return undefined;\n}\n\nexport function buildApiConfig(config: GramJs.Config): ApiConfig {\n  const defaultReaction = config.reactionsDefault && buildApiReaction(config.reactionsDefault);\n  return {\n    expiresAt: config.expires,\n    gifSearchUsername: config.gifSearchUsername,\n    defaultReaction,\n    maxGroupSize: config.chatSizeMax,\n    autologinToken: config.autologinToken,\n  };\n}\n\nexport function buildLangPack(mtpLangPack: GramJs.LangPackDifference) {\n  return mtpLangPack.strings.reduce<Record<string, ApiLangString | undefined>>((acc, mtpString) => {\n    acc[mtpString.key] = buildLangPackString(mtpString);\n    return acc;\n  }, {});\n}\n\nexport function buildLangPackString(mtpString: GramJs.TypeLangPackString) {\n  return mtpString instanceof GramJs.LangPackString\n    ? mtpString.value\n    : mtpString instanceof GramJs.LangPackStringPluralized\n      ? omit(omitVirtualClassFields(mtpString), ['key'])\n      : undefined;\n}\n\nfunction buildApiPeerColorSet(colorSet: GramJs.help.TypePeerColorSet) {\n  if (colorSet instanceof GramJs.help.PeerColorSet) {\n    return colorSet.colors.map((color) => `#${color.toString(16).padStart(6, '0')}`);\n  }\n  return undefined;\n}\n\nexport function buildApiPeerColors(wrapper: GramJs.help.TypePeerColors): ApiPeerColors['general'] | undefined {\n  if (!(wrapper instanceof GramJs.help.PeerColors)) return undefined;\n\n  return buildCollectionByCallback(wrapper.colors, (color) => {\n    return [color.colorId, {\n      isHidden: color.hidden,\n      colors: color.colors && buildApiPeerColorSet(color.colors),\n      darkColors: color.darkColors && buildApiPeerColorSet(color.darkColors),\n    }];\n  });\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiMediaArea,\n  ApiMediaAreaCoordinates,\n  ApiStealthMode,\n  ApiStory,\n  ApiStoryForwardInfo,\n  ApiStoryView,\n  ApiStoryViews,\n  ApiTypeStory,\n  ApiTypeStoryView,\n  MediaContent,\n} from '../../types';\n\nimport { buildCollectionByCallback, omitUndefined } from '../../../util/iteratees';\nimport { buildPrivacyRules } from './common';\nimport { buildGeoPoint, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiMessage } from './messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildApiReaction, buildReactionCount } from './reactions';\n\nexport function buildApiStory(peerId: string, story: GramJs.TypeStoryItem): ApiTypeStory {\n  if (story instanceof GramJs.StoryItemDeleted) {\n    return {\n      id: story.id,\n      peerId,\n      isDeleted: true,\n    };\n  }\n\n  if (story instanceof GramJs.StoryItemSkipped) {\n    const {\n      id, date, expireDate, closeFriends,\n    } = story;\n\n    return {\n      id,\n      peerId,\n      ...(closeFriends && { isForCloseFriends: true }),\n      date,\n      expireDate,\n    };\n  }\n\n  const {\n    edited, pinned, expireDate, id, date, caption,\n    entities, media, privacy, views,\n    public: isPublic, noforwards, closeFriends, contacts, selectedContacts,\n    mediaAreas, sentReaction, out, fwdFrom, fromId,\n  } = story;\n\n  const content: MediaContent = {\n    ...buildMessageMediaContent(media),\n  };\n\n  if (caption) {\n    content.text = buildMessageTextContent(caption, entities);\n  }\n\n  return omitUndefined<ApiStory>({\n    id,\n    peerId,\n    date,\n    expireDate,\n    content,\n    isPublic,\n    isEdited: edited,\n    isPinned: pinned,\n    isForContacts: contacts,\n    isForSelectedContacts: selectedContacts,\n    isForCloseFriends: closeFriends,\n    noForwards: noforwards,\n    views: views && buildApiStoryViews(views),\n    isOut: out,\n    visibility: privacy && buildPrivacyRules(privacy),\n    mediaAreas: mediaAreas?.map(buildApiMediaArea).filter(Boolean),\n    sentReaction: sentReaction && buildApiReaction(sentReaction),\n    forwardInfo: fwdFrom && buildApiStoryForwardInfo(fwdFrom),\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n  });\n}\n\nexport function buildApiStoryViews(views: GramJs.TypeStoryViews): ApiStoryViews {\n  return omitUndefined<ApiStoryViews>({\n    hasViewers: views.hasViewers,\n    viewsCount: views.viewsCount,\n    forwardsCount: views.forwardsCount,\n    reactionsCount: views.reactionsCount,\n    reactions: views.reactions?.map(buildReactionCount).filter(Boolean),\n    recentViewerIds: views.recentViewers?.map((viewerId) => buildApiPeerId(viewerId, 'user')),\n  });\n}\n\nexport function buildApiStoryView(view: GramJs.TypeStoryView): ApiTypeStoryView | undefined {\n  const {\n    blockedMyStoriesFrom, blocked,\n  } = view;\n\n  if (view instanceof GramJs.StoryView) {\n    return omitUndefined<ApiStoryView>({\n      type: 'user',\n      peerId: buildApiPeerId(view.userId, 'user'),\n      date: view.date,\n      reaction: view.reaction && buildApiReaction(view.reaction),\n      areStoriesBlocked: blocked || blockedMyStoriesFrom,\n      isUserBlocked: blocked,\n    });\n  }\n\n  if (view instanceof GramJs.StoryViewPublicForward) {\n    const message = buildApiMessage(view.message);\n    if (!message) return undefined;\n    return {\n      type: 'forward',\n      peerId: message.chatId,\n      messageId: message.id,\n      message,\n      date: message.date,\n      areStoriesBlocked: blocked || blockedMyStoriesFrom,\n      isUserBlocked: blocked,\n    };\n  }\n\n  if (view instanceof GramJs.StoryViewPublicRepost) {\n    const peerId = getApiChatIdFromMtpPeer(view.peerId);\n    const story = buildApiStory(peerId, view.story);\n    if (!('content' in story)) return undefined;\n\n    return {\n      type: 'repost',\n      peerId,\n      storyId: view.story.id,\n      date: story.date,\n      story,\n      areStoriesBlocked: blocked || blockedMyStoriesFrom,\n      isUserBlocked: blocked,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiStealthMode(stealthMode: GramJs.TypeStoriesStealthMode): ApiStealthMode {\n  return {\n    activeUntil: stealthMode.activeUntilDate,\n    cooldownUntil: stealthMode.cooldownUntilDate,\n  };\n}\n\nfunction buildApiMediaAreaCoordinates(coordinates: GramJs.TypeMediaAreaCoordinates): ApiMediaAreaCoordinates {\n  const {\n    x, y, w, h, rotation,\n  } = coordinates;\n\n  return {\n    x,\n    y,\n    width: w,\n    height: h,\n    rotation,\n  };\n}\n\nexport function buildApiMediaArea(area: GramJs.TypeMediaArea): ApiMediaArea | undefined {\n  if (area instanceof GramJs.MediaAreaVenue) {\n    const { geo, title, coordinates } = area;\n    const point = buildGeoPoint(geo);\n\n    if (!point) return undefined;\n\n    return {\n      type: 'venue',\n      coordinates: buildApiMediaAreaCoordinates(coordinates),\n      geo: point,\n      title,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaGeoPoint) {\n    const { geo, coordinates } = area;\n    const point = buildGeoPoint(geo);\n\n    if (!point) return undefined;\n\n    return {\n      type: 'geoPoint',\n      coordinates: buildApiMediaAreaCoordinates(coordinates),\n      geo: point,\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaSuggestedReaction) {\n    const {\n      coordinates, reaction, dark, flipped,\n    } = area;\n\n    const apiReaction = buildApiReaction(reaction);\n    if (!apiReaction) return undefined;\n\n    return {\n      type: 'suggestedReaction',\n      coordinates: buildApiMediaAreaCoordinates(coordinates),\n      reaction: apiReaction,\n      ...(dark && { isDark: true }),\n      ...(flipped && { isFlipped: true }),\n    };\n  }\n\n  if (area instanceof GramJs.MediaAreaChannelPost) {\n    const { coordinates, channelId, msgId } = area;\n\n    return {\n      type: 'channelPost',\n      coordinates: buildApiMediaAreaCoordinates(coordinates),\n      channelId: buildApiPeerId(channelId, 'channel'),\n      messageId: msgId,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiPeerStories(peerStories: GramJs.PeerStories) {\n  const peerId = getApiChatIdFromMtpPeer(peerStories.peer);\n\n  return buildCollectionByCallback(peerStories.stories, (story) => [story.id, buildApiStory(peerId, story)]);\n}\n\nexport function buildApiStoryForwardInfo(forwardHeader: GramJs.TypeStoryFwdHeader): ApiStoryForwardInfo {\n  const {\n    from, fromName, storyId, modified,\n  } = forwardHeader;\n\n  return {\n    storyId,\n    fromPeerId: from && getApiChatIdFromMtpPeer(from),\n    fromName,\n    isModified: modified,\n  };\n}\n","import type { OnApiUpdate } from '../types';\n\nimport { MAX_INT_32 } from '../../config';\nimport { getServerTime } from '../../util/serverTime';\n\ntype UnmuteQueueItem = { chatId: string; topicId?: number; muteUntil: number };\nconst unmuteTimers = new Map<string, any>();\nconst unmuteQueue: Array<UnmuteQueueItem> = [];\nconst scheduleUnmute = (item: UnmuteQueueItem, onUpdate: NoneToVoidFunction) => {\n  const id = item.topicId ? `${item.chatId}-${item.topicId}` : item.chatId;\n  if (unmuteTimers.has(id)) {\n    clearTimeout(unmuteTimers.get(id));\n    unmuteTimers.delete(id);\n  }\n  if (item.muteUntil === MAX_INT_32 || item.muteUntil <= getServerTime()) return;\n  unmuteQueue.push(item);\n  unmuteQueue.sort((a, b) => b.muteUntil - a.muteUntil);\n  const next = unmuteQueue.pop();\n  if (!next) return;\n  const timer = setTimeout(() => {\n    onUpdate();\n    if (unmuteQueue.length) {\n      const afterNext = unmuteQueue.pop();\n      if (afterNext) scheduleUnmute(afterNext, onUpdate);\n    }\n  }, (item.muteUntil - getServerTime()) * 1000);\n  unmuteTimers.set(id, timer);\n};\n\nexport function scheduleMutedChatUpdate(chatId: string, muteUntil = 0, onUpdate: OnApiUpdate) {\n  scheduleUnmute({\n    chatId,\n    muteUntil,\n  }, () => onUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId,\n    isMuted: false,\n  }));\n}\n\nexport function scheduleMutedTopicUpdate(chatId: string, topicId: number, muteUntil = 0, onUpdate: OnApiUpdate) {\n  scheduleUnmute({\n    chatId,\n    topicId,\n    muteUntil,\n  }, () => onUpdate({\n    '@type': 'updateTopicNotifyExceptions',\n    chatId,\n    topicId,\n    isMuted: false,\n  }));\n}\n","/* eslint-disable max-classes-per-file */\nimport type { BigInteger } from 'big-integer';\n\nexport class LocalUpdatePts {\n  constructor(public pts: number, public ptsCount: number) {}\n}\n\nexport class LocalUpdateChannelPts {\n  constructor(public channelId: BigInteger, public pts: number, public ptsCount: number) {}\n}\n\nexport type UpdatePts = LocalUpdatePts | LocalUpdateChannelPts;\n\nexport function buildLocalUpdatePts(pts: number, ptsCount: number, channelId?: BigInteger) {\n  return channelId ? new LocalUpdateChannelPts(channelId, pts, ptsCount) : new LocalUpdatePts(pts, ptsCount);\n}\n","import { Api as GramJs, connection } from '../../../lib/gramjs';\n\nimport type { GroupCallConnectionData } from '../../../lib/secret-sauce';\nimport type {\n  ApiMessage, ApiMessageExtendedMediaPreview, ApiStory, ApiStorySkipped,\n  ApiUpdate, ApiUpdateConnectionStateType, MediaContent, OnApiUpdate,\n} from '../../types';\n\nimport { DEBUG, GENERAL_TOPIC_ID } from '../../../config';\nimport { compact, omit, pick } from '../../../util/iteratees';\nimport { getServerTimeOffset, setServerTimeOffset } from '../../../util/serverTime';\nimport { buildApiBotMenuButton } from '../apiBuilders/bots';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from '../apiBuilders/calls';\nimport {\n  buildApiChatFolder,\n  buildApiChatFromPreview,\n  buildApiChatSettings,\n  buildAvatarHash,\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n} from '../apiBuilders/chats';\nimport { buildApiPhoto, buildApiUsernames, buildPrivacyRules } from '../apiBuilders/common';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport {\n  buildApiMessageExtendedMediaPreview,\n  buildMessageMediaContent,\n  buildPoll,\n  buildPollResults,\n} from '../apiBuilders/messageContent';\nimport {\n  buildApiMessage,\n  buildApiMessageFromNotification,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildApiThreadInfoFromMessage,\n  buildMessageDraft,\n} from '../apiBuilders/messages';\nimport {\n  buildApiNotifyException,\n  buildApiNotifyExceptionTopic,\n  buildPrivacyKey,\n} from '../apiBuilders/misc';\nimport { buildApiEmojiStatus, buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport {\n  buildApiReaction,\n  buildMessageReactions,\n} from '../apiBuilders/reactions';\nimport { buildApiStealthMode, buildApiStory } from '../apiBuilders/stories';\nimport { buildApiEmojiInteraction, buildStickerSet } from '../apiBuilders/symbols';\nimport {\n  buildApiUser,\n  buildApiUserStatus,\n} from '../apiBuilders/users';\nimport {\n  buildChatPhotoForLocalDb,\n  buildMessageFromUpdate,\n  isMessageWithMedia,\n} from '../gramjsBuilders';\nimport {\n  addEntitiesToLocalDb,\n  addMessageToLocalDb,\n  addPhotoToLocalDb,\n  addStoryToLocalDb,\n  isChatFolder,\n  log,\n  resolveMessageApiChatId,\n  serializeBytes,\n  swapLocalInvoiceMedia,\n} from '../helpers';\nimport localDb from '../localDb';\nimport { scheduleMutedChatUpdate, scheduleMutedTopicUpdate } from '../scheduleUnmute';\n\nimport { LocalUpdateChannelPts, LocalUpdatePts, type UpdatePts } from './UpdatePts';\n\nexport type Update = (\n  (GramJs.TypeUpdate | GramJs.TypeUpdates) & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] }\n) | typeof connection.UpdateConnectionState | UpdatePts;\n\nconst DELETE_MISSING_CHANNEL_MESSAGE_DELAY = 1000;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nconst sentMessageIds = new Set();\n\nexport function dispatchUserAndChatUpdates(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities\n    .filter((e) => e instanceof GramJs.User)\n    .map(buildApiUser)\n    .forEach((user) => {\n      if (!user) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateUser',\n        id: user.id,\n        user,\n      });\n    });\n\n  entities\n    .filter((e) => (\n      e instanceof GramJs.Chat || e instanceof GramJs.ChatForbidden\n      || e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ))\n    .map((e) => buildApiChatFromPreview(e))\n    .forEach((chat) => {\n      if (!chat) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    });\n}\n\nexport function dispatchThreadInfoUpdates(messages: (GramJs.TypeMessage | undefined)[]) {\n  const threadInfoUpdates = compact(messages).map(buildApiThreadInfoFromMessage).filter(Boolean);\n  if (!threadInfoUpdates.length) return;\n\n  onUpdate({\n    '@type': 'updateThreadInfos',\n    threadInfoUpdates,\n  });\n}\n\nexport function sendUpdate(update: ApiUpdate) {\n  onUpdate(update);\n}\n\nexport function updater(update: Update) {\n  if (update instanceof connection.UpdateServerTimeOffset) {\n    setServerTimeOffset(update.timeOffset);\n\n    onUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  } else if (update instanceof connection.UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case connection.UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case connection.UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case connection.UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      // TODO Remove if proven not reproducing\n      if (update.message instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      if ((update.message instanceof GramJs.Message && isMessageWithMedia(update.message))\n      || (update.message instanceof GramJs.MessageService\n          && update.message.action instanceof GramJs.MessageActionSuggestProfilePhoto)\n      ) {\n        addMessageToLocalDb(update.message);\n      }\n\n      message = buildApiMessage(update.message)!;\n      dispatchThreadInfoUpdates([update.message]);\n\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n      });\n    } else {\n      // We don't have preview for action or 'via bot' messages, so `newMessage` update here is required\n      const hasLocalCopy = sentMessageIds.has(message.id) && !message.viaBotId && !message.content.action;\n      onUpdate({\n        '@type': hasLocalCopy ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionPaymentSent) {\n        onUpdate({\n          '@type': 'updatePaymentStateCompleted',\n          slug: action.invoiceSlug,\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const photo = buildChatPhotoForLocalDb(action.photo);\n        const avatarHash = buildAvatarHash(photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        if (avatarHash) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              avatarHash,\n            },\n            ...(action.photo instanceof GramJs.Photo && { newProfilePhoto: buildApiPhoto(action.photo) }),\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: { avatarHash: undefined },\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          onUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          onUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionTopicEdit) {\n        const replyTo = update.message.replyTo instanceof GramJs.MessageReplyHeader\n          ? update.message.replyTo\n          : undefined;\n        const {\n          replyToMsgId, replyToTopId, forumTopic: isTopicReply,\n        } = replyTo || {};\n        const topicId = !isTopicReply ? GENERAL_TOPIC_ID : replyToTopId || replyToMsgId || GENERAL_TOPIC_ID;\n\n        onUpdate({\n          '@type': 'updateTopic',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n          topicId,\n        });\n      } else if (action instanceof GramJs.MessageActionTopicCreate) {\n        onUpdate({\n          '@type': 'updateTopics',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n        });\n      }\n    }\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    // TODO Remove if proven not reproducing\n    if (update.message instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n      addMessageToLocalDb(update.message);\n    }\n\n    // Workaround for a weird server behavior when own message is marked as incoming\n    const message = omit(buildApiMessage(update.message)!, ['isOutgoing']);\n    dispatchThreadInfoUpdates([update.message]);\n\n    onUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    onUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateMessageExtendedMedia) {\n    let media: MediaContent | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n      media = buildMessageMediaContent(update.extendedMedia.media);\n    }\n\n    let preview: ApiMessageExtendedMediaPreview | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n      preview = buildApiMessageExtendedMediaPreview(update.extendedMedia);\n    }\n\n    if (!media && !preview) return;\n\n    const chatId = getApiChatIdFromMtpPeer(update.peer);\n\n    swapLocalInvoiceMedia(chatId, update.msgId, update.extendedMedia);\n\n    onUpdate({\n      '@type': 'updateMessageExtendedMedia',\n      id: update.msgId,\n      chatId,\n      media,\n      preview,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    onUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    onUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n    const ids = update.messages;\n    const existingIds = ids.filter((id) => localDb.messages[`${chatId}-${id}`]);\n    const missingIds = ids.filter((id) => !localDb.messages[`${chatId}-${id}`]);\n    const profilePhotoIds = ids.map((id) => {\n      const message = localDb.messages[`${chatId}-${id}`];\n\n      return message && message instanceof GramJs.MessageService && 'photo' in message.action\n        ? String(message.action.photo.id)\n        : undefined;\n    }).filter(Boolean);\n\n    if (existingIds.length) {\n      onUpdate({\n        '@type': 'deleteMessages',\n        ids: existingIds,\n        chatId,\n      });\n    }\n\n    if (profilePhotoIds.length) {\n      onUpdate({\n        '@type': 'deleteProfilePhotos',\n        ids: profilePhotoIds,\n        chatId,\n      });\n    }\n\n    // For some reason delete message update sometimes comes before new message update\n    if (missingIds.length) {\n      setTimeout(() => {\n        onUpdate({\n          '@type': 'deleteMessages',\n          ids: missingIds,\n          chatId,\n        });\n      }, DELETE_MISSING_CHANNEL_MESSAGE_DELAY);\n    }\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + getServerTimeOffset();\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      if (isMessageWithMedia(update)) {\n        addMessageToLocalDb(buildMessageFromUpdate(message.id, message.chatId, update));\n      }\n\n      onUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage) {\n    sentMessageIds.add(update.id);\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    onUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      peerId: getApiChatIdFromMtpPeer(update.peer),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    onUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { viewsCount: update.views },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    onUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionInbox) {\n    onUpdate({\n      '@type': 'updateThreadInfos',\n      threadInfoUpdates: [{\n        chatId: buildApiPeerId(update.channelId, 'channel'),\n        threadId: update.topMsgId,\n        lastReadInboxMessageId: update.readMaxId,\n      }],\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (\n    update instanceof GramJs.UpdateSavedDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateSavedDialogPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedSavedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedSavedDialogIds',\n      ids,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      onUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = isChatFolder(filter) ? buildApiChatFolder(filter) : undefined;\n\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    onUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    const payload = buildApiNotifyException(update.notifySettings, update.peer.peer);\n    scheduleMutedChatUpdate(payload.chatId, payload.muteUntil, onUpdate);\n    onUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...payload,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyForumTopic\n  ) {\n    const payload = buildApiNotifyExceptionTopic(\n      update.notifySettings, update.peer.peer, update.peer.topMsgId,\n    );\n    scheduleMutedTopicUpdate(payload.chatId, payload.topicId, payload.muteUntil, onUpdate);\n    onUpdate({\n      '@type': 'updateTopicNotifyExceptions',\n      ...payload,\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      onUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      threadId: update.topMsgId,\n      typingStatus: buildChatTypingStatus(update),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        onUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      onUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      onUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    onUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUser) {\n    onUpdate({\n      '@type': 'updateRequestUserUpdate',\n      id: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (update instanceof GramJs.UpdateUserEmojiStatus) {\n    const emojiStatus = buildApiEmojiStatus(update.emojiStatus);\n    onUpdate({\n      '@type': 'updateUserEmojiStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      emojiStatus,\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, [])\n      : pick(update, ['firstName', 'lastName']);\n\n    const usernames = buildApiUsernames(update);\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: {\n        ...user,\n        usernames,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          onUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          onUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    onUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + getServerTimeOffset() * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    onUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n      isBlockedFromStories: update.blockedMyStoriesFrom,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      onUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    onUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      threadId: update.topMsgId,\n      draft: buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    onUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    onUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    onUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateRecentReactions) {\n    onUpdate({ '@type': 'updateRecentReactions' });\n  } else if (update instanceof GramJs.UpdateSavedReactionTags) {\n    onUpdate({ '@type': 'updateSavedReactionTags' });\n  } else if (update instanceof GramJs.UpdateMoveStickerSetToTop) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateMoveStickerSetToTop',\n        isCustomEmoji: update.emojis,\n        id: update.stickerset.toString(),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    onUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateStickerSetsOrder',\n        order: update.order.map((n) => n.toString()),\n        isCustomEmoji: update.emojis,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      onUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    onUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    onUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    onUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    onUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    onUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n    onUpdate({ '@type': 'updateConfig' });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopic) {\n    onUpdate({\n      '@type': 'updatePinnedTopic',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      topicId: update.topicId,\n      isPinned: Boolean(update.pinned),\n    });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopics) {\n    onUpdate({\n      '@type': 'updatePinnedTopicsOrder',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      order: update.order || [],\n    });\n  } else if (update instanceof GramJs.UpdateRecentEmojiStatuses) {\n    onUpdate({ '@type': 'updateRecentEmojiStatuses' });\n  } else if (update instanceof GramJs.UpdateStory) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    const { story } = update;\n    const peerId = getApiChatIdFromMtpPeer(update.peer);\n    addStoryToLocalDb(story, peerId);\n\n    if (story instanceof GramJs.StoryItemDeleted) {\n      onUpdate({\n        '@type': 'deleteStory',\n        peerId,\n        storyId: story.id,\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateStory',\n        peerId,\n        story: buildApiStory(peerId, story) as ApiStory | ApiStorySkipped,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateReadStories) {\n    onUpdate({\n      '@type': 'updateReadStories',\n      peerId: getApiChatIdFromMtpPeer(update.peer),\n      lastReadId: update.maxId,\n    });\n  } else if (update instanceof GramJs.UpdateSentStoryReaction) {\n    onUpdate({\n      '@type': 'updateSentStoryReaction',\n      peerId: getApiChatIdFromMtpPeer(update.peer),\n      storyId: update.storyId,\n      reaction: buildApiReaction(update.reaction),\n    });\n  } else if (update instanceof GramJs.UpdateStoriesStealthMode) {\n    onUpdate({\n      '@type': 'updateStealthMode',\n      stealthMode: buildApiStealthMode(update.stealthMode),\n    });\n  } else if (update instanceof GramJs.UpdateAttachMenuBots) {\n    onUpdate({\n      '@type': 'updateAttachMenuBots',\n    });\n  } else if (update instanceof GramJs.UpdateNewAuthorization) {\n    onUpdate({\n      '@type': 'updateNewAuthorization',\n      hash: update.hash.toString(),\n      date: update.date,\n      device: update.device,\n      location: update.location,\n      isUnconfirmed: update.unconfirmed,\n    });\n  } else if (update instanceof GramJs.UpdateChannelViewForumAsMessages) {\n    onUpdate({\n      '@type': 'updateViewForumAsMessages',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      isEnabled: update.enabled ? true : undefined,\n    });\n  } else if (update instanceof LocalUpdatePts || update instanceof LocalUpdateChannelPts) {\n    // Do nothing, handled on the manager side\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    log('UNEXPECTED UPDATE', params);\n  }\n}\n","import { errors } from '../../../lib/gramjs';\n\nimport type {\n  ApiUpdateAuthorizationState,\n  ApiUpdateAuthorizationStateType,\n  ApiUser,\n  ApiUserFullInfo,\n  OnApiUpdate,\n} from '../../types';\n\nimport { DEBUG } from '../../../config';\n\nconst ApiErrors: { [k: string]: string } = {\n  PHONE_NUMBER_INVALID: 'Invalid phone number.',\n  PHONE_CODE_INVALID: 'Invalid code.',\n  PASSWORD_HASH_INVALID: 'Incorrect password.',\n  PHONE_PASSWORD_FLOOD: 'Limit exceeded. Please try again later.',\n  PHONE_NUMBER_BANNED: 'This phone number is banned.',\n};\n\nconst authController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport function onWebAuthTokenFailed() {\n  onUpdate({\n    '@type': 'updateWebAuthTokenFailed',\n  });\n}\n\nexport function onRequestPhoneNumber() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitPhoneNumber'));\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestCode(isCodeViaApp = false) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitCode'),\n    isCodeViaApp,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestPassword(hint?: string, noReset?: boolean) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitPassword'),\n    hint,\n    noReset,\n  });\n\n  return new Promise<string>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestRegistration() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitRegistration'));\n\n  return new Promise<[string, string?]>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestQrCode(qrCode: { token: Buffer; expires: number }) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitQrCode'),\n    qrCode: {\n      token: btoa(String.fromCharCode(...qrCode.token)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''),\n      expires: qrCode.expires,\n    },\n  });\n\n  return new Promise<void>((resolve, reject) => {\n    authController.reject = reject;\n  });\n}\n\nexport function onAuthError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateAuthorizationError',\n    message,\n  });\n}\n\nexport function onAuthReady() {\n  onUpdate(buildAuthStateUpdate('authorizationStateReady'));\n}\n\nexport function onCurrentUserUpdate(currentUser: ApiUser, currentUserFullInfo: ApiUserFullInfo) {\n  onUpdate({\n    '@type': 'updateCurrentUser',\n    currentUser,\n    currentUserFullInfo,\n  });\n}\n\nexport function buildAuthStateUpdate(authorizationState: ApiUpdateAuthorizationStateType): ApiUpdateAuthorizationState {\n  return {\n    '@type': 'updateAuthorizationState',\n    authorizationState,\n  };\n}\n\nexport function provideAuthPhoneNumber(phoneNumber: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(phoneNumber);\n}\n\nexport function provideAuthCode(code: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(code);\n}\n\nexport function provideAuthPassword(password: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(password);\n}\n\nexport function provideAuthRegistration(registration: { firstName: string; lastName: string }) {\n  const { firstName, lastName } = registration;\n\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve([firstName, lastName]);\n}\n\nexport function restartAuth() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH'));\n}\n\nexport function restartAuthWithQr() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH_WITH_QR'));\n}\n","export default class SortedQueue<T> {\n  private queue: T[];\n\n  constructor(private comparator: (a: T, b: T) => number) {\n    this.queue = [];\n  }\n\n  add(item: T): void {\n    const index = this.binarySearch(item);\n    this.queue.splice(index, 0, item);\n  }\n\n  pop(): T | undefined {\n    return this.queue.shift();\n  }\n\n  get size(): number {\n    return this.queue.length;\n  }\n\n  clear(): void {\n    this.queue = [];\n  }\n\n  private binarySearch(item: T): number {\n    let left = 0;\n    let right = this.queue.length;\n\n    while (left < right) {\n      const middle = Math.floor((left + right) / 2);\n      const comparison = this.comparator(item, this.queue[middle]);\n\n      if (comparison === 0) {\n        return middle;\n      } else if (comparison > 0) {\n        left = middle + 1;\n      } else {\n        right = middle;\n      }\n    }\n\n    return left;\n  }\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport { UpdateConnectionState, UpdateServerTimeOffset } from '../../../lib/gramjs/network';\n\nimport type { ApiChat } from '../../types';\nimport type { invokeRequest } from '../methods/client';\nimport type { Update } from './updater';\n\nimport { DEBUG } from '../../../config';\nimport SortedQueue from '../../../util/SortedQueue';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport { buildInputEntity, buildMtpPeerId } from '../gramjsBuilders';\nimport { addEntitiesToLocalDb } from '../helpers';\nimport localDb from '../localDb';\nimport { dispatchUserAndChatUpdates, sendUpdate, updater } from './updater';\n\nimport { buildLocalUpdatePts, type UpdatePts } from './UpdatePts';\n\nexport type State = {\n  seq: number;\n  date: number;\n  pts: number;\n  qts: number;\n};\ntype SeqUpdate = (GramJs.Updates | GramJs.UpdatesCombined) & { _isFromDifference?: true };\ntype PtsUpdate = ((GramJs.TypeUpdate & { pts: number }) | UpdatePts) & { _isFromDifference?: true };\n\nconst COMMON_BOX_QUEUE_ID = '0';\nconst CHANNEL_DIFFERENCE_LIMIT = 1000;\nconst UPDATE_WAIT_TIMEOUT = 500;\n\nlet invoke: typeof invokeRequest;\nlet isInited = false;\n\nlet seqTimeout: ReturnType<typeof setTimeout> | undefined;\nconst PTS_TIMEOUTS = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst SEQ_QUEUE = new SortedQueue<SeqUpdate>(seqComparator);\nconst PTS_QUEUE = new Map<string, SortedQueue<PtsUpdate>>();\n\nexport async function init(invokeReq: typeof invokeRequest) {\n  invoke = invokeReq;\n\n  await loadRemoteState();\n  isInited = true;\n\n  scheduleGetDifference();\n}\n\nexport function applyState(state: State) {\n  localDb.commonBoxState.seq = state.seq;\n  localDb.commonBoxState.date = state.date;\n  localDb.commonBoxState.pts = state.pts;\n  localDb.commonBoxState.qts = state.qts;\n}\n\nexport function processUpdate(update: Update, isFromDifference?: boolean, shouldOnlySave?: boolean) {\n  if (update instanceof UpdateConnectionState) {\n    if (update.state === UpdateConnectionState.connected && isInited) {\n      scheduleGetDifference();\n    }\n\n    updater(update);\n    return;\n  }\n\n  if (update instanceof UpdateServerTimeOffset) {\n    updater(update);\n    return;\n  }\n\n  if (localDb.commonBoxState.seq === undefined) {\n    // Drop updates received before first sync\n    return;\n  }\n\n  if (update instanceof GramJs.Updates || update instanceof GramJs.UpdatesCombined) {\n    if (isFromDifference) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as SeqUpdate)._isFromDifference = true;\n    }\n\n    saveSeqUpdate(update, shouldOnlySave);\n    return;\n  }\n\n  if ('pts' in update) {\n    if (update instanceof GramJs.UpdateChannelTooLong) {\n      getChannelDifference(getUpdateChannelId(update));\n      return;\n    }\n    if (isFromDifference) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as PtsUpdate)._isFromDifference = true;\n    }\n    savePtsUpdate(update, shouldOnlySave);\n    return;\n  }\n\n  updater(update);\n}\n\nexport function updateChannelState(channelId: string, pts: number) {\n  const channel = localDb.chats[channelId];\n  if (!(channel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(`[UpdateManager] Channel ${channelId} not found in localDb`);\n    }\n    return;\n  }\n\n  const currentState = localDb.channelPtsById[channelId];\n\n  if (currentState && currentState < pts) {\n    scheduleGetChannelDifference(channelId);\n    return;\n  }\n\n  localDb.channelPtsById[channelId] = pts;\n}\n\nfunction applyUpdate(updateObject: SeqUpdate | PtsUpdate) {\n  if ('seq' in updateObject && updateObject.seq) {\n    localDb.commonBoxState.seq = updateObject.seq;\n    localDb.commonBoxState.date = updateObject.date;\n  }\n\n  if ('qts' in updateObject) {\n    localDb.commonBoxState.qts = updateObject.qts;\n  }\n\n  if ('pts' in updateObject) {\n    const channelId = getUpdateChannelId(updateObject);\n    if (channelId !== COMMON_BOX_QUEUE_ID) {\n      localDb.channelPtsById[channelId] = updateObject.pts;\n    } else {\n      localDb.commonBoxState.pts = updateObject.pts;\n    }\n  }\n\n  if (updateObject instanceof GramJs.UpdatesCombined || updateObject instanceof GramJs.Updates) {\n    const entities = updateObject.users.concat(updateObject.chats);\n\n    updateObject.updates.forEach((update) => {\n      if (entities) {\n        // eslint-disable-next-line no-underscore-dangle\n        (update as any)._entities = entities;\n      }\n\n      processUpdate(update);\n    });\n  } else {\n    updater(updateObject);\n  }\n}\n\nfunction saveSeqUpdate(update: GramJs.Updates | GramJs.UpdatesCombined, shouldOnlySave?: boolean) {\n  SEQ_QUEUE.add(update);\n\n  if (!shouldOnlySave) popSeqQueue();\n}\n\nfunction savePtsUpdate(update: PtsUpdate, shouldOnlySave?: boolean) {\n  const channelId = getUpdateChannelId(update);\n\n  const ptsQueue = PTS_QUEUE.get(channelId) || new SortedQueue<PtsUpdate>(ptsComparator);\n  ptsQueue.add(update);\n\n  PTS_QUEUE.set(channelId, ptsQueue);\n\n  if (!shouldOnlySave) popPtsQueue(channelId);\n}\n\nfunction popSeqQueue() {\n  if (!SEQ_QUEUE.size) return;\n\n  const update = SEQ_QUEUE.pop()!;\n  const localSeq = localDb.commonBoxState.seq;\n  const seqStart = 'seqStart' in update ? update.seqStart : update.seq;\n\n  // eslint-disable-next-line no-underscore-dangle\n  if (seqStart === 0 || (update._isFromDifference && seqStart >= localSeq + 1)) {\n    applyUpdate(update);\n  } else if (seqStart === localSeq + 1) {\n    clearTimeout(seqTimeout);\n    seqTimeout = undefined;\n\n    applyUpdate(update);\n  } else if (seqStart > localSeq + 1) {\n    SEQ_QUEUE.add(update); // Return update to queue\n    scheduleGetDifference();\n    return; // Prevent endless loop\n  }\n\n  popSeqQueue();\n}\n\nfunction popPtsQueue(channelId: string) {\n  const ptsQueue = PTS_QUEUE.get(channelId);\n  if (!ptsQueue?.size) return;\n\n  const update = ptsQueue.pop()!;\n  const localPts = channelId === COMMON_BOX_QUEUE_ID ? localDb.commonBoxState.pts : localDb.channelPtsById[channelId];\n  const pts = update.pts;\n  const ptsCount = getPtsCount(update);\n\n  // Sometimes server sends updates for channels that are opened in other clients. We ignore them\n  if (localPts === undefined) {\n    if (DEBUG) {\n      // Uncomment to debug missing updates\n      // eslint-disable-next-line no-console\n      // console.error('[UpdateManager] Got pts update without local state', channelId);\n    }\n    return;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  if (update._isFromDifference && pts >= localPts + ptsCount) {\n    applyUpdate(update);\n  } else if (pts === localPts + ptsCount) {\n    clearTimeout(PTS_TIMEOUTS.get(channelId));\n    PTS_TIMEOUTS.delete(channelId);\n\n    applyUpdate(update);\n  } else if (pts > localPts + ptsCount) {\n    ptsQueue.add(update); // Return update to queue\n    if (channelId === COMMON_BOX_QUEUE_ID) {\n      scheduleGetDifference();\n    } else {\n      scheduleGetChannelDifference(channelId);\n    }\n    return; // Prevent endless loop\n  }\n\n  popPtsQueue(channelId);\n}\n\nexport function scheduleGetChannelDifference(channelId: string) {\n  if (PTS_TIMEOUTS.has(channelId)) return;\n\n  const timeout = setTimeout(async () => {\n    await getChannelDifference(channelId);\n    PTS_TIMEOUTS.delete(channelId);\n  }, UPDATE_WAIT_TIMEOUT);\n  PTS_TIMEOUTS.set(channelId, timeout);\n}\n\nfunction scheduleGetDifference() {\n  if (seqTimeout) return;\n\n  seqTimeout = setTimeout(async () => {\n    await getDifference();\n    seqTimeout = undefined;\n  }, UPDATE_WAIT_TIMEOUT);\n}\n\nfunction getUpdateChannelId(update: Update) {\n  if ('channelId' in update && 'pts' in update) {\n    return buildApiPeerId(update.channelId, 'channel');\n  }\n\n  if (update instanceof GramJs.UpdateNewChannelMessage || update instanceof GramJs.UpdateEditChannelMessage) {\n    const peer = update.message.peerId as GramJs.PeerChannel;\n    return buildApiPeerId(peer.channelId, 'channel');\n  }\n\n  return COMMON_BOX_QUEUE_ID;\n}\n\nexport async function getDifference() {\n  if (!isInited) {\n    throw new Error('UpdatesManager not initialized');\n  }\n\n  if (!localDb.commonBoxState?.date) {\n    forceSync();\n    return;\n  }\n\n  sendUpdate({\n    '@type': 'updateFetchingDifference',\n    isFetching: true,\n  });\n\n  const response = await invoke(new GramJs.updates.GetDifference({\n    pts: localDb.commonBoxState.pts,\n    date: localDb.commonBoxState.date,\n    qts: localDb.commonBoxState.qts,\n  }));\n\n  if (!response || response instanceof GramJs.updates.DifferenceTooLong) {\n    forceSync();\n    return;\n  }\n\n  if (response instanceof GramJs.updates.DifferenceEmpty) {\n    localDb.commonBoxState.seq = response.seq;\n    localDb.commonBoxState.date = response.date;\n    sendUpdate({\n      '@type': 'updateFetchingDifference',\n      isFetching: false,\n    });\n    return;\n  }\n\n  processDifference(response);\n\n  const newState = response instanceof GramJs.updates.DifferenceSlice ? response.intermediateState : response.state;\n  applyState(newState);\n\n  if (response instanceof GramJs.updates.DifferenceSlice) {\n    getDifference();\n    return;\n  }\n\n  sendUpdate({\n    '@type': 'updateFetchingDifference',\n    isFetching: false,\n  });\n}\n\nasync function getChannelDifference(channelId: string) {\n  const channel = localDb.chats[channelId];\n  if (!channel || !(channel instanceof GramJs.Channel) || !channel.accessHash || !localDb.channelPtsById[channelId]) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('[UpdateManager] Channel for difference not found', channelId, channel);\n    }\n    return;\n  }\n\n  const response = await invoke(new GramJs.updates.GetChannelDifference({\n    channel: buildInputEntity(channelId, channel.accessHash.toString()) as GramJs.InputChannel,\n    pts: localDb.channelPtsById[channelId],\n    filter: new GramJs.ChannelMessagesFilterEmpty(),\n    limit: CHANNEL_DIFFERENCE_LIMIT,\n  }));\n\n  if (!response) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[UpdatesManager] Failed to get ChannelDifference', channelId, channel);\n    }\n    return;\n  }\n\n  if (response instanceof GramJs.updates.ChannelDifferenceTooLong) {\n    forceSync();\n    return;\n  }\n\n  localDb.channelPtsById[channelId] = response.pts;\n\n  if (response instanceof GramJs.updates.ChannelDifferenceEmpty) {\n    popPtsQueue(channelId); // Continue processing updates in queue\n    return;\n  }\n\n  processDifference(response, channelId);\n\n  if (!response.final) {\n    getChannelDifference(channelId);\n  }\n}\n\nfunction forceSync() {\n  reset();\n\n  sendUpdate({\n    '@type': 'requestSync',\n  });\n\n  loadRemoteState();\n}\n\nexport function reset() {\n  PTS_QUEUE.clear();\n  SEQ_QUEUE.clear();\n\n  clearTimeout(seqTimeout);\n  seqTimeout = undefined;\n\n  PTS_TIMEOUTS.forEach((timeout) => {\n    clearTimeout(timeout);\n  });\n  PTS_TIMEOUTS.clear();\n\n  localDb.commonBoxState = {};\n\n  Object.keys(localDb.channelPtsById).forEach((channelId) => {\n    localDb.channelPtsById[channelId] = 0;\n  });\n\n  isInited = false;\n}\n\nexport function processAffectedHistory(\n  chat: ApiChat, affected: GramJs.messages.AffectedMessages | GramJs.messages.AffectedHistory,\n) {\n  const isChannel = chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup';\n  const channeId = isChannel ? buildMtpPeerId(chat.id, 'channel') : undefined;\n  const update = buildLocalUpdatePts(affected.pts, affected.ptsCount, channeId);\n\n  processUpdate(update);\n}\n\nasync function loadRemoteState() {\n  const remoteState = await invoke(new GramJs.updates.GetState());\n  if (!remoteState) return;\n\n  applyState(remoteState);\n\n  isInited = true;\n}\n\nfunction processDifference(\n  difference: GramJs.updates.Difference | GramJs.updates.DifferenceSlice | GramJs.updates.ChannelDifference,\n  channelId?: string,\n) {\n  difference.newMessages.forEach((message) => {\n    updater(new GramJs.UpdateNewMessage({\n      message,\n      pts: 0,\n      ptsCount: 0,\n    }));\n  });\n\n  addEntitiesToLocalDb(difference.users);\n  addEntitiesToLocalDb(difference.chats);\n\n  dispatchUserAndChatUpdates(difference.users);\n  dispatchUserAndChatUpdates(difference.chats);\n\n  // Ignore `pts`/`seq` holes when applying updates from difference\n  // BUT, if we got an `UpdateChannelTooLong`, make sure to process other updates after receiving `ChannelDifference`\n  const channelTooLongIds = new Set<string>();\n\n  difference.otherUpdates.forEach((update) => {\n    const updateChannelId = getUpdateChannelId(update);\n\n    if (update instanceof GramJs.UpdateChannelTooLong) {\n      channelTooLongIds.add(getUpdateChannelId(update));\n    }\n\n    const shouldApplyImmediately = !channelTooLongIds.has(updateChannelId);\n    processUpdate(update, shouldApplyImmediately, !shouldApplyImmediately);\n  });\n\n  // Continue processing updates in queues\n  if (channelId) {\n    popPtsQueue(channelId);\n  } else {\n    popSeqQueue();\n  }\n}\n\nfunction getPtsCount(update: PtsUpdate) {\n  return 'ptsCount' in update ? update.ptsCount : 0;\n}\n\nfunction seqComparator(a: SeqUpdate, b: SeqUpdate) {\n  const seqA = 'seqStart' in a ? a.seqStart : a.seq;\n  const seqB = 'seqStart' in b ? b.seqStart : b.seq;\n\n  return seqA - seqB;\n}\n\nfunction ptsComparator(a: PtsUpdate, b: PtsUpdate) {\n  const diff = a.pts - b.pts;\n  if (diff !== 0) {\n    return diff;\n  }\n\n  return getPtsCount(b) - getPtsCount(a);\n}\n","import { ELECTRON_HOST_URL, IS_PACKAGED_ELECTRON } from '../config';\n\n// eslint-disable-next-line no-restricted-globals\nconst cacheApi = self.caches;\n\nlet isSupported: boolean | undefined;\n\nexport async function isCacheApiSupported() {\n  if (!cacheApi) return false;\n\n  isSupported = isSupported ?? await cacheApi.has('test').then(() => true).catch(() => false);\n  return isSupported;\n}\n\nexport enum Type {\n  Text,\n  Blob,\n  Json,\n  ArrayBuffer,\n}\n\nexport async function fetch(\n  cacheName: string, key: string, type: Type, isHtmlAllowed = false,\n) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = IS_PACKAGED_ELECTRON\n      ? `${ELECTRON_HOST_URL}/${key.replace(/:/g, '_')}`\n      : new Request(key.replace(/:/g, '_'));\n    const cache = await cacheApi.open(cacheName);\n    const response = await cache.match(request);\n    if (!response) {\n      return undefined;\n    }\n\n    const contentType = response.headers.get('Content-Type');\n\n    switch (type) {\n      case Type.Text:\n        return await response.text();\n      case Type.Blob: {\n        // Ignore deprecated data-uri avatars\n        if (key.startsWith('avatar') && contentType && contentType.startsWith('text')) {\n          return undefined;\n        }\n\n        const blob = await response.blob();\n        const shouldRecreate = !blob.type || (!isHtmlAllowed && blob.type.includes('html'));\n        // iOS Safari fails to preserve `type` in cache\n        let resolvedType = blob.type || contentType;\n\n        if (!(shouldRecreate && resolvedType)) {\n          return blob;\n        }\n\n        // Prevent HTML-in-video attacks (for files that were cached before fix)\n        if (!isHtmlAllowed) {\n          resolvedType = resolvedType.replace(/html/gi, '');\n        }\n\n        return new Blob([blob], { type: resolvedType });\n      }\n      case Type.Json:\n        return await response.json();\n      case Type.ArrayBuffer:\n        return await response.arrayBuffer();\n      default:\n        return undefined;\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function save(cacheName: string, key: string, data: AnyLiteral | Blob | ArrayBuffer | string) {\n  if (!cacheApi) {\n    return false;\n  }\n\n  try {\n    const cacheData = typeof data === 'string' || data instanceof Blob || data instanceof ArrayBuffer\n      ? data\n      : JSON.stringify(data);\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = IS_PACKAGED_ELECTRON\n      ? `${ELECTRON_HOST_URL}/${key.replace(/:/g, '_')}`\n      : new Request(key.replace(/:/g, '_'));\n    const response = new Response(cacheData);\n    const cache = await cacheApi.open(cacheName);\n    await cache.put(request, response);\n    return true;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return false;\n  }\n}\n\nexport async function remove(cacheName: string, key: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    const cache = await cacheApi.open(cacheName);\n    return await cache.delete(key);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function clear(cacheName: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    return await cacheApi.delete(cacheName);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { TelegramClient } from '../../../lib/gramjs';\nimport type { ApiOnProgress, ApiParsedMedia } from '../../types';\nimport {\n  ApiMediaFormat,\n} from '../../types';\n\nimport {\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_MAX_BYTES,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n} from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { getEntityTypeById } from '../gramjsBuilders';\nimport localDb from '../localDb';\n\nconst MEDIA_ENTITY_TYPES = new Set([\n  'msg', 'sticker', 'gif', 'wallpaper', 'photo', 'webDocument', 'document', 'videoAvatar',\n]);\n\nconst JPEG_SIZE_TYPES = new Set(['s', 'm', 'x', 'y', 'w', 'a', 'b', 'c', 'd']);\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  onProgress?: ApiOnProgress,\n) {\n  const {\n    data, mimeType, fullSize,\n  } = await download(url, client, onProgress, start, end, isHtmlAllowed) || {};\n\n  if (!data) {\n    return undefined;\n  }\n\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n    mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  );\n\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const dataBlob = mediaFormat === ApiMediaFormat.Progressive ? '' : parsed as string | Blob;\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    dataBlob,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'msg' | 'sticker' | 'wallpaper' | 'gif' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap' | 'videoAvatar'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  if (entityType === 'staticMap') {\n    const accessHash = entityId;\n    const parsedParams = new URLSearchParams(params);\n    const long = parsedParams.get('long');\n    const lat = parsedParams.get('lat');\n    const w = parsedParams.get('w');\n    const h = parsedParams.get('h');\n    const zoom = parsedParams.get('zoom');\n    const scale = parsedParams.get('scale');\n    const accuracyRadius = parsedParams.get('accuracy_radius');\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'msg':\n      entity = localDb.messages[entityId];\n      break;\n    case 'sticker':\n    case 'gif':\n    case 'wallpaper':\n      entity = localDb.documents[entityId];\n      break;\n    case 'videoAvatar':\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (entity instanceof GramJs.MessageService && entity.action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n      mimeType = 'image/jpeg';\n    } else if (entity instanceof GramJs.Message) {\n      mimeType = getMessageMediaMimeType(entity, sizeType);\n      if (entity.media instanceof GramJs.MessageMediaDocument && entity.media.document instanceof GramJs.Document) {\n        fullSize = entity.media.document.size.toJSNumber();\n      }\n      if (entity.media instanceof GramJs.MessageMediaWebPage\n        && entity.media.webpage instanceof GramJs.WebPage\n        && entity.media.webpage.document instanceof GramJs.Document) {\n        fullSize = entity.media.webpage.document.size.toJSNumber();\n      }\n    } else if (entity instanceof GramJs.Photo) {\n      if (entityType === 'videoAvatar') {\n        mimeType = 'video/mp4';\n      } else {\n        mimeType = 'image/jpeg';\n      }\n    } else if (entityType === 'sticker' && sizeType) {\n      mimeType = 'image/webp';\n    } else if (entityType === 'webDocument') {\n      mimeType = (entity as GramJs.TypeWebDocument).mimeType;\n      fullSize = (entity as GramJs.TypeWebDocument).size;\n    } else {\n      if (JPEG_SIZE_TYPES.has(sizeType || '')) {\n        mimeType = 'image/jpeg';\n      } else {\n        mimeType = (entity as GramJs.Document).mimeType;\n      }\n      fullSize = (entity as GramJs.Document).size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity);\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity, mediaMatchType === 'profile');\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\nfunction getMessageMediaMimeType(message: GramJs.Message, sizeType?: string) {\n  if (!message || !message.media) {\n    return undefined;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaPhoto) {\n    return 'image/jpeg';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaGeo\n    || message.media instanceof GramJs.MessageMediaVenue\n    || message.media instanceof GramJs.MessageMediaGeoLive) {\n    return 'image/png';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaDocument) {\n    const document = message.media.document;\n    if (document instanceof GramJs.Document) {\n      if (sizeType) {\n        return document.attributes.some((a) => a instanceof GramJs.DocumentAttributeSticker)\n          ? 'image/webp'\n          : 'image/jpeg';\n      }\n\n      return document.mimeType;\n    }\n  }\n\n  if (message.media instanceof GramJs.MessageMediaWebPage\n    && message.media.webpage instanceof GramJs.WebPage\n    && message.media.webpage.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return 'image/jpeg';\n    }\n\n    return message.media.webpage.document.mimeType;\n  }\n\n  return undefined;\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n    case ApiMediaFormat.DownloadUrl:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|msg|stickerSet|sticker|wallpaper|gif|document|videoAvatar)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import type { ThreadId } from '../../types';\n\nexport class ChatAbortController extends AbortController {\n  private threads = new Map<ThreadId, AbortController>();\n\n  public getThreadSignal(threadId: ThreadId): AbortSignal {\n    let controller = this.threads.get(threadId);\n    if (!controller) {\n      controller = new AbortController();\n      this.threads.set(threadId, controller);\n    }\n    return controller.signal;\n  }\n\n  public abortThread(threadId: ThreadId, reason?: string): void {\n    this.threads.get(threadId)?.abort(reason);\n    this.threads.delete(threadId);\n  }\n\n  public abort(reason?: string): void {\n    super.abort(reason);\n    this.threads.forEach((controller) => controller.abort(reason));\n    this.threads.clear();\n  }\n}\n","import {\n  Api as GramJs,\n  sessions,\n} from '../../../lib/gramjs';\nimport type { TwoFaParams } from '../../../lib/gramjs/client/2fa';\nimport TelegramClient from '../../../lib/gramjs/client/TelegramClient';\nimport { Logger as GramJsLogger } from '../../../lib/gramjs/extensions/index';\n\nimport type { ThreadId } from '../../../types';\nimport type {\n  ApiInitialArgs,\n  ApiMediaFormat,\n  ApiOnProgress,\n  ApiSessionData,\n  OnApiUpdate,\n} from '../../types';\n\nimport {\n  APP_CODE_NAME,\n  DEBUG, DEBUG_GRAMJS, IS_TEST, UPLOAD_WORKERS,\n} from '../../../config';\nimport { pause } from '../../../util/schedulers';\nimport { setMessageBuilderCurrentUserId } from '../apiBuilders/messages';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport { buildApiUser, buildApiUserFullInfo } from '../apiBuilders/users';\nimport { buildInputPeerFromLocalDb } from '../gramjsBuilders';\nimport {\n  addEntitiesToLocalDb,\n  addMessageToLocalDb, addStoryToLocalDb, addUserToLocalDb, isResponseUpdate, log,\n} from '../helpers';\nimport localDb, { clearLocalDb } from '../localDb';\nimport {\n  getDifference,\n  init as initUpdatesManager,\n  processUpdate,\n  reset as resetUpdatesManager,\n  scheduleGetChannelDifference,\n  updateChannelState,\n} from '../updates/updateManager';\nimport {\n  onAuthError, onAuthReady, onCurrentUserUpdate, onRequestCode, onRequestPassword, onRequestPhoneNumber,\n  onRequestQrCode, onRequestRegistration, onWebAuthTokenFailed,\n} from './auth';\nimport downloadMediaWithClient, { parseMediaUrl } from './media';\n\nimport { ChatAbortController } from '../ChatAbortController';\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nconst gramJsUpdateEventBuilder = { build: (update: object) => update };\n\nconst CHAT_ABORT_CONTROLLERS = new Map<string, ChatAbortController>();\nconst ABORT_CONTROLLERS = new Map<string, AbortController>();\n\nlet onUpdate: OnApiUpdate;\nlet client: TelegramClient;\nlet currentUserId: string | undefined;\n\nexport async function init(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n\n  onUpdate = _onUpdate;\n\n  const {\n    userAgent, platform, sessionData, isTest, isWebmSupported, maxBufferSize, webAuthToken, dcId,\n    mockScenario, shouldForceHttpTransport, shouldAllowHttpTransport,\n    shouldDebugExportedSenders, langCode,\n  } = initialArgs;\n  const session = new sessions.CallbackSession(sessionData, onSessionUpdate);\n\n  // eslint-disable-next-line no-restricted-globals\n  (self as any).isWebmSupported = isWebmSupported;\n  // eslint-disable-next-line no-restricted-globals\n  (self as any).maxBufferSize = maxBufferSize;\n\n  client = new TelegramClient(\n    session,\n    process.env.TELEGRAM_API_ID,\n    process.env.TELEGRAM_API_HASH,\n    {\n      deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n      systemVersion: platform || DEFAULT_PLATFORM,\n      appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n      useWSS: true,\n      additionalDcsDisabled: IS_TEST,\n      shouldDebugExportedSenders,\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      testServers: isTest,\n      dcId,\n      langCode,\n    } as any,\n  );\n\n  client.addEventHandler(handleGramJsUpdate, gramJsUpdateEventBuilder);\n\n  try {\n    if (DEBUG) {\n      log('CONNECTING');\n\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).invoke = invokeRequest;\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).GramJs = GramJs;\n    }\n\n    try {\n      client.setPingCallback(getDifference);\n      await client.start({\n        phoneNumber: onRequestPhoneNumber,\n        phoneCode: onRequestCode,\n        password: onRequestPassword,\n        firstAndLastNames: onRequestRegistration,\n        qrCode: onRequestQrCode,\n        onError: onAuthError,\n        initialMethod: platform === 'iOS' || platform === 'Android' ? 'phoneNumber' : 'qrCode',\n        shouldThrowIfUnauthorized: Boolean(sessionData),\n        webAuthToken,\n        webAuthTokenFailed: onWebAuthTokenFailed,\n        mockScenario,\n      });\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n\n      if (err.message !== 'Disconnect' && err.message !== 'Cannot send requests while disconnected') {\n        onUpdate({\n          '@type': 'updateConnectionState',\n          connectionState: 'connectionStateBroken',\n        });\n\n        return;\n      }\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('>>> FINISH INIT API');\n      log('CONNECTED');\n    }\n\n    onAuthReady();\n    onSessionUpdate(session.getSessionData());\n    onUpdate({ '@type': 'updateApiReady' });\n\n    initUpdatesManager(invokeRequest);\n\n    void fetchCurrentUser();\n  } catch (err) {\n    if (DEBUG) {\n      log('CONNECTING ERROR', err);\n    }\n\n    throw err;\n  }\n}\n\nexport function setIsPremium({ isPremium }: { isPremium: boolean }) {\n  client.setIsPremium(isPremium);\n}\n\nconst LOG_OUT_TIMEOUT = 2500;\nexport async function destroy(noLogOut = false, noClearLocalDb = false) {\n  if (!noLogOut && client.isConnected()) {\n    await Promise.race([\n      invokeRequest(new GramJs.auth.LogOut()),\n      pause(LOG_OUT_TIMEOUT),\n    ]);\n  }\n\n  if (!noClearLocalDb) {\n    clearLocalDb();\n    resetUpdatesManager();\n  }\n\n  await client.destroy();\n}\n\nexport async function disconnect() {\n  await client.disconnect();\n}\n\nexport function getClient() {\n  return client;\n}\n\nfunction onSessionUpdate(sessionData: ApiSessionData) {\n  onUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\ntype UpdateConfig = GramJs.UpdateConfig & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] };\n\nexport function handleGramJsUpdate(update: any) {\n  processUpdate(update);\n\n  if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else {\n    const updates = 'updates' in update ? update.updates : [update];\n    updates.forEach((nestedUpdate: any) => {\n      if (!(nestedUpdate instanceof GramJs.UpdateConfig)) return;\n      // eslint-disable-next-line no-underscore-dangle\n      const currentUser = (nestedUpdate as UpdateConfig)._entities\n        ?.find((entity) => entity instanceof GramJs.User && buildApiPeerId(entity.id, 'user') === currentUserId);\n      if (!(currentUser instanceof GramJs.User)) return;\n\n      setIsPremium({ isPremium: Boolean(currentUser.premium) });\n    });\n  }\n}\n\ntype InvokeRequestParams = {\n  shouldThrow?: boolean;\n  shouldIgnoreUpdates?: boolean;\n  dcId?: number;\n  shouldIgnoreErrors?: boolean;\n  abortControllerChatId?: string;\n  abortControllerThreadId?: ThreadId;\n  abortControllerGroup?: 'call';\n  shouldRetryOnTimeout?: boolean;\n};\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  params?: InvokeRequestParams & { shouldReturnTrue?: false },\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  params?: InvokeRequestParams & { shouldReturnTrue: true },\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  params: InvokeRequestParams & { shouldReturnTrue?: boolean } = {},\n) {\n  const {\n    shouldThrow, shouldIgnoreUpdates, dcId, shouldIgnoreErrors, abortControllerChatId, abortControllerThreadId,\n    shouldRetryOnTimeout, abortControllerGroup,\n  } = params;\n  const shouldReturnTrue = Boolean(params.shouldReturnTrue);\n\n  let abortSignal: AbortSignal | undefined;\n  if (abortControllerChatId) {\n    let controller = CHAT_ABORT_CONTROLLERS.get(abortControllerChatId);\n    if (!controller) {\n      controller = new ChatAbortController();\n      CHAT_ABORT_CONTROLLERS.set(abortControllerChatId, controller);\n    }\n\n    abortSignal = abortControllerThreadId ? controller.getThreadSignal(abortControllerThreadId) : controller.signal;\n  }\n\n  if (abortControllerGroup) {\n    let controller = ABORT_CONTROLLERS.get(abortControllerGroup);\n    if (!controller) {\n      controller = new AbortController();\n      ABORT_CONTROLLERS.set(abortControllerGroup, controller);\n    }\n    abortSignal = controller.signal;\n  }\n\n  try {\n    if (DEBUG) {\n      log('INVOKE', request.className);\n    }\n\n    const result = await client.invoke(request, dcId, abortSignal, shouldRetryOnTimeout);\n\n    if (DEBUG) {\n      log('RESPONSE', request.className, result);\n    }\n\n    if (!shouldIgnoreUpdates && isResponseUpdate(result)) {\n      processUpdate(result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (shouldIgnoreErrors) return undefined;\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className);\n      // eslint-disable-next-line no-console\n      console.debug('invokeRequest failed with payload', request);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nexport function invokeRequestBeacon<T extends GramJs.AnyRequest>(\n  request: T,\n  dcId?: number,\n) {\n  if (DEBUG) {\n    log('BEACON', request.className);\n  }\n\n  client.invokeBeacon(request, dcId);\n}\n\nexport async function downloadMedia(\n  args: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  onProgress?: ApiOnProgress,\n) {\n  try {\n    return (await downloadMediaWithClient(args, client, onProgress));\n  } catch (err: any) {\n    if (err.message.startsWith('FILE_REFERENCE')) {\n      const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n      if (isFileReferenceRepaired) {\n        return downloadMediaWithClient(args, client, onProgress);\n      }\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to repair file reference', args.url);\n      }\n    }\n\n    throw err;\n  }\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport function getTmpPassword(currentPassword: string, ttl?: number) {\n  return client.getTmpPassword(currentPassword, ttl);\n}\n\nexport function abortChatRequests(params: { chatId: string; threadId?: ThreadId }) {\n  const { chatId, threadId } = params;\n  const controller = CHAT_ABORT_CONTROLLERS.get(chatId);\n  if (!threadId) {\n    controller?.abort('Chat change');\n    CHAT_ABORT_CONTROLLERS.delete(chatId);\n    return;\n  }\n\n  controller?.abortThread(threadId, 'Thread change');\n}\n\nexport function abortRequestGroup(group: string) {\n  ABORT_CONTROLLERS.get(group)?.abort();\n  ABORT_CONTROLLERS.delete(group);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  if (user.photo instanceof GramJs.Photo) {\n    localDb.photos[user.photo.id.toString()] = user.photo;\n  }\n  addUserToLocalDb(user);\n  const currentUserFullInfo = buildApiUserFullInfo(userFull);\n  const currentUser = buildApiUser(user)!;\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser, currentUserFullInfo);\n\n  currentUserId = currentUser.id;\n  setIsPremium({ isPremium: Boolean(currentUser.isPremium) });\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const isSlowMode = err.message.startsWith('A wait of') && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  const { message } = err;\n\n  onUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), {\n      shouldThrow: true,\n    });\n  } catch (err: any) {\n    if (err.message === 'AUTH_KEY_UNREGISTERED' || err.message === 'SESSION_REVOKED') {\n      onUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'document' || mediaMatchType === 'photo') {\n    const entity = mediaMatchType === 'document' ? localDb.documents[entityId] : localDb.photos[entityId];\n    if (!entity.storyData) return false;\n    const peer = buildInputPeerFromLocalDb(entity.storyData.peerId);\n    if (!peer) return false;\n\n    const result = await invokeRequest(new GramJs.stories.GetStoriesByID({\n      peer,\n      id: [entity.storyData.id],\n    }));\n    if (!result) return false;\n\n    addEntitiesToLocalDb(result.users);\n    result.stories.forEach((story) => addStoryToLocalDb(story, entity.storyData!.peerId));\n    return true;\n  }\n\n  if (entityType === 'msg') {\n    const entity = localDb.messages[entityId]!;\n    const messageId = entity.id;\n\n    const peer = 'channelId' in entity.peerId ? new GramJs.InputChannel({\n      channelId: entity.peerId.channelId,\n      accessHash: (localDb.chats[buildApiPeerId(entity.peerId.channelId, 'channel')] as GramJs.Channel).accessHash!,\n    }) : undefined;\n    const result = await invokeRequest(\n      peer\n        ? new GramJs.channels.GetMessages({\n          channel: peer,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n    );\n\n    if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n    if (peer && 'pts' in result) {\n      updateChannelState(buildApiPeerId(peer.channelId, 'channel'), result.pts);\n    }\n\n    const message = result.messages[0];\n    if (message instanceof GramJs.MessageEmpty) return false;\n    addEntitiesToLocalDb(result.users);\n    addEntitiesToLocalDb(result.chats);\n    addMessageToLocalDb(message);\n    return true;\n  }\n\n  return false;\n}\n\nexport function setForceHttpTransport(forceHttpTransport: boolean) {\n  client.setForceHttpTransport(forceHttpTransport);\n}\n\nexport function setAllowHttpTransport(allowHttpTransport: boolean) {\n  client.setAllowHttpTransport(allowHttpTransport);\n}\n\nexport function setShouldDebugExportedSenders(value: boolean) {\n  client.setShouldDebugExportedSenders(value);\n}\n\nexport function requestChannelDifference(channelId: string) {\n  scheduleGetChannelDifference(channelId);\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiBotApp,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiPeer,\n  ApiThemeParameters,\n  ApiUser,\n  OnApiUpdate,\n} from '../../types';\n\nimport { WEB_APP_PLATFORM } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildApiAttachBot,\n  buildApiBotInlineMediaResult,\n  buildApiBotInlineResult,\n  buildApiMessagesBotApp,\n  buildBotSwitchPm,\n  buildBotSwitchWebview,\n} from '../apiBuilders/bots';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport { buildApiUrlAuthResult } from '../apiBuilders/misc';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildInputBotApp,\n  buildInputEntity,\n  buildInputPeer,\n  buildInputReplyTo,\n  buildInputThemeParams,\n  generateRandomBigInt,\n} from '../gramjsBuilders';\nimport { addEntitiesToLocalDb, addUserToLocalDb, deserializeBytes } from '../helpers';\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function answerCallbackButton({\n  chatId, accessHash, messageId, data, isGame,\n}: {\n  chatId: string; accessHash?: string; messageId: number; data?: string; isGame?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetBotCallbackAnswer({\n    peer: buildInputPeer(chatId, accessHash),\n    msgId: messageId,\n    data: data ? deserializeBytes(data) : undefined,\n    game: isGame || undefined,\n  }));\n\n  return result ? omitVirtualClassFields(result) : undefined;\n}\n\nexport async function fetchTopInlineBots() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    botsInline: true,\n  }));\n\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter(Boolean);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchInlineBot({ username }: { username: string }) {\n  const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({ username }));\n\n  if (\n    !resolvedPeer\n    || !(\n      resolvedPeer.users[0] instanceof GramJs.User\n      && resolvedPeer.users[0].bot\n      && resolvedPeer.users[0].botInlinePlaceholder\n    )\n  ) {\n    return undefined;\n  }\n\n  addUserToLocalDb(resolvedPeer.users[0]);\n\n  return {\n    user: buildApiUser(resolvedPeer.users[0]),\n    chat: buildApiChatFromPreview(resolvedPeer.users[0]),\n  };\n}\n\nexport async function fetchInlineBotResults({\n  bot, chat, query, offset = '',\n}: {\n  bot: ApiUser; chat: ApiChat; query: string; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    query,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    isGallery: Boolean(result.gallery),\n    help: bot.botPlaceholder,\n    nextOffset: getInlineBotResultsNextOffset(bot.usernames![0].username, result.nextOffset),\n    switchPm: buildBotSwitchPm(result.switchPm),\n    switchWebview: buildBotSwitchWebview(result.switchWebview),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    results: processInlineBotResult(String(result.queryId), result.results),\n    cacheTime: result.cacheTime,\n  };\n}\n\nexport async function sendInlineBotResult({\n  chat, replyInfo, resultId, queryId, sendAs, isSilent, scheduleDate,\n}: {\n  chat: ApiChat;\n  replyInfo?: ApiInputMessageReplyInfo;\n  resultId: string;\n  queryId: string;\n  sendAs?: ApiPeer;\n  isSilent?: boolean;\n  scheduleDate?: number;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.SendInlineBotResult({\n    clearDraft: true,\n    randomId,\n    queryId: BigInt(queryId),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: resultId,\n    scheduleDate,\n    replyTo: replyInfo && buildInputReplyTo(replyInfo),\n    ...(isSilent && { silent: true }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function startBot({\n  bot, startParam,\n}: {\n  bot: ApiUser;\n  startParam?: string;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.StartBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(bot.id, bot.accessHash),\n    randomId,\n    startParam,\n  }));\n}\n\nexport async function requestWebView({\n  isSilent,\n  peer,\n  bot,\n  url,\n  startParam,\n  replyInfo,\n  theme,\n  sendAs,\n  isFromBotMenu,\n}: {\n  isSilent?: boolean;\n  peer: ApiPeer;\n  bot: ApiUser;\n  url?: string;\n  startParam?: string;\n  replyInfo?: ApiInputMessageReplyInfo;\n  theme?: ApiThemeParameters;\n  sendAs?: ApiPeer;\n  isFromBotMenu?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    url,\n    startParam,\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    fromBotMenu: isFromBotMenu || undefined,\n    platform: WEB_APP_PLATFORM,\n    replyTo: replyInfo && buildInputReplyTo(replyInfo),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n\n  if (result instanceof GramJs.WebViewResultUrl) {\n    return {\n      url: result.url,\n      queryId: result.queryId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport async function requestSimpleWebView({\n  bot,\n  url,\n  theme,\n  startParam,\n  isFromSwitchWebView,\n  isFromSideMenu,\n}: {\n  bot: ApiUser;\n  url?: string;\n  theme?: ApiThemeParameters;\n  startParam?: string;\n  isFromSwitchWebView?: boolean;\n  isFromSideMenu?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestSimpleWebView({\n    url,\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: WEB_APP_PLATFORM,\n    startParam,\n    fromSwitchWebview: isFromSwitchWebView || undefined,\n    fromSideMenu: isFromSideMenu || undefined,\n  }));\n\n  return result?.url;\n}\n\nexport async function fetchBotApp({\n  bot,\n  appName,\n}: {\n  bot: ApiUser;\n  appName: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetBotApp({\n    app: new GramJs.InputBotAppShortName({\n      botId: buildInputEntity(bot.id, bot.accessHash) as GramJs.InputUser,\n      shortName: appName,\n    }),\n  }));\n\n  if (!result || result instanceof GramJs.BotAppNotModified) {\n    return undefined;\n  }\n\n  return buildApiMessagesBotApp(result);\n}\n\nexport async function requestAppWebView({\n  peer,\n  app,\n  startParam,\n  theme,\n  isWriteAllowed,\n}: {\n  peer: ApiPeer;\n  app: ApiBotApp;\n  startParam?: string;\n  theme?: ApiThemeParameters;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestAppWebView({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    app: buildInputBotApp(app),\n    startParam,\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: WEB_APP_PLATFORM,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  return result?.url;\n}\n\nexport function prolongWebView({\n  isSilent,\n  peer,\n  bot,\n  queryId,\n  replyInfo,\n  sendAs,\n}: {\n  isSilent?: boolean;\n  peer: ApiPeer;\n  bot: ApiUser;\n  queryId: string;\n  replyInfo?: ApiInputMessageReplyInfo;\n  sendAs?: ApiPeer;\n}) {\n  return invokeRequest(new GramJs.messages.ProlongWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    queryId: BigInt(queryId),\n    replyTo: replyInfo && buildInputReplyTo(replyInfo),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function sendWebViewData({\n  bot, buttonText, data,\n}: {\n  bot: ApiUser;\n  buttonText: string;\n  data: string;\n}) {\n  const randomId = generateRandomBigInt();\n  await invokeRequest(new GramJs.messages.SendWebViewData({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    buttonText,\n    data,\n    randomId,\n  }));\n}\n\nexport async function loadAttachBots({\n  hash,\n}: {\n  hash?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBots({\n    hash: hash ? BigInt(hash) : undefined,\n  }));\n\n  if (result instanceof GramJs.AttachMenuBots) {\n    addEntitiesToLocalDb(result.users);\n    return {\n      hash: result.hash.toString(),\n      bots: buildCollectionByKey(result.bots.map(buildApiAttachBot), 'id'),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport async function loadAttachBot({\n  bot,\n}: {\n  bot: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n  }));\n\n  if (result instanceof GramJs.AttachMenuBotsBot) {\n    addEntitiesToLocalDb(result.users);\n    return {\n      bot: buildApiAttachBot(result.bot),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport function toggleAttachBot({\n  bot,\n  isWriteAllowed,\n  isEnabled,\n}: {\n  bot: ApiUser;\n  isWriteAllowed?: boolean;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.ToggleBotInAttachMenu({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    writeAllowed: isWriteAllowed || undefined,\n    enabled: isEnabled,\n  }));\n}\n\nexport async function requestBotUrlAuth({\n  chat, buttonId, messageId,\n}: {\n  chat: ApiChat;\n  buttonId: number;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    buttonId,\n    msgId: messageId,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptBotUrlAuth({\n  chat,\n  messageId,\n  buttonId,\n  isWriteAllowed,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  buttonId: number;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    buttonId,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function requestLinkUrlAuth({ url }: { url: string }) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    url,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptLinkUrlAuth({ url, isWriteAllowed }: { url: string; isWriteAllowed?: boolean }) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    url,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport function fetchBotCanSendMessage({ bot } : { bot: ApiUser }) {\n  return invokeRequest(new GramJs.bots.CanSendMessage({\n    bot: buildInputEntity(bot.id, bot.accessHash) as GramJs.InputUser,\n  }));\n}\n\nexport function allowBotSendMessages({ bot } : { bot: ApiUser }) {\n  return invokeRequest(new GramJs.bots.AllowSendMessage({\n    bot: buildInputEntity(bot.id, bot.accessHash) as GramJs.InputUser,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function invokeWebViewCustomMethod({\n  bot,\n  customMethod,\n  parameters,\n}: {\n  bot: ApiUser;\n  customMethod: string;\n  parameters: string;\n}): Promise<{\n    result: object;\n  } | {\n    error: string;\n  }> {\n  try {\n    const result = await invokeRequest(new GramJs.bots.InvokeWebViewCustomMethod({\n      bot: buildInputPeer(bot.id, bot.accessHash),\n      params: new GramJs.DataJSON({\n        data: parameters,\n      }),\n      customMethod,\n    }), {\n      shouldThrow: true,\n    });\n\n    return {\n      result: JSON.parse(result!.data),\n    };\n  } catch (e) {\n    const error = e as Error;\n    return {\n      error: error.message,\n    };\n  }\n}\n\nfunction processInlineBotResult(queryId: string, results: GramJs.TypeBotInlineResult[]) {\n  return results.map((result) => {\n    if (result instanceof GramJs.BotInlineMediaResult) {\n      if (result.document instanceof GramJs.Document) {\n        addDocumentToLocalDb(result.document);\n      }\n\n      if (result.photo instanceof GramJs.Photo) {\n        addPhotoToLocalDb(result.photo);\n      }\n\n      return buildApiBotInlineMediaResult(result, queryId);\n    }\n\n    if (result.thumb) {\n      addWebDocumentToLocalDb(result.thumb);\n    }\n\n    return buildApiBotInlineResult(result, queryId);\n  });\n}\n\nfunction getInlineBotResultsNextOffset(username: string, nextOffset?: string) {\n  return username === 'gif' && nextOffset === '0' ? '' : nextOffset;\n}\n\nfunction addDocumentToLocalDb(document: GramJs.Document) {\n  localDb.documents[String(document.id)] = document;\n}\n\nfunction addPhotoToLocalDb(photo: GramJs.Photo) {\n  localDb.photos[String(photo.id)] = photo;\n}\n\nfunction addWebDocumentToLocalDb(webDocument: GramJs.TypeWebDocument) {\n  localDb.webDocuments[webDocument.url] = webDocument;\n}\n\nexport function setBotInfo({\n  bot,\n  langCode,\n  name,\n  about,\n  description,\n}: {\n  bot: ApiUser;\n  langCode: string;\n  name?: string;\n  about?: string;\n  description?: string;\n}) {\n  return invokeRequest(new GramJs.bots.SetBotInfo({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    langCode,\n    name: name || '',\n    about: about || '',\n    description: description || '',\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { JoinGroupCallPayload } from '../../../lib/secret-sauce';\nimport type {\n  ApiChat, ApiGroupCall, ApiPhoneCall,\n  ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport { GROUP_CALL_PARTICIPANTS_LIMIT } from '../../../config';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant, buildCallProtocol,\n  buildPhoneCall,\n} from '../apiBuilders/calls';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildInputGroupCall, buildInputPeer, buildInputPhoneCall, generateRandomInt,\n} from '../gramjsBuilders';\nimport { addEntitiesToLocalDb } from '../helpers';\nimport { invokeRequest, invokeRequestBeacon } from './client';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getGroupCall({\n  call,\n}: {\n  call: Partial<ApiGroupCall>;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupCall({\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    groupCall: buildApiGroupCall(result.call),\n    users,\n    chats,\n  };\n}\n\nexport function discardGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardGroupCall({\n    call: buildInputGroupCall(call),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function editGroupCallParticipant({\n  call, participant, muted, presentationPaused, videoStopped, videoPaused, volume,\n  raiseHand,\n}: {\n  call: ApiGroupCall; participant: ApiUser; muted?: boolean; presentationPaused?: boolean;\n  videoStopped?: boolean; videoPaused?: boolean; raiseHand?: boolean; volume?: number;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallParticipant({\n    call: buildInputGroupCall(call),\n    participant: buildInputPeer(participant.id, participant.accessHash),\n    ...(videoStopped !== undefined && { videoStopped }),\n    ...(videoPaused !== undefined && { videoPaused }),\n    ...(muted !== undefined && { muted }),\n    ...(presentationPaused !== undefined && { presentationPaused }),\n    ...(raiseHand !== undefined && { raiseHand }),\n    ...(volume !== undefined && { volume }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function editGroupCallTitle({\n  groupCall, title,\n}: {\n  groupCall: ApiGroupCall; title: string;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallTitle({\n    title,\n    call: buildInputGroupCall(groupCall),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function exportGroupCallInvite({\n  call, canSelfUnmute,\n}: {\n  call: ApiGroupCall; canSelfUnmute: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ExportGroupCallInvite({\n    canSelfUnmute: canSelfUnmute || undefined,\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport async function fetchGroupCallParticipants({\n  call, offset,\n}: {\n  call: ApiGroupCall; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupParticipants({\n    call: buildInputGroupCall(call),\n    ids: [],\n    sources: [],\n    offset: offset || '',\n    limit: GROUP_CALL_PARTICIPANTS_LIMIT,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  onUpdate({\n    '@type': 'updateGroupCallParticipants',\n    groupCallId: call.id,\n    participants: result.participants.map(buildApiGroupCallParticipant),\n    nextOffset: result.nextOffset,\n  });\n\n  return {\n    users, chats,\n  };\n}\n\nexport function leaveGroupCall({\n  call, isPageUnload,\n}: {\n  call: ApiGroupCall; isPageUnload?: boolean;\n}) {\n  const request = new GramJs.phone.LeaveGroupCall({\n    call: buildInputGroupCall(call),\n  });\n\n  if (isPageUnload) {\n    invokeRequestBeacon(request);\n    return;\n  }\n\n  invokeRequest(request, {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function joinGroupCall({\n  call, inviteHash, params,\n}: {\n  call: ApiGroupCall; inviteHash?: string; params: JoinGroupCallPayload;\n}) {\n  const result = await invokeRequest(new GramJs.phone.JoinGroupCall({\n    call: buildInputGroupCall(call),\n    joinAs: new GramJs.InputPeerSelf(),\n    muted: true,\n    videoStopped: true,\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n    inviteHash,\n  }), {\n    shouldRetryOnTimeout: true,\n    abortControllerGroup: 'call',\n  });\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates.find((u) => u instanceof GramJs.UpdateGroupCall);\n    if (!(update instanceof GramJs.UpdateGroupCall)) return undefined;\n\n    return buildApiGroupCall(update.call);\n  }\n\n  return undefined;\n}\n\nexport async function createGroupCall({\n  peer,\n}: {\n  peer: ApiChat;\n}) {\n  const randomId = generateRandomInt();\n  const result = await invokeRequest(new GramJs.phone.CreateGroupCall({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates[0];\n    if (update instanceof GramJs.UpdateGroupCall) {\n      return buildApiGroupCall(update.call);\n    }\n  }\n\n  return undefined;\n}\n\nexport function joinGroupCallPresentation({\n  call, params,\n}: {\n  call: ApiGroupCall; params: JoinGroupCallPayload;\n}) {\n  return invokeRequest(new GramJs.phone.JoinGroupCallPresentation({\n    call: buildInputGroupCall(call),\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleGroupCallStartSubscription({\n  call, subscribed,\n}: {\n  call: ApiGroupCall; subscribed: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.ToggleGroupCallStartSubscription({\n    call: buildInputGroupCall(call),\n    subscribed,\n  }), {\n    shouldReturnTrue: true,\n    shouldIgnoreErrors: true,\n  });\n}\n\nexport function leaveGroupCallPresentation({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCallPresentation({\n    call: buildInputGroupCall(call),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function getDhConfig() {\n  const dhConfig = await invokeRequest(new GramJs.messages.GetDhConfig({}));\n\n  if (!dhConfig || dhConfig instanceof GramJs.messages.DhConfigNotModified) return undefined;\n\n  return {\n    g: dhConfig.g,\n    p: Array.from(dhConfig.p),\n    random: Array.from(dhConfig.random),\n  };\n}\n\nexport function discardCall({\n  call, isBusy, isPageUnload,\n}: {\n  call: ApiPhoneCall; isBusy?: boolean; isPageUnload?: boolean;\n}) {\n  const request = new GramJs.phone.DiscardCall({\n    peer: buildInputPhoneCall(call),\n    reason: isBusy ? new GramJs.PhoneCallDiscardReasonBusy() : new GramJs.PhoneCallDiscardReasonHangup(),\n  });\n\n  if (isPageUnload) {\n    invokeRequestBeacon(request);\n    return;\n  }\n\n  invokeRequest(request, {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function requestCall({\n  user, gAHash, isVideo,\n}: {\n  user: ApiUser; gAHash: number[]; isVideo?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.RequestCall({\n    randomId: generateRandomInt(),\n    userId: buildInputPeer(user.id, user.accessHash),\n    gAHash: Buffer.from(gAHash),\n    ...(isVideo && { video: true }),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport function setCallRating({\n  call, rating, comment,\n}: {\n  call: ApiPhoneCall; rating: number; comment: string;\n}) {\n  return invokeRequest(new GramJs.phone.SetCallRating({\n    rating,\n    peer: buildInputPhoneCall(call),\n    comment,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function receivedCall({\n  call,\n}: {\n  call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.ReceivedCall({\n    peer: buildInputPhoneCall(call),\n  }));\n}\n\nexport async function acceptCall({\n  call, gB,\n}: {\n  call: ApiPhoneCall; gB: number[];\n}) {\n  const result = await invokeRequest(new GramJs.phone.AcceptCall({\n    peer: buildInputPhoneCall(call),\n    gB: Buffer.from(gB),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function confirmCall({\n  call, gA, keyFingerprint,\n}: {\n  call: ApiPhoneCall; gA: number[]; keyFingerprint: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ConfirmCall({\n    peer: buildInputPhoneCall(call),\n    gA: Buffer.from(gA),\n    keyFingerprint: BigInt(keyFingerprint),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport function sendSignalingData({\n  data, call,\n}: {\n  data: number[]; call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.SendSignalingData({\n    data: Buffer.from(data),\n    peer: buildInputPhoneCall(call),\n  }));\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiChatFullInfo,\n  ApiChatReactions,\n  ApiGroupCall,\n  ApiMessage,\n  ApiPeer,\n  ApiPhoto,\n  ApiTopic,\n  ApiUser,\n  ApiUserStatus,\n  OnApiUpdate,\n} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG,\n  GENERAL_TOPIC_ID,\n  GLOBAL_SEARCH_CONTACTS_LIMIT,\n  MAX_INT_32,\n  MEMBERS_LOAD_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TOPICS_SLICE,\n} from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildApiChatBotCommands,\n  buildApiChatFolder,\n  buildApiChatFolderFromSuggested,\n  buildApiChatFromDialog,\n  buildApiChatFromPreview,\n  buildApiChatFromSavedDialog,\n  buildApiChatlistExportedInvite,\n  buildApiChatlistInvite,\n  buildApiChatReactions,\n  buildApiChatSettings,\n  buildApiTopic,\n  buildChatMembers,\n  getPeerKey,\n} from '../apiBuilders/chats';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { buildApiMessage, buildMessageDraft } from '../apiBuilders/messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildStickerSet } from '../apiBuilders/symbols';\nimport { buildApiUser, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport {\n  buildChatAdminRights,\n  buildChatBannedRights,\n  buildFilterFromApiFolder,\n  buildInputChatReactions,\n  buildInputEntity,\n  buildInputPeer,\n  buildInputPhoto,\n  buildInputReplyTo,\n  buildMtpMessageEntity,\n  generateRandomBigInt,\n  isMessageWithMedia,\n} from '../gramjsBuilders';\nimport {\n  addEntitiesToLocalDb,\n  addMessageToLocalDb,\n  addPhotoToLocalDb,\n  isChatFolder,\n} from '../helpers';\nimport localDb from '../localDb';\nimport { scheduleMutedChatUpdate } from '../scheduleUnmute';\nimport {\n  applyState, processAffectedHistory, processUpdate, updateChannelState,\n} from '../updates/updateManager';\nimport { dispatchThreadInfoUpdates } from '../updates/updater';\nimport { invokeRequest, uploadFile } from './client';\n\ntype FullChatData = {\n  fullInfo: ApiChatFullInfo;\n  users: ApiUser[];\n  chats: ApiChat[];\n  userStatusesById: { [userId: string]: ApiUserStatus };\n  groupCall?: Partial<ApiGroupCall>;\n  membersCount?: number;\n  isForumAsMessages?: true;\n};\n\ntype ChatListData = {\n  chatIds: string[];\n  chats: ApiChat[];\n  users: ApiUser[];\n  userStatusesById: Record<string, ApiUserStatus>;\n  draftsById: Record<string, ApiDraft>;\n  orderedPinnedIds: string[] | undefined;\n  totalChatCount: number;\n  messages: ApiMessage[];\n  lastMessageByChatId: Record<string, number>;\n};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchChats({\n  limit,\n  offsetDate,\n  archived,\n  withPinned,\n  lastLocalServiceMessageId,\n}: {\n  limit: number;\n  offsetDate?: number;\n  archived?: boolean;\n  withPinned?: boolean;\n  lastLocalServiceMessageId?: number;\n}): Promise<ChatListData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetDialogs({\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    offsetDate,\n    ...(withPinned && { excludePinned: true }),\n  }));\n  const resultPinned = withPinned\n    ? await invokeRequest(new GramJs.messages.GetPinnedDialogs({\n      folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n    }))\n    : undefined;\n\n  if (!result || result instanceof GramJs.messages.DialogsNotModified) {\n    return undefined;\n  }\n\n  if (resultPinned) {\n    dispatchThreadInfoUpdates(resultPinned.messages);\n    updateLocalDb(resultPinned);\n  }\n  dispatchThreadInfoUpdates(result.messages);\n  updateLocalDb(result);\n\n  const messages = (resultPinned ? resultPinned.messages : [])\n    .concat(result.messages)\n    .map(buildApiMessage)\n    .filter(Boolean);\n\n  const peersByKey = preparePeers(result);\n  if (resultPinned) {\n    Object.assign(peersByKey, preparePeers(resultPinned, peersByKey));\n  }\n\n  const chats: ApiChat[] = [];\n  const draftsById: Record<string, ApiDraft> = {};\n\n  const dialogs = (resultPinned ? resultPinned.dialogs : []).concat(result.dialogs);\n\n  const orderedPinnedIds: string[] = [];\n  const lastMessageByChatId: Record<string, number> = {};\n\n  dialogs.forEach((dialog) => {\n    if (\n      !(dialog instanceof GramJs.Dialog)\n      // This request can return dialogs not belonging to specified folder\n      || (!archived && dialog.folderId === ARCHIVED_FOLDER_ID)\n      || (archived && dialog.folderId !== ARCHIVED_FOLDER_ID)\n    ) {\n      return;\n    }\n\n    const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n    const chat = buildApiChatFromDialog(dialog, peerEntity);\n    lastMessageByChatId[chat.id] = dialog.topMessage;\n\n    if (dialog.pts) {\n      updateChannelState(chat.id, dialog.pts);\n    }\n\n    if (\n      chat.id === SERVICE_NOTIFICATIONS_USER_ID\n      && lastLocalServiceMessageId\n      && (lastLocalServiceMessageId > dialog.topMessage)\n    ) {\n      lastMessageByChatId[chat.id] = lastLocalServiceMessageId;\n    }\n\n    chat.isListed = true;\n\n    chats.push(chat);\n\n    scheduleMutedChatUpdate(chat.id, chat.muteUntil, onUpdate);\n\n    if (withPinned && dialog.pinned) {\n      orderedPinnedIds.push(chat.id);\n    }\n\n    if (dialog.draft) {\n      const draft = buildMessageDraft(dialog.draft);\n      if (draft) {\n        draftsById[chat.id] = draft;\n      }\n    }\n  });\n\n  const chatIds = chats.map((chat) => chat.id);\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses((resultPinned?.users || []).concat(result.users));\n\n  let totalChatCount: number;\n  if (result instanceof GramJs.messages.DialogsSlice) {\n    totalChatCount = result.count;\n  } else {\n    totalChatCount = chatIds.length;\n  }\n\n  return {\n    chatIds,\n    chats,\n    users,\n    userStatusesById,\n    draftsById,\n    orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n    totalChatCount,\n    lastMessageByChatId,\n    messages,\n  };\n}\n\nexport async function fetchSavedChats({\n  limit,\n  offsetDate,\n  withPinned,\n}: {\n  limit: number;\n  offsetDate?: number;\n  withPinned?: boolean;\n}): Promise<ChatListData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetSavedDialogs({\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    offsetDate,\n    ...(withPinned && { excludePinned: true }),\n  }));\n  const resultPinned = withPinned\n    ? await invokeRequest(new GramJs.messages.GetPinnedSavedDialogs())\n    : undefined;\n\n  if (!result || result instanceof GramJs.messages.SavedDialogsNotModified) {\n    return undefined;\n  }\n\n  const hasPinned = resultPinned && !(resultPinned instanceof GramJs.messages.SavedDialogsNotModified);\n\n  if (hasPinned) {\n    updateLocalDb(resultPinned);\n  }\n  updateLocalDb(result);\n\n  dispatchThreadInfoUpdates(result.messages);\n\n  const messages = (hasPinned ? resultPinned.messages : [])\n    .concat(result.messages)\n    .map(buildApiMessage)\n    .filter(Boolean);\n\n  const peersByKey = preparePeers(result);\n  if (hasPinned) {\n    Object.assign(peersByKey, preparePeers(resultPinned, peersByKey));\n  }\n\n  const dialogs = (hasPinned ? resultPinned.dialogs : []).concat(result.dialogs);\n\n  const chatIds: string[] = [];\n  const orderedPinnedIds: string[] = [];\n  const lastMessageByChatId: Record<string, number> = {};\n\n  const chats: ApiChat[] = [];\n\n  dialogs.forEach((dialog) => {\n    const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n    const chat = buildApiChatFromSavedDialog(dialog, peerEntity);\n    const chatId = getApiChatIdFromMtpPeer(dialog.peer);\n\n    chatIds.push(chatId);\n    if (withPinned && dialog.pinned) {\n      orderedPinnedIds.push(chatId);\n    }\n\n    lastMessageByChatId[chatId] = dialog.topMessage;\n\n    chats.push(chat);\n  });\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses((hasPinned ? resultPinned.users : [])\n    .concat(result.users));\n\n  let totalChatCount: number;\n  if (result instanceof GramJs.messages.SavedDialogsSlice) {\n    totalChatCount = result.count;\n  } else {\n    totalChatCount = chatIds.length;\n  }\n\n  return {\n    chatIds,\n    chats,\n    users,\n    userStatusesById,\n    orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n    totalChatCount,\n    lastMessageByChatId,\n    messages,\n    draftsById: {},\n  };\n}\n\nexport function fetchFullChat(chat: ApiChat) {\n  const { id, accessHash, adminRights } = chat;\n\n  const input = buildInputEntity(id, accessHash);\n\n  return input instanceof GramJs.InputChannel\n    ? getFullChannelInfo(id, accessHash!, adminRights)\n    : getFullChatInfo(id);\n}\n\nexport async function fetchChatSettings(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerSettings({\n    peer: buildInputPeer(id, accessHash),\n  }), {\n    abortControllerChatId: id,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    settings: buildApiChatSettings(result.settings),\n  };\n}\n\nexport async function searchChats({ query }: { query: string }) {\n  const result = await invokeRequest(new GramJs.contacts.Search({ q: query, limit: GLOBAL_SEARCH_CONTACTS_LIMIT }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const accountPeerIds = result.myResults.map(getApiChatIdFromMtpPeer);\n  const allChats = result.chats.concat(result.users)\n    .map((user) => buildApiChatFromPreview(user))\n    .filter(Boolean);\n  const allUsers = result.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n\n  return {\n    accountChats: allChats.filter((r) => accountPeerIds.includes(r.id)),\n    accountUsers: allUsers.filter((u) => accountPeerIds.includes(u.id)),\n    globalChats: allChats.filter((r) => !accountPeerIds.includes(r.id)),\n    globalUsers: allUsers.filter((u) => !accountPeerIds.includes(u.id)),\n  };\n}\n\nexport async function fetchChat({\n  type, user,\n}: {\n  type: 'user' | 'self' | 'support'; user?: ApiUser;\n}) {\n  let mtpUser: GramJs.User | undefined;\n\n  if (type === 'self' || type === 'user') {\n    const result = await invokeRequest(new GramJs.users.GetUsers({\n      id: [\n        type === 'user' && user\n          ? buildInputEntity(user.id, user.accessHash) as GramJs.InputUser\n          : new GramJs.InputUserSelf(),\n      ],\n    }));\n    if (!result || !result.length) {\n      return undefined;\n    }\n\n    [mtpUser] = result;\n  } else if (type === 'support') {\n    const result = await invokeRequest(new GramJs.help.GetSupport());\n    if (!result || !result.user) {\n      return undefined;\n    }\n\n    mtpUser = result.user;\n  }\n\n  const chat = buildApiChatFromPreview(mtpUser!, type === 'support');\n  if (!chat) {\n    return undefined;\n  }\n\n  onUpdate({\n    '@type': 'updateChat',\n    id: chat.id,\n    chat,\n  });\n\n  return { chatId: chat.id };\n}\n\nexport async function requestChatUpdate({\n  chat,\n  lastLocalMessage,\n  noLastMessage,\n}: {\n  chat: ApiChat; lastLocalMessage?: ApiMessage; noLastMessage?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerDialogs({\n    peers: [new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    })],\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  const dialog = result.dialogs[0];\n  if (!dialog || !(dialog instanceof GramJs.Dialog)) {\n    return;\n  }\n\n  const peersByKey = preparePeers(result);\n  const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  if (!peerEntity) {\n    return;\n  }\n\n  updateLocalDb(result);\n\n  const lastRemoteMessage = buildApiMessage(result.messages[0]);\n  dispatchThreadInfoUpdates(result.messages);\n\n  const lastMessage = lastLocalMessage && (!lastRemoteMessage || (lastLocalMessage.date > lastRemoteMessage.date))\n    ? lastLocalMessage\n    : lastRemoteMessage;\n\n  const chatUpdate = buildApiChatFromDialog(dialog, peerEntity);\n\n  onUpdate({\n    '@type': 'updateChat',\n    id,\n    chat: chatUpdate,\n  });\n\n  if (!noLastMessage && lastMessage) {\n    onUpdate({\n      '@type': 'updateChatLastMessage',\n      id,\n      lastMessage,\n    });\n  }\n\n  applyState(result.state);\n\n  scheduleMutedChatUpdate(chatUpdate.id, chatUpdate.muteUntil, onUpdate);\n}\n\nexport function saveDraft({\n  chat,\n  draft,\n}: {\n  chat: ApiChat;\n  draft?: ApiDraft;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: draft?.text?.text || '',\n    entities: draft?.text?.entities?.map(buildMtpMessageEntity),\n    replyTo: draft?.replyInfo && buildInputReplyTo(draft.replyInfo),\n  }));\n}\n\nasync function getFullChatInfo(chatId: string): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetFullChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChatFull)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const {\n    about,\n    participants,\n    exportedInvite,\n    botInfo,\n    call,\n    availableReactions,\n    recentRequesters,\n    requestsPending,\n    chatPhoto,\n    translationsDisabled,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const members = buildChatMembers(participants);\n  const adminMembers = members ? members.filter(({ isAdmin, isOwner }) => isAdmin || isOwner) : undefined;\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported ? exportedInvite.link : undefined;\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n  const chats = result.chats.map((chat) => buildApiChatFromPreview(chat)).filter(Boolean);\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      members,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      canViewMembers: true,\n      botCommands,\n      inviteLink,\n      groupCallId: call?.id.toString(),\n      enabledReactions: buildApiChatReactions(availableReactions),\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      isTranslationDisabled: translationsDisabled,\n    },\n    users,\n    chats,\n    userStatusesById,\n    groupCall: call ? {\n      chatId,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call.accessHash.toString(),\n      connectionState: 'disconnected',\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    } : undefined,\n    membersCount: members?.length,\n  };\n}\n\nasync function getFullChannelInfo(\n  id: string,\n  accessHash: string,\n  adminRights?: ApiChatAdminRights,\n): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.channels.GetFullChannel({\n    channel: buildInputEntity(id, accessHash) as GramJs.InputChannel,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChannelFull)) {\n    return undefined;\n  }\n\n  const {\n    about,\n    onlineCount,\n    exportedInvite,\n    slowmodeSeconds,\n    slowmodeNextSendDate,\n    migratedFromChatId,\n    migratedFromMaxId,\n    canViewParticipants,\n    canViewStats,\n    linkedChatId,\n    hiddenPrehistory,\n    call,\n    botInfo,\n    availableReactions,\n    defaultSendAs,\n    requestsPending,\n    recentRequesters,\n    statsDc,\n    participantsCount,\n    stickerset,\n    chatPhoto,\n    participantsHidden,\n    translationsDisabled,\n    storiesPinnedAvailable,\n    viewForumAsMessages,\n    emojiset,\n    boostsApplied,\n    boostsUnrestrict,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported\n    ? exportedInvite.link\n    : undefined;\n\n  const { members, users, userStatusesById } = (canViewParticipants && await fetchMembers(id, accessHash)) || {};\n  const { members: kickedMembers, users: bannedUsers, userStatusesById: bannedStatusesById } = (\n    canViewParticipants && adminRights && await fetchMembers(id, accessHash, 'kicked')\n  ) || {};\n  const { members: adminMembers, users: adminUsers, userStatusesById: adminStatusesById } = (\n    canViewParticipants && await fetchMembers(id, accessHash, 'admin')\n  ) || {};\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const chats = result.chats.map((chat) => buildApiChatFromPreview(chat)).filter(Boolean);\n\n  if (result?.chats?.length > 1) {\n    updateLocalDb(result);\n\n    const [, mtpLinkedChat] = result.chats;\n    const chat = buildApiChatFromPreview(mtpLinkedChat);\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  if (result.fullChat.pts) {\n    updateChannelState(id, result.fullChat.pts);\n  }\n\n  const statusesById = {\n    ...userStatusesById,\n    ...bannedStatusesById,\n    ...adminStatusesById,\n  };\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      onlineCount,\n      inviteLink,\n      slowMode: slowmodeSeconds ? {\n        seconds: slowmodeSeconds,\n        nextSendDate: slowmodeNextSendDate,\n      } : undefined,\n      migratedFrom: migratedFromChatId ? {\n        chatId: buildApiPeerId(migratedFromChatId, 'chat'),\n        maxMessageId: migratedFromMaxId,\n      } : undefined,\n      canViewMembers: canViewParticipants,\n      canViewStatistics: canViewStats,\n      isPreHistoryHidden: hiddenPrehistory,\n      members,\n      kickedMembers,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      groupCallId: call ? String(call.id) : undefined,\n      linkedChatId: linkedChatId ? buildApiPeerId(linkedChatId, 'channel') : undefined,\n      botCommands,\n      enabledReactions: buildApiChatReactions(availableReactions),\n      sendAsId: defaultSendAs ? getApiChatIdFromMtpPeer(defaultSendAs) : undefined,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      statisticsDcId: statsDc,\n      stickerSet: stickerset ? buildStickerSet(stickerset) : undefined,\n      emojiSet: emojiset ? buildStickerSet(emojiset) : undefined,\n      areParticipantsHidden: participantsHidden,\n      isTranslationDisabled: translationsDisabled,\n      hasPinnedStories: Boolean(storiesPinnedAvailable),\n      boostsApplied,\n      boostsToUnrestrict: boostsUnrestrict,\n    },\n    users: [...(users || []), ...(bannedUsers || []), ...(adminUsers || [])],\n    chats,\n    userStatusesById: statusesById,\n    groupCall: call ? {\n      chatId: id,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call?.accessHash.toString(),\n      participants: {},\n      version: 0,\n      participantsCount: 0,\n      connectionState: 'disconnected',\n    } : undefined,\n    membersCount: participantsCount,\n    ...(viewForumAsMessages && { isForumAsMessages: true }),\n  };\n}\n\nexport async function updateChatMutedState({\n  chat, isMuted, muteUntil = 0,\n}: {\n  chat: ApiChat; isMuted: boolean; muteUntil?: number;\n}) {\n  if (isMuted && !muteUntil) {\n    muteUntil = MAX_INT_32;\n  }\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyPeer({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil }),\n  }));\n\n  onUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId: chat.id,\n    isMuted,\n  });\n\n  void requestChatUpdate({\n    chat,\n    noLastMessage: true,\n  });\n}\n\nexport async function updateTopicMutedState({\n  chat, topicId, isMuted, muteUntil = 0,\n}: {\n  chat: ApiChat; topicId: number; isMuted: boolean; muteUntil?: number;\n}) {\n  if (isMuted && !muteUntil) {\n    muteUntil = MAX_INT_32;\n  }\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyForumTopic({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      topMsgId: topicId,\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil }),\n  }));\n\n  onUpdate({\n    '@type': 'updateTopicNotifyExceptions',\n    chatId: chat.id,\n    topicId,\n    isMuted,\n  });\n\n  // TODO[forums] Request forum topic thread update\n}\n\nexport async function createChannel({\n  title, about = '', users,\n}: {\n  title: string; about?: string; users?: ApiUser[];\n}) {\n  const result = await invokeRequest(new GramJs.channels.CreateChannel({\n    broadcast: true,\n    title,\n    about,\n  }), {\n    shouldThrow: true,\n  });\n\n  // `createChannel` can return a lot of different update types according to docs,\n  // but currently channel creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChannel = result.chats[0];\n  if (!newChannel || !(newChannel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created channel not found', result);\n    }\n    return undefined;\n  }\n\n  const channel = buildApiChatFromPreview(newChannel)!;\n\n  let restrictedUserIds: string[] | undefined;\n\n  if (users?.length) {\n    try {\n      const updates = await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(channel.id, channel.accessHash) as GramJs.InputChannel,\n        users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n      }), {\n        shouldIgnoreUpdates: true,\n        shouldThrow: true,\n      });\n      if (updates) {\n        processUpdate(updates);\n        restrictedUserIds = handleUserPrivacyRestrictedUpdates(updates);\n      }\n    } catch (err) {\n      if ((err as Error).message === 'USER_PRIVACY_RESTRICTED') {\n        restrictedUserIds = users.map(({ id }) => id);\n      } else {\n        onUpdate({\n          '@type': 'error',\n          error: {\n            message: (err as Error).message,\n          },\n        });\n      }\n    }\n  }\n\n  return { channel, restrictedUserIds };\n}\n\nexport function joinChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.JoinChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport function deleteChatUser({\n  chat, user,\n}: {\n  chat: ApiChat; user: ApiUser;\n}) {\n  if (chat.type !== 'chatTypeBasicGroup') return undefined;\n  return invokeRequest(new GramJs.messages.DeleteChatUser({\n    chatId: buildInputEntity(chat.id, chat.accessHash) as BigInt.BigInteger,\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function deleteChat({\n  chatId,\n}: {\n  chatId: string;\n}) {\n  return invokeRequest(new GramJs.messages.DeleteChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function leaveChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.LeaveChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function deleteChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.DeleteChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function createGroupChat({\n  title, users,\n}: {\n  title: string; users: ApiUser[];\n}) {\n  const result = await invokeRequest(new GramJs.messages.CreateChat({\n    title,\n    users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n  }), {\n    shouldIgnoreUpdates: true,\n    shouldThrow: true,\n  });\n\n  // `createChat` can return a lot of different update types according to docs,\n  // but currently chat creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected chat creation update', result);\n    }\n    return undefined;\n  }\n  processUpdate(result);\n  const restrictedUserIds = handleUserPrivacyRestrictedUpdates(result);\n\n  const newChat = result.chats[0];\n  if (!newChat || !(newChat instanceof GramJs.Chat)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created chat not found', result);\n    }\n    return undefined;\n  }\n\n  return { chat: buildApiChatFromPreview(newChat), restrictedUserIds };\n}\n\nexport async function editChatPhoto({\n  chatId, accessHash, photo,\n}: {\n  chatId: string; accessHash?: string; photo?: File | ApiPhoto;\n}) {\n  const inputEntity = buildInputEntity(chatId, accessHash);\n  let inputPhoto: GramJs.TypeInputChatPhoto;\n  if (photo instanceof File) {\n    const uploadedPhoto = await uploadFile(photo);\n    inputPhoto = new GramJs.InputChatUploadedPhoto({\n      file: uploadedPhoto,\n    });\n  } else if (photo) {\n    const photoId = buildInputPhoto(photo);\n    if (!photoId) return false;\n    inputPhoto = new GramJs.InputChatPhoto({\n      id: photoId,\n    });\n  } else {\n    inputPhoto = new GramJs.InputChatPhotoEmpty();\n  }\n  return invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditPhoto({\n        channel: inputEntity as GramJs.InputChannel,\n        photo: inputPhoto,\n      })\n      : new GramJs.messages.EditChatPhoto({\n        chatId: inputEntity as BigInt.BigInteger,\n        photo: inputPhoto,\n      }),\n    {\n      shouldReturnTrue: true,\n    },\n  );\n}\n\nexport async function toggleChatPinned({\n  chat,\n  shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport async function toggleSavedDialogPinned({\n  chat, shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleSavedDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateSavedDialogPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport function toggleChatArchived({\n  chat, folderId,\n}: {\n  chat: ApiChat; folderId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.folders.EditPeerFolders({\n    folderPeers: [new GramJs.InputFolderPeer({\n      peer: buildInputPeer(id, accessHash),\n      folderId,\n    })],\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchChatFolders() {\n  const result = await invokeRequest(new GramJs.messages.GetDialogFilters());\n\n  if (!result) {\n    return undefined;\n  }\n\n  const defaultFolderPosition = result.findIndex((folder) => folder instanceof GramJs.DialogFilterDefault);\n  const dialogFilters = result.filter(isChatFolder);\n  const orderedIds = dialogFilters.map(({ id }) => id);\n  if (defaultFolderPosition !== -1) {\n    orderedIds.splice(defaultFolderPosition, 0, ALL_FOLDER_ID);\n  }\n  return {\n    byId: buildCollectionByKey(\n      dialogFilters\n        .map(buildApiChatFolder), 'id',\n    ) as Record<number, ApiChatFolder>,\n    orderedIds,\n  };\n}\n\nexport async function fetchRecommendedChatFolders() {\n  const results = await invokeRequest(new GramJs.messages.GetSuggestedDialogFilters());\n\n  if (!results) {\n    return undefined;\n  }\n\n  return results.map(buildApiChatFolderFromSuggested).filter(Boolean);\n}\n\nexport async function editChatFolder({\n  id,\n  folderUpdate,\n}: {\n  id: number;\n  folderUpdate: ApiChatFolder;\n}) {\n  // Telegram ignores excluded chats if they also present in the included list\n  folderUpdate.excludedChatIds = folderUpdate.excludedChatIds.filter((chatId) => {\n    return !folderUpdate.includedChatIds.includes(chatId);\n  });\n\n  const filter = buildFilterFromApiFolder(folderUpdate);\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n    id,\n    filter,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: folderUpdate,\n    });\n  }\n}\n\nexport async function deleteChatFolder(id: number) {\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n    id,\n    filter: undefined,\n  }));\n  const recommendedChatFolders = await fetchRecommendedChatFolders();\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: undefined,\n    });\n  }\n  if (recommendedChatFolders) {\n    onUpdate({\n      '@type': 'updateRecommendedChatFolders',\n      folders: recommendedChatFolders,\n    });\n  }\n}\n\nexport function sortChatFolders(ids: number[]) {\n  return invokeRequest(new GramJs.messages.UpdateDialogFiltersOrder({\n    order: ids,\n  }));\n}\n\nexport async function toggleDialogUnread({\n  chat, hasUnreadMark,\n}: {\n  chat: ApiChat; hasUnreadMark: boolean | undefined;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.MarkDialogUnread({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    unread: hasUnreadMark || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { hasUnreadMark },\n    });\n  }\n}\n\nexport async function getChatByPhoneNumber(phoneNumber: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolvePhone({\n    phone: phoneNumber,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nexport async function getChatByUsername(username: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolveUsername({\n    username,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nfunction processResolvedPeer(result?: GramJs.contacts.TypeResolvedPeer) {\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, chats } = result;\n\n  const chat = chats.length\n    ? buildApiChatFromPreview(chats[0])\n    : buildApiChatFromPreview(users[0]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    chat,\n    user: buildApiUser(users[0]),\n  };\n}\n\nexport function togglePreHistoryHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.TogglePreHistoryHidden({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateChatDefaultBannedRights({\n  chat, bannedRights,\n}: { chat: ApiChat; bannedRights: ApiChatBannedRights }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  return invokeRequest(new GramJs.messages.EditChatDefaultBannedRights({\n    peer,\n    bannedRights: buildChatBannedRights(bannedRights),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateChatMemberBannedRights({\n  chat, user, bannedRights, untilDate,\n}: { chat: ApiChat; user: ApiUser; bannedRights: ApiChatBannedRights; untilDate?: number }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const participant = buildInputPeer(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditBanned({\n    channel,\n    participant,\n    bannedRights: buildChatBannedRights(bannedRights, untilDate),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateChatAdmin({\n  chat, user, adminRights, customTitle = '',\n}: { chat: ApiChat; user: ApiUser; adminRights: ApiChatAdminRights; customTitle?: string }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const userId = buildInputEntity(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditAdmin({\n    channel,\n    userId,\n    adminRights: buildChatAdminRights(adminRights),\n    rank: customTitle,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function updateChatTitle(chat: ApiChat, title: string) {\n  const inputEntity = buildInputEntity(chat.id, chat.accessHash);\n  await invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditTitle({\n        channel: inputEntity as GramJs.InputChannel,\n        title,\n      }) : new GramJs.messages.EditChatTitle({\n        chatId: inputEntity as BigInt.BigInteger,\n        title,\n      }),\n    {\n      shouldReturnTrue: true,\n    },\n  );\n}\n\nexport async function updateChatAbout(chat: ApiChat, about: string) {\n  const result = await invokeRequest(new GramJs.messages.EditChatAbout({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    about,\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      about,\n    },\n  });\n}\n\nexport function toggleSignatures({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleSignatures({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\ntype ChannelMembersFilter =\n  'kicked'\n  | 'admin'\n  | 'recent';\n\nexport async function fetchMembers(\n  chatId: string,\n  accessHash: string,\n  memberFilter: ChannelMembersFilter = 'recent',\n  offset?: number,\n) {\n  let filter: GramJs.TypeChannelParticipantsFilter;\n\n  switch (memberFilter) {\n    case 'kicked':\n      filter = new GramJs.ChannelParticipantsKicked({ q: '' });\n      break;\n    case 'admin':\n      filter = new GramJs.ChannelParticipantsAdmins();\n      break;\n    default:\n      filter = new GramJs.ChannelParticipantsRecent();\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.channels.GetParticipants({\n    channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n    filter,\n    offset,\n    limit: MEMBERS_LOAD_SLICE,\n  }), {\n    abortControllerChatId: chatId,\n  });\n\n  if (!result || result instanceof GramJs.channels.ChannelParticipantsNotModified) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    members: buildChatMembers(result),\n    users,\n    userStatusesById,\n  };\n}\n\nexport async function fetchGroupsForDiscussion() {\n  const result = await invokeRequest(new GramJs.channels.GetGroupsForDiscussion());\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.chats.map((chat) => buildApiChatFromPreview(chat));\n}\n\nexport function setDiscussionGroup({\n  channel,\n  chat,\n}: {\n  channel: ApiChat;\n  chat?: ApiChat;\n}) {\n  return invokeRequest(new GramJs.channels.SetDiscussionGroup({\n    broadcast: buildInputPeer(channel.id, channel.accessHash),\n    group: chat ? buildInputPeer(chat.id, chat.accessHash) : new GramJs.InputChannelEmpty(),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function migrateChat(chat: ApiChat) {\n  const result = await invokeRequest(\n    new GramJs.messages.MigrateChat({ chatId: buildInputEntity(chat.id) as BigInt.BigInteger }),\n    {\n      shouldThrow: true,\n    },\n  );\n\n  // `migrateChat` can return a lot of different update types according to docs,\n  // but currently chat migrations returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!result || !(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const newChannelId = result.updates\n    .find((update): update is GramJs.UpdateChannel => update instanceof GramJs.UpdateChannel)!.channelId;\n\n  const newChannel = result.chats.find((c) => (\n    c instanceof GramJs.Channel && c.id.toString() === newChannelId.toString()\n  ))!;\n\n  return buildApiChatFromPreview(newChannel);\n}\n\nexport async function openChatByInvite(hash: string) {\n  const result = await invokeRequest(new GramJs.messages.CheckChatInvite({ hash }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  let chat: ApiChat | undefined;\n\n  if (result instanceof GramJs.ChatInvite) {\n    const {\n      photo, participantsCount, title, channel, requestNeeded, about, megagroup,\n    } = result;\n\n    if (photo instanceof GramJs.Photo) {\n      addPhotoToLocalDb(result.photo);\n    }\n\n    onUpdate({\n      '@type': 'showInvite',\n      data: {\n        title,\n        about,\n        hash,\n        participantsCount,\n        isChannel: channel && !megagroup,\n        isRequestNeeded: requestNeeded,\n        ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n      },\n    });\n  } else {\n    chat = buildApiChatFromPreview(result.chat);\n\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return { chatId: chat.id };\n}\n\nexport async function addChatMembers(chat: ApiChat, users: ApiUser[]) {\n  try {\n    if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n      try {\n        const updates = await invokeRequest(new GramJs.channels.InviteToChannel({\n          channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n          users: users.map((user) => buildInputEntity(user.id, user.accessHash)) as GramJs.InputUser[],\n        }), {\n          shouldIgnoreUpdates: true,\n          shouldThrow: true,\n        });\n        if (updates) {\n          processUpdate(updates);\n          return handleUserPrivacyRestrictedUpdates(updates);\n        }\n      } catch (err) {\n        if ((err as Error).message === 'USER_PRIVACY_RESTRICTED') {\n          return users.map(({ id }) => id);\n        }\n        throw err;\n      }\n    }\n\n    const addChatUsersResult = await Promise.all(\n      users.map(async (user) => {\n        try {\n          const updates = await invokeRequest(new GramJs.messages.AddChatUser({\n            chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n            userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n          }), {\n            shouldIgnoreUpdates: true,\n            shouldThrow: true,\n          });\n          if (updates) {\n            processUpdate(updates);\n            return handleUserPrivacyRestrictedUpdates(updates);\n          }\n          return undefined;\n        } catch (err) {\n          if ((err as Error).message === 'USER_PRIVACY_RESTRICTED') {\n            return [user.id];\n          }\n          throw err;\n        }\n      }),\n    );\n    if (addChatUsersResult) {\n      return addChatUsersResult.flat().filter(Boolean);\n    }\n  } catch (err) {\n    onUpdate({\n      '@type': 'error',\n      error: {\n        message: (err as Error).message,\n      },\n    });\n  }\n  return undefined;\n}\n\nexport function deleteChatMember(chat: ApiChat, user: ApiUser) {\n  if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n    return updateChatMemberBannedRights({\n      chat,\n      user,\n      bannedRights: {\n        viewMessages: true,\n        sendMessages: true,\n        sendMedia: true,\n        sendStickers: true,\n        sendGifs: true,\n        sendGames: true,\n        sendInline: true,\n        embedLinks: true,\n        sendPolls: true,\n        changeInfo: true,\n        inviteUsers: true,\n        pinMessages: true,\n        manageTopics: true,\n        sendPhotos: true,\n        sendVideos: true,\n        sendRoundvideos: true,\n        sendAudios: true,\n        sendVoices: true,\n        sendDocs: true,\n        sendPlain: true,\n      },\n      untilDate: MAX_INT_32,\n    });\n  } else {\n    return invokeRequest(new GramJs.messages.DeleteChatUser({\n      chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n      userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    }), {\n      shouldReturnTrue: true,\n    });\n  }\n}\n\nexport function toggleJoinToSend(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinToSend({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleJoinRequest(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinRequest({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nfunction preparePeers(\n  result: GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs |\n  GramJs.messages.SavedDialogs | GramJs.messages.SavedDialogsSlice,\n  currentStore?: Record<string, GramJs.TypeChat | GramJs.TypeUser>,\n) {\n  const store: Record<string, GramJs.TypeChat | GramJs.TypeUser> = {};\n\n  result.chats?.forEach((chat) => {\n    const key = `chat${chat.id}`;\n\n    if (currentStore?.[key] && 'min' in chat && chat.min) {\n      return;\n    }\n\n    store[key] = chat;\n  });\n\n  result.users?.forEach((user) => {\n    const key = `user${user.id}`;\n\n    if (currentStore?.[key] && 'min' in user && user.min) {\n      return;\n    }\n\n    store[key] = user;\n  });\n\n  return store;\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs |\n  GramJs.messages.SavedDialogs | GramJs.messages.SavedDialogsSlice |\n  GramJs.messages.ChatFull | GramJs.contacts.Found |\n  GramJs.contacts.ResolvedPeer | GramJs.channels.ChannelParticipants |\n  GramJs.messages.Chats | GramJs.messages.ChatsSlice | GramJs.TypeUpdates | GramJs.messages.ForumTopics\n)) {\n  if ('users' in result) {\n    addEntitiesToLocalDb(result.users);\n  }\n\n  if ('chats' in result) {\n    addEntitiesToLocalDb(result.chats);\n  }\n\n  if ('messages' in result) {\n    result.messages.forEach((message) => {\n      if (message instanceof GramJs.Message && isMessageWithMedia(message)) {\n        addMessageToLocalDb(message);\n      }\n    });\n  }\n}\n\nexport async function importChatInvite({ hash }: { hash: string }) {\n  const updates = await invokeRequest(new GramJs.messages.ImportChatInvite({ hash }));\n  if (!(updates instanceof GramJs.Updates) || !updates.chats.length) {\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(updates.chats[0]);\n}\n\nexport function setChatEnabledReactions({\n  chat, enabledReactions,\n}: {\n  chat: ApiChat; enabledReactions?: ApiChatReactions;\n}) {\n  return invokeRequest(new GramJs.messages.SetChatAvailableReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    availableReactions: buildInputChatReactions(enabledReactions),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleIsProtected({\n  chat, isProtected,\n}: { chat: ApiChat; isProtected: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.ToggleNoForwards({\n    peer: buildInputPeer(id, accessHash),\n    enabled: isProtected,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleParticipantsHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleParticipantsHidden({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleForum({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleForum({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport async function createTopic({\n  chat, title, iconColor, iconEmojiId, sendAs,\n}: {\n  chat: ApiChat;\n  title: string;\n  iconColor?: number;\n  iconEmojiId?: string;\n  sendAs?: ApiPeer;\n}) {\n  const { id, accessHash } = chat;\n\n  const updates = await invokeRequest(new GramJs.channels.CreateForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    sendAs: sendAs ? buildInputPeer(sendAs.id, sendAs.accessHash) : undefined,\n    randomId: generateRandomBigInt(),\n  }));\n\n  if (!(updates instanceof GramJs.Updates) || !updates.updates.length) {\n    return undefined;\n  }\n\n  // Finding topic id in updates\n  return updates.updates?.find((update): update is GramJs.UpdateMessageID => (\n    update instanceof GramJs.UpdateMessageID\n  ))?.id;\n}\n\nexport async function fetchTopics({\n  chat, query, offsetTopicId, offsetId, offsetDate, limit = TOPICS_SLICE,\n}: {\n  chat: ApiChat;\n  query?: string;\n  offsetTopicId?: number;\n  offsetId?: number;\n  offsetDate?: number;\n  limit?: number;\n}): Promise<{\n    topics: ApiTopic[];\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    count: number;\n    shouldOrderByCreateDate?: boolean;\n    draftsById: Record<number, ReturnType<typeof buildMessageDraft>>;\n    readInboxMessageIdByTopicId: Record<number, number>;\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopics({\n    channel: buildInputPeer(id, accessHash),\n    limit,\n    q: query,\n    offsetTopic: offsetTopicId,\n    offsetId,\n    offsetDate,\n  }));\n\n  if (!result) return undefined;\n\n  updateLocalDb(result);\n\n  const { count, orderByCreateDate } = result;\n\n  const topics = result.topics.map(buildApiTopic).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const draftsById = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.draft) {\n      acc[topic.id] = buildMessageDraft(topic.draft);\n    }\n    return acc;\n  }, {} as Record<number, ReturnType<typeof buildMessageDraft>>);\n  const readInboxMessageIdByTopicId = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.readInboxMaxId) {\n      acc[topic.id] = topic.readInboxMaxId;\n    }\n    return acc;\n  }, {} as Record<number, number>);\n\n  return {\n    topics,\n    messages,\n    users,\n    chats,\n    // Include general topic\n    count: count + 1,\n    shouldOrderByCreateDate: orderByCreateDate,\n    draftsById,\n    readInboxMessageIdByTopicId,\n  };\n}\n\nexport async function fetchTopicById({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}): Promise<{\n    topic: ApiTopic;\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopicsByID({\n    channel: buildInputPeer(id, accessHash),\n    topics: [topicId],\n  }));\n\n  if (!result?.topics.length || !(result.topics[0] instanceof GramJs.ForumTopic)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    topic: buildApiTopic(result.topics[0])!,\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function deleteTopic({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.DeleteTopicHistory({\n    channel: buildInputPeer(id, accessHash),\n    topMsgId: topicId,\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await deleteTopic({ chat, topicId });\n  }\n}\n\nexport function togglePinnedTopic({\n  chat, topicId, isPinned,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  isPinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.UpdatePinnedForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    pinned: isPinned,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function editTopic({\n  chat, topicId, title, iconEmojiId, isClosed, isHidden,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  title?: string;\n  iconEmojiId?: string;\n  isClosed?: boolean;\n  isHidden?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.EditForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    title,\n    iconEmojiId: topicId !== GENERAL_TOPIC_ID && iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    closed: isClosed,\n    hidden: isHidden,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function checkChatlistInvite({\n  slug,\n}: {\n  slug: string;\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.CheckChatlistInvite({\n    slug,\n  }));\n\n  const invite = buildApiChatlistInvite(result, slug);\n\n  if (!result || !invite) return undefined;\n\n  updateLocalDb(result);\n\n  return {\n    invite,\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n  };\n}\n\nexport function joinChatlistInvite({\n  slug,\n  peers,\n}: {\n  slug: string;\n  peers: ApiChat[];\n}) {\n  return invokeRequest(new GramJs.chatlists.JoinChatlistInvite({\n    slug,\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport async function fetchLeaveChatlistSuggestions({\n  folderId,\n}: {\n  folderId: number;\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.GetLeaveChatlistSuggestions({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n  }));\n\n  if (!result) return undefined;\n\n  return result.map(getApiChatIdFromMtpPeer);\n}\n\nexport function leaveChatlist({\n  folderId,\n  peers,\n}: {\n  folderId: number;\n  peers: ApiChat[];\n}) {\n  return invokeRequest(new GramJs.chatlists.LeaveChatlist({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function createChalistInvite({\n  folderId, title, peers,\n}: {\n  folderId: number;\n  title?: string;\n  peers: ApiPeer[];\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.ExportChatlistInvite({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    title: title || '',\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldThrow: true,\n  });\n\n  if (!result || result.filter instanceof GramJs.DialogFilterDefault) return undefined;\n\n  return {\n    filter: buildApiChatFolder(result.filter),\n    invite: buildApiChatlistExportedInvite(result.invite),\n  };\n}\n\nexport function deleteChatlistInvite({\n  folderId, slug,\n}: {\n  folderId: number;\n  slug: string;\n}) {\n  return invokeRequest(new GramJs.chatlists.DeleteExportedInvite({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    slug,\n  }));\n}\n\nexport async function editChatlistInvite({\n  folderId, slug, title, peers,\n}: {\n  folderId: number;\n  slug: string;\n  title?: string;\n  peers: ApiPeer[];\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.EditExportedInvite({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n    slug,\n    title,\n    peers: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), {\n    shouldThrow: true,\n  });\n  if (!result) return undefined;\n\n  return buildApiChatlistExportedInvite(result);\n}\n\nexport async function fetchChatlistInvites({\n  folderId,\n}: {\n  folderId: number;\n}) {\n  const result = await invokeRequest(new GramJs.chatlists.GetExportedInvites({\n    chatlist: new GramJs.InputChatlistDialogFilter({\n      filterId: folderId,\n    }),\n  }));\n\n  if (!result) return undefined;\n\n  updateLocalDb(result);\n\n  return {\n    invites: result.invites.map(buildApiChatlistExportedInvite).filter(Boolean),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n  };\n}\n\nexport function togglePeerTranslations({\n  chat, isEnabled,\n}: {\n  chat: ApiChat;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.TogglePeerTranslations({\n    disabled: isEnabled ? undefined : true,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n}\n\nexport function setViewForumAsMessages({ chat, isEnabled }: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleViewForumAsMessages({\n    channel: channel as GramJs.InputChannel,\n    enabled: Boolean(isEnabled),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function fetchChannelRecommendations({ chat }: { chat: ApiChat }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  const result = await invokeRequest(new GramJs.channels.GetChannelRecommendations({\n    channel: channel as GramJs.InputChannel,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    similarChannels: result?.chats\n      .map((_chat) => buildApiChatFromPreview(_chat))\n      .filter(Boolean),\n    count:\n      result instanceof GramJs.messages.ChatsSlice ? result.count : undefined,\n  };\n}\n\nfunction handleUserPrivacyRestrictedUpdates(updates: GramJs.TypeUpdates) {\n  if (!(updates instanceof GramJs.Updates) && !(updates instanceof GramJs.UpdatesCombined)) {\n    return undefined;\n  }\n\n  const eligibleUpdates = updates\n    .updates\n    .filter(\n      (u): u is GramJs.UpdateGroupInvitePrivacyForbidden => {\n        return u instanceof GramJs.UpdateGroupInvitePrivacyForbidden;\n      },\n    );\n\n  if (eligibleUpdates.length === 0) {\n    return undefined;\n  }\n\n  return eligibleUpdates\n    .map((u) => buildApiPeerId(u.userId, 'user'));\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiPeer, ApiPhoto, ApiReportReason,\n} from '../../types';\n\nimport { buildInputPeer, buildInputPhoto, buildInputReportReason } from '../gramjsBuilders';\nimport { invokeRequest } from './client';\n\nexport async function reportPeer({\n  peer,\n  reason,\n  description,\n}: {\n  peer: ApiPeer; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.account.ReportPeer({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function reportProfilePhoto({\n  peer,\n  photo,\n  reason,\n  description,\n}: {\n  peer: ApiPeer; photo: ApiPhoto; reason: ApiReportReason; description?: string;\n}) {\n  const photoId = buildInputPhoto(photo);\n  if (!photoId) return undefined;\n\n  const result = await invokeRequest(new GramJs.account.ReportProfilePhoto({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    photoId,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function changeSessionSettings({\n  hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n}: {\n  hash: string; areCallsEnabled?: boolean; areSecretChatsEnabled?: boolean; isConfirmed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.ChangeAuthorizationSettings({\n    hash: BigInt(hash),\n    ...(areCallsEnabled !== undefined ? { callRequestsDisabled: !areCallsEnabled } : undefined),\n    ...(areSecretChatsEnabled !== undefined ? { encryptedRequestsDisabled: !areSecretChatsEnabled } : undefined),\n    ...(isConfirmed && { confirmed: isConfirmed }),\n  }));\n\n  return result;\n}\n\nexport async function changeSessionTtl({\n  days,\n}: {\n  days: number;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetAuthorizationTTL({\n    authorizationTtlDays: days,\n  }));\n\n  return result;\n}\n","import { CONTENT_TYPES_WITH_PREVIEW } from '../config';\nimport { pause } from './schedulers';\n\n// Polyfill for Safari: `File` is not available in web worker\nif (typeof File === 'undefined') {\n  // eslint-disable-next-line no-global-assign, no-restricted-globals, func-names\n  self.File = class extends Blob {\n    name: string;\n\n    constructor(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag) {\n      if (options) {\n        const { type, ...rest } = options;\n        super(fileBits, { type });\n        Object.assign(this, rest);\n      } else {\n        super(fileBits);\n      }\n\n      this.name = fileName;\n    }\n  } as typeof File;\n}\n\nexport function dataUriToBlob(dataUri: string) {\n  const arr = dataUri.split(',');\n  const mime = arr[0].match(/:(.*?);/)![1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], { type: mime });\n}\n\nexport function blobToDataUri(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'string') {\n        resolve(result);\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport function blobToFile(blob: Blob, fileName: string) {\n  return new File([blob], fileName, {\n    lastModified: Date.now(),\n    type: blob.type,\n  });\n}\n\nexport function preloadImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\n  return new Promise((resolve, reject) => {\n    const video = document.createElement('video');\n    video.volume = 0;\n    video.onloadedmetadata = () => resolve(video);\n    video.onerror = reject;\n    video.src = url;\n  });\n}\n\nexport async function createPosterForVideo(url: string): Promise<string | undefined> {\n  try {\n    const video = await preloadVideo(url);\n\n    return await Promise.race([\n      pause(2000) as Promise<undefined>,\n      new Promise<string | undefined>((resolve, reject) => {\n        video.onseeked = () => {\n          if (!video.videoWidth || !video.videoHeight) {\n            resolve(undefined);\n          }\n\n          const canvas = document.createElement('canvas');\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          const ctx = canvas.getContext('2d')!;\n          ctx.drawImage(video, 0, 0);\n\n          canvas.toBlob((blob) => {\n            resolve(blob ? URL.createObjectURL(blob) : undefined);\n          });\n        };\n        video.onerror = reject;\n        video.currentTime = Math.min(video.duration, 1);\n      }),\n    ]);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport async function fetchBlob(blobUrl: string) {\n  const response = await fetch(blobUrl);\n  return response.blob();\n}\n\nexport async function fetchFile(blobUrl: string, fileName: string) {\n  const blob = await fetchBlob(blobUrl);\n  return blobToFile(blob, fileName);\n}\n\nexport function imgToCanvas(img: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.drawImage(img, 0, 0);\n\n  return canvas;\n}\n\nexport function hasPreview(file: File) {\n  return CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n}\n\nexport function validateFiles(files: File[] | FileList | null): File[] | undefined {\n  if (!files?.length) {\n    return undefined;\n  }\n  return Array.from(files).map(fixMovMime).filter((file) => file.size);\n}\n\n// .mov MIME type not reported sometimes https://developer.mozilla.org/en-US/docs/Web/API/File/type#sect1\nfunction fixMovMime(file: File) {\n  const ext = file.name.split('.').pop()!;\n  if (!file.type && ext.toLowerCase() === 'mov') {\n    return new File([file], file.name, { type: 'video/quicktime' });\n  }\n  return file;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ThreadId } from '../../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiFormattedText,\n  ApiGlobalMessageSearchType,\n  ApiInputReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageSearchType,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n  MediaContent,\n  OnApiUpdate,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  API_GENERAL_ID_LIMIT,\n  DEBUG,\n  GIF_MIME_TYPE,\n  MAX_INT_32,\n  MENTION_UNREAD_SLICE,\n  PINNED_MESSAGES_LIMIT,\n  REACTION_UNREAD_SLICE,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { fetchFile } from '../../../util/files';\nimport { compact, split } from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildApiChatFromPreview, buildApiSendAsPeerId } from '../apiBuilders/chats';\nimport { buildApiFormattedText } from '../apiBuilders/common';\nimport { buildMessageMediaContent, buildMessageTextContent, buildWebPage } from '../apiBuilders/messageContent';\nimport {\n  buildApiMessage,\n  buildApiSponsoredMessage,\n  buildApiThreadInfo,\n  buildLocalForwardedMessage,\n  buildLocalMessage,\n  buildUploadingMedia,\n} from '../apiBuilders/messages';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildInputEntity,\n  buildInputMediaDocument,\n  buildInputPeer,\n  buildInputPoll,\n  buildInputPollFromExisting,\n  buildInputReaction,\n  buildInputReplyTo,\n  buildInputReportReason,\n  buildInputStory,\n  buildInputTextWithEntities,\n  buildMessageFromUpdate,\n  buildMtpMessageEntity,\n  buildSendMessageAction,\n  generateRandomBigInt,\n  getEntityTypeById,\n  isMessageWithMedia,\n  isServiceMessageWithMedia,\n} from '../gramjsBuilders';\nimport {\n  addEntitiesToLocalDb,\n  addMessageToLocalDb,\n  deserializeBytes,\n} from '../helpers';\nimport { processAffectedHistory, updateChannelState } from '../updates/updateManager';\nimport { dispatchThreadInfoUpdates } from '../updates/updater';\nimport { requestChatUpdate } from './chats';\nimport { handleGramJsUpdate, invokeRequest, uploadFile } from './client';\n\nconst FAST_SEND_TIMEOUT = 1000;\nconst INPUT_WAVEFORM_LENGTH = 63;\n\ntype TranslateTextParams = ({\n  text: ApiFormattedText[];\n} | {\n  chat: ApiChat;\n  messageIds: number[];\n}) & {\n  toLanguageCode: string;\n};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchMessages({\n  chat,\n  threadId,\n  offsetId,\n  isSavedDialog,\n  ...pagination\n}: {\n  chat: ApiChat;\n  threadId?: ThreadId;\n  offsetId?: number;\n  isSavedDialog?: boolean;\n  addOffset?: number;\n  limit: number;\n}) {\n  const RequestClass = threadId === MAIN_THREAD_ID\n    ? GramJs.messages.GetHistory : isSavedDialog\n      ? GramJs.messages.GetSavedHistory : GramJs.messages.GetReplies;\n  let result;\n\n  try {\n    result = await invokeRequest(new RequestClass({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      ...(threadId !== MAIN_THREAD_ID && !isSavedDialog && {\n        msgId: Number(threadId),\n      }),\n      ...(offsetId && {\n        // Workaround for local message IDs overflowing some internal `Buffer` range check\n        offsetId: Math.min(offsetId, MAX_INT_32),\n      }),\n      ...pagination,\n    }), {\n      shouldThrow: true,\n      abortControllerChatId: chat.id,\n      abortControllerThreadId: threadId,\n    });\n  } catch (err: any) {\n    if (err.message === 'CHANNEL_PRIVATE') {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat: {\n          isRestricted: true,\n        },\n      });\n    }\n  }\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const count = !(result instanceof GramJs.messages.Messages) && result.count;\n  dispatchThreadInfoUpdates(result.messages);\n\n  return {\n    messages,\n    users,\n    chats,\n    count,\n  };\n}\n\nexport async function fetchMessage({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  let result;\n  try {\n    result = await invokeRequest(\n      isChannel\n        ? new GramJs.channels.GetMessages({\n          channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n      {\n        shouldThrow: true,\n        abortControllerChatId: chat.id,\n      },\n    );\n  } catch (err: any) {\n    const { message } = err;\n\n    // When fetching messages for the bot @replies, there may be situations when the user was banned\n    // in the comment group or this group was deleted\n    if (message !== 'CHANNEL_PRIVATE') {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message,\n          isSlowMode: false,\n          hasErrorKey: true,\n        },\n      });\n    }\n  }\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) {\n    return undefined;\n  }\n\n  if ('pts' in result) {\n    updateChannelState(chat.id, result.pts);\n  }\n\n  const mtpMessage = result.messages[0];\n  if (!mtpMessage) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.MessageEmpty) {\n    return MESSAGE_DELETED;\n  }\n\n  const message = mtpMessage && buildApiMessage(mtpMessage);\n  dispatchThreadInfoUpdates([mtpMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.Message) {\n    addMessageToLocalDb(mtpMessage);\n  }\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  return { message, users };\n}\n\nlet mediaQueue = Promise.resolve();\n\nexport function sendMessage(\n  {\n    chat,\n    lastMessageId,\n    text,\n    entities,\n    replyInfo,\n    attachment,\n    sticker,\n    story,\n    gif,\n    poll,\n    contact,\n    isSilent,\n    scheduledAt,\n    groupedId,\n    noWebPage,\n    sendAs,\n    shouldUpdateStickerSetOrder,\n    wasDrafted,\n  }: {\n    chat: ApiChat;\n    lastMessageId?: number;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyInfo?: ApiInputReplyInfo;\n    attachment?: ApiAttachment;\n    sticker?: ApiSticker;\n    story?: ApiStory | ApiStorySkipped;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    contact?: ApiContact;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    groupedId?: string;\n    noWebPage?: boolean;\n    sendAs?: ApiPeer;\n    shouldUpdateStickerSetOrder?: boolean;\n    wasDrafted?: boolean;\n  },\n  onProgress?: ApiOnProgress,\n) {\n  const localMessage = buildLocalMessage(\n    chat,\n    lastMessageId,\n    text,\n    entities,\n    replyInfo,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    groupedId,\n    scheduledAt,\n    sendAs,\n    story,\n  );\n\n  onUpdate({\n    '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n    id: localMessage.id,\n    chatId: chat.id,\n    message: localMessage,\n    wasDrafted,\n  });\n\n  // This is expected to arrive after `updateMessageSendSucceeded` which replaces the local ID,\n  // so in most cases this will be simply ignored\n  const timeout = setTimeout(() => {\n    onUpdate({\n      '@type': localMessage.isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n      id: localMessage.id,\n      chatId: chat.id,\n      message: {\n        sendingState: 'messageSendingStatePending',\n      },\n    });\n  }, FAST_SEND_TIMEOUT);\n\n  const randomId = generateRandomBigInt();\n\n  if (groupedId) {\n    return sendGroupedMedia({\n      chat,\n      text,\n      entities,\n      replyInfo,\n      attachment: attachment!,\n      groupedId,\n      isSilent,\n      scheduledAt,\n    }, randomId, localMessage, onProgress);\n  }\n\n  const messagePromise = (async () => {\n    let media: GramJs.TypeInputMedia | undefined;\n    if (attachment) {\n      try {\n        media = await uploadMedia(localMessage, attachment, onProgress!);\n      } catch (err) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.warn(err);\n        }\n\n        await mediaQueue;\n\n        return;\n      }\n    } else if (sticker) {\n      media = buildInputMediaDocument(sticker);\n    } else if (gif) {\n      media = buildInputMediaDocument(gif);\n    } else if (poll) {\n      media = buildInputPoll(poll, randomId);\n    } else if (story) {\n      media = buildInputStory(story);\n    } else if (contact) {\n      media = new GramJs.InputMediaContact({\n        phoneNumber: contact.phoneNumber,\n        firstName: contact.firstName,\n        lastName: contact.lastName,\n        vcard: '',\n      });\n    }\n\n    const RequestClass = media ? GramJs.messages.SendMedia : GramJs.messages.SendMessage;\n\n    try {\n      const update = await invokeRequest(new RequestClass({\n        clearDraft: true,\n        message: text || '',\n        entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        randomId,\n        replyTo: replyInfo && buildInputReplyTo(replyInfo),\n        ...(isSilent && { silent: isSilent }),\n        ...(scheduledAt && { scheduleDate: scheduledAt }),\n        ...(media && { media }),\n        ...(noWebPage && { noWebpage: noWebPage }),\n        ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n        ...(shouldUpdateStickerSetOrder && { updateStickersetsOrder: shouldUpdateStickerSetOrder }),\n      }), {\n        shouldThrow: true,\n        shouldIgnoreUpdates: true,\n      });\n      if (update) handleLocalMessageUpdate(localMessage, update);\n    } catch (error: any) {\n      if (error.message === 'PRIVACY_PREMIUM_REQUIRED') {\n        onUpdate({ '@type': 'updateRequestUserUpdate', id: chat.id });\n      }\n\n      onUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: chat.id,\n        localId: localMessage.id,\n        error: error.message,\n      });\n      clearTimeout(timeout);\n    }\n  })();\n\n  return messagePromise;\n}\n\nconst groupedUploads: Record<string, {\n  counter: number;\n  singleMediaByIndex: Record<number, GramJs.InputSingleMedia>;\n  localMessages: Record<string, ApiMessage>;\n}> = {};\n\nfunction sendGroupedMedia(\n  {\n    chat,\n    text,\n    entities,\n    replyInfo,\n    attachment,\n    groupedId,\n    isSilent,\n    scheduledAt,\n    sendAs,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyInfo?: ApiInputReplyInfo;\n    attachment: ApiAttachment;\n    groupedId: string;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    sendAs?: ApiPeer;\n  },\n  randomId: GramJs.long,\n  localMessage: ApiMessage,\n  onProgress?: ApiOnProgress,\n) {\n  let groupIndex = -1;\n  if (!groupedUploads[groupedId]) {\n    groupedUploads[groupedId] = {\n      counter: 0,\n      singleMediaByIndex: {},\n      localMessages: {},\n    };\n  }\n\n  groupIndex = groupedUploads[groupedId].counter++;\n\n  const prevMediaQueue = mediaQueue;\n  mediaQueue = (async () => {\n    let media;\n    try {\n      media = await uploadMedia(localMessage, attachment, onProgress!);\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n\n      groupedUploads[groupedId].counter--;\n\n      await prevMediaQueue;\n\n      return;\n    }\n\n    const inputMedia = await fetchInputMedia(\n      buildInputPeer(chat.id, chat.accessHash),\n      media as GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n    );\n\n    await prevMediaQueue;\n\n    if (!inputMedia) {\n      groupedUploads[groupedId].counter--;\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn('Failed to upload grouped media');\n      }\n\n      return;\n    }\n\n    groupedUploads[groupedId].singleMediaByIndex[groupIndex] = new GramJs.InputSingleMedia({\n      media: inputMedia,\n      randomId,\n      message: text || '',\n      entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n    });\n    groupedUploads[groupedId].localMessages[randomId.toString()] = localMessage;\n\n    if (Object.keys(groupedUploads[groupedId].singleMediaByIndex).length < groupedUploads[groupedId].counter) {\n      return;\n    }\n\n    const { singleMediaByIndex, localMessages } = groupedUploads[groupedId];\n    delete groupedUploads[groupedId];\n\n    const update = await invokeRequest(new GramJs.messages.SendMultiMedia({\n      clearDraft: true,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      multiMedia: Object.values(singleMediaByIndex), // Object keys are usually ordered\n      replyTo: replyInfo && buildInputReplyTo(replyInfo),\n      ...(isSilent && { silent: isSilent }),\n      ...(scheduledAt && { scheduleDate: scheduledAt }),\n      ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    }), {\n      shouldIgnoreUpdates: true,\n    });\n\n    if (update) handleMultipleLocalMessagesUpdate(localMessages, update);\n  })();\n\n  return mediaQueue;\n}\n\nasync function fetchInputMedia(\n  peer: GramJs.TypeInputPeer,\n  uploadedMedia: GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n) {\n  const messageMedia = await invokeRequest(new GramJs.messages.UploadMedia({\n    peer,\n    media: uploadedMedia,\n  }));\n  const isSpoiler = uploadedMedia.spoiler;\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaPhoto\n    && messageMedia.photo\n    && messageMedia.photo instanceof GramJs.Photo)\n  ) {\n    const { photo: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaPhoto({\n      id: new GramJs.InputPhoto({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaDocument\n    && messageMedia.document\n    && messageMedia.document instanceof GramJs.Document)\n  ) {\n    const { document: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaDocument({\n      id: new GramJs.InputDocument({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  return undefined;\n}\n\nexport async function editMessage({\n  chat,\n  message,\n  text,\n  entities,\n  attachment,\n  noWebPage,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  text: string;\n  entities?: ApiMessageEntity[];\n  attachment?: ApiAttachment;\n  noWebPage?: boolean;\n}, onProgress?: ApiOnProgress) {\n  const isScheduled = message.date * 1000 > Date.now() + getServerTimeOffset() * 1000;\n\n  const media = attachment && buildUploadingMedia(attachment);\n\n  const newContent = {\n    ...(media || message.content),\n    ...(text && {\n      text: {\n        text,\n        entities,\n      },\n    }),\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n    emojiOnlyCount: getEmojiOnlyCountForMessage(newContent, message.groupedId),\n  };\n\n  onUpdate({\n    '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n    id: message.id,\n    chatId: chat.id,\n    message: messageUpdate,\n  });\n\n  try {\n    let mediaUpdate: GramJs.TypeInputMedia | undefined;\n    if (attachment) {\n      mediaUpdate = await uploadMedia(message, attachment, onProgress!);\n    }\n\n    const mtpEntities = entities && entities.map(buildMtpMessageEntity);\n\n    await invokeRequest(new GramJs.messages.EditMessage({\n      message: text || '',\n      entities: mtpEntities,\n      media: mediaUpdate,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: message.id,\n      ...(isScheduled && { scheduleDate: message.date }),\n      ...(noWebPage && { noWebpage: noWebPage }),\n    }), { shouldThrow: true });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(err);\n    }\n\n    const { message: messageErr } = err as Error;\n\n    onUpdate({\n      '@type': 'error',\n      error: {\n        message: messageErr,\n        hasErrorKey: true,\n      },\n    });\n\n    // Rollback changes\n    onUpdate({\n      '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n      id: message.id,\n      chatId: chat.id,\n      message,\n    });\n  }\n}\n\nexport async function rescheduleMessage({\n  chat,\n  message,\n  scheduledAt,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  scheduledAt: number;\n}) {\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: message.id,\n    scheduleDate: scheduledAt,\n  }));\n}\n\nasync function uploadMedia(message: ApiMessage, attachment: ApiAttachment, onProgress: ApiOnProgress) {\n  const {\n    filename, blobUrl, mimeType, quick, voice, audio, previewBlobUrl, shouldSendAsFile, shouldSendAsSpoiler, ttlSeconds,\n  } = attachment;\n\n  const patchedOnProgress: ApiOnProgress = (progress) => {\n    if (onProgress.isCanceled) {\n      patchedOnProgress.isCanceled = true;\n    } else {\n      onProgress(progress, getMessageKey(message));\n    }\n  };\n\n  const fetchAndUpload = async (url: string, progressCallback?: (progress: number) => void) => {\n    const file = await fetchFile(url, filename);\n    return uploadFile(file, progressCallback);\n  };\n\n  const isVideo = SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType);\n  const shouldUploadThumb = audio || isVideo || shouldSendAsFile;\n\n  const [inputFile, thumb] = await Promise.all(compact([\n    fetchAndUpload(blobUrl, patchedOnProgress),\n    shouldUploadThumb && previewBlobUrl && fetchAndUpload(previewBlobUrl),\n  ]));\n\n  const attributes: GramJs.TypeDocumentAttribute[] = [new GramJs.DocumentAttributeFilename({ fileName: filename })];\n  if (!shouldSendAsFile) {\n    if (quick) {\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) && mimeType !== GIF_MIME_TYPE) {\n        return new GramJs.InputMediaUploadedPhoto({\n          file: inputFile,\n          spoiler: shouldSendAsSpoiler,\n        });\n      }\n\n      if (isVideo) {\n        const { width, height, duration } = quick;\n        if (duration !== undefined) {\n          attributes.push(new GramJs.DocumentAttributeVideo({\n            duration,\n            w: width,\n            h: height,\n            supportsStreaming: true,\n          }));\n        }\n      }\n    }\n\n    if (audio) {\n      const { duration, title, performer } = audio;\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        duration,\n        title,\n        performer,\n      }));\n    }\n\n    if (voice) {\n      const { duration, waveform } = voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        voice: true,\n        duration,\n        waveform: Buffer.from(inputWaveform),\n      }));\n    }\n  }\n\n  return new GramJs.InputMediaUploadedDocument({\n    file: inputFile,\n    mimeType,\n    attributes,\n    thumb,\n    forceFile: shouldSendAsFile,\n    spoiler: shouldSendAsSpoiler,\n    ttlSeconds,\n  });\n}\n\nexport async function pinMessage({\n  chat, messageId, isUnpin, isOneSide, isSilent,\n}: { chat: ApiChat; messageId: number; isUnpin: boolean; isOneSide?: boolean; isSilent?: boolean }) {\n  await invokeRequest(new GramJs.messages.UpdatePinnedMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(isUnpin && { unpin: true }),\n    ...(isOneSide && { pmOneside: true }),\n    ...(isSilent && { silent: true }),\n  }));\n}\n\nexport async function unpinAllMessages({ chat, threadId }: { chat: ApiChat; threadId?: ThreadId }) {\n  const result = await invokeRequest(new GramJs.messages.UnpinAllMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    ...(threadId && { topMsgId: Number(threadId) }),\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await unpinAllMessages({ chat, threadId });\n  }\n}\n\nexport async function deleteMessages({\n  chat, messageIds, shouldDeleteForAll,\n}: {\n  chat: ApiChat; messageIds: number[]; shouldDeleteForAll?: boolean;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteMessages({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.DeleteMessages({\n        id: messageIds,\n        ...(shouldDeleteForAll && { revoke: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  processAffectedHistory(chat, result);\n\n  onUpdate({\n    '@type': 'deleteMessages',\n    ids: messageIds,\n    ...(isChannel && { chatId: chat.id }),\n  });\n}\n\nexport function deleteScheduledMessages({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  invokeRequest(new GramJs.messages.DeleteScheduledMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageIds,\n  }));\n}\n\nexport async function deleteHistory({\n  chat, shouldDeleteForAll,\n}: {\n  chat: ApiChat; shouldDeleteForAll?: boolean; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteHistory({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      })\n      : new GramJs.messages.DeleteHistory({\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        ...(shouldDeleteForAll && { revoke: true }),\n        ...(!shouldDeleteForAll && { just_clear: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  if ('offset' in result) {\n    processAffectedHistory(chat, result);\n\n    if (result.offset) {\n      await deleteHistory({ chat, shouldDeleteForAll });\n      return;\n    }\n  }\n\n  onUpdate({\n    '@type': 'deleteHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function deleteSavedHistory({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteSavedHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await deleteSavedHistory({ chat });\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteSavedHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function reportMessages({\n  peer, messageIds, reason, description,\n}: {\n  peer: ApiPeer; messageIds: number[]; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.Report({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: messageIds,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function sendMessageAction({\n  peer, threadId, action,\n}: {\n  peer: ApiPeer; threadId?: ThreadId; action: ApiSendMessageAction;\n}) {\n  const gramAction = buildSendMessageAction(action);\n  if (!gramAction) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('Unsupported message action', action);\n    }\n    return undefined;\n  }\n\n  try {\n    const result = await invokeRequest(new GramJs.messages.SetTyping({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      topMsgId: Number(threadId),\n      action: gramAction,\n    }), {\n      shouldThrow: true,\n      abortControllerChatId: peer.id,\n      abortControllerThreadId: threadId,\n    });\n    return result;\n  } catch (error) {\n    // Prevent error from being displayed in UI\n  }\n  return undefined;\n}\n\nexport async function markMessageListRead({\n  chat, threadId, maxId = 0,\n}: {\n  chat: ApiChat; threadId: ThreadId; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  // Workaround for local message IDs overflowing some internal `Buffer` range check\n  const fixedMaxId = Math.min(maxId, MAX_INT_32);\n  if (isChannel && threadId === MAIN_THREAD_ID) {\n    await invokeRequest(new GramJs.channels.ReadHistory({\n      channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      maxId: fixedMaxId,\n    }));\n  } else if (isChannel) {\n    await invokeRequest(new GramJs.messages.ReadDiscussion({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: Number(threadId),\n      readMaxId: fixedMaxId,\n    }));\n  } else {\n    const result = await invokeRequest(new GramJs.messages.ReadHistory({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      maxId: fixedMaxId,\n    }));\n\n    if (result) {\n      processAffectedHistory(chat, result);\n    }\n  }\n\n  if (threadId === MAIN_THREAD_ID) {\n    void requestChatUpdate({ chat, noLastMessage: true });\n  }\n}\n\nexport async function markMessagesRead({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.ReadMessageContents({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.ReadMessageContents({\n        id: messageIds,\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  if (result !== true) {\n    processAffectedHistory(chat, result);\n  }\n\n  onUpdate({\n    ...(isChannel ? {\n      '@type': 'updateChannelMessages',\n      channelId: chat.id,\n    } : {\n      '@type': 'updateCommonBoxMessages',\n    }),\n    ids: messageIds,\n    messageUpdate: {\n      hasUnreadMention: false,\n      isMediaUnread: false,\n    },\n  });\n}\n\nexport async function fetchMessageViews({\n  chat, ids, shouldIncrement,\n}: {\n  chat: ApiChat;\n  ids: number[];\n  shouldIncrement?: boolean;\n}) {\n  const chunks = split(ids, API_GENERAL_ID_LIMIT);\n  const results = await Promise.all(chunks.map((chunkIds) => (\n    invokeRequest(new GramJs.messages.GetMessagesViews({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: chunkIds,\n      increment: shouldIncrement,\n    }))\n  )));\n\n  if (!results || results.some((result) => !result)) return undefined;\n\n  const viewsList = results.flatMap((result) => result!.views);\n  const users = results.flatMap((result) => result!.users);\n  const chats = results.flatMap((result) => result!.chats);\n\n  const viewsInfo = ids.map((id, index) => {\n    const { views, forwards, replies } = viewsList[index];\n    return {\n      id,\n      views,\n      forwards,\n      threadInfo: replies ? buildApiThreadInfo(replies, id, chat.id) : undefined,\n    };\n  });\n\n  return {\n    viewsInfo,\n    users: users.map(buildApiUser).filter(Boolean),\n    chats: chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n  };\n}\n\nexport async function fetchDiscussionMessage({\n  chat, messageId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n}) {\n  const [result, replies] = await Promise.all([\n    invokeRequest(new GramJs.messages.GetDiscussionMessage({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: messageId,\n    }), {\n      abortControllerChatId: chat.id,\n      abortControllerThreadId: messageId,\n    }),\n    fetchMessages({\n      chat,\n      threadId: messageId,\n      offsetId: 1,\n      addOffset: -1,\n      limit: 1,\n    }),\n  ]);\n\n  if (!result || !replies) return undefined;\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean)\n    .concat(replies.chats);\n  const users = result.users.map(buildApiUser).filter(Boolean)\n    .concat(replies.users);\n  const topMessages = result.messages.map(buildApiMessage).filter(Boolean);\n  const messages = topMessages.concat(replies.messages);\n  const threadId = result.messages[result.messages.length - 1]?.id;\n\n  if (!threadId) return undefined;\n\n  dispatchThreadInfoUpdates(result.messages);\n\n  const {\n    unreadCount, maxId, readInboxMaxId, readOutboxMaxId,\n  } = result;\n\n  return {\n    chats,\n    users,\n    messages,\n    topMessages,\n    unreadCount,\n    threadId,\n    lastReadInboxMessageId: readInboxMaxId,\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastMessageId: maxId,\n    chatId: topMessages[0]?.chatId,\n    firstMessageId: replies.messages[0]?.id,\n  };\n}\n\nexport async function searchMessagesLocal({\n  chat, isSavedDialog, savedTag, type, query, threadId, minDate, maxDate, ...pagination\n}: {\n  chat: ApiChat;\n  isSavedDialog?: boolean;\n  savedTag?: ApiReaction;\n  type?: ApiMessageSearchType | ApiGlobalMessageSearchType;\n  query?: string;\n  threadId?: ThreadId;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'profilePhoto':\n      filter = new GramJs.InputMessagesFilterChatPhotos();\n      break;\n    case 'text':\n    default: {\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const peer = buildInputPeer(chat.id, chat.accessHash);\n\n  const result = await invokeRequest(new GramJs.messages.Search({\n    peer: isSavedDialog ? new GramJs.InputPeerSelf() : peer,\n    savedPeerId: isSavedDialog ? peer : undefined,\n    savedReaction: savedTag && [buildInputReaction(savedTag)],\n    topMsgId: threadId !== MAIN_THREAD_ID && !isSavedDialog ? Number(threadId) : undefined,\n    filter,\n    q: query || '',\n    minDate,\n    maxDate,\n    ...pagination,\n  }), {\n    abortControllerChatId: chat.id,\n    abortControllerThreadId: threadId,\n  });\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n\n  let totalCount = messages.length;\n  let nextOffsetId: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextOffsetId = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    chats,\n    users,\n    messages,\n    totalCount,\n    nextOffsetId,\n  };\n}\n\nexport async function searchMessagesGlobal({\n  query, offsetRate = 0, limit, type = 'text', minDate, maxDate,\n}: {\n  query: string;\n  offsetRate?: number;\n  limit: number;\n  type?: ApiGlobalMessageSearchType;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'text':\n    default: {\n      if (!query && !(maxDate && minDate)) {\n        return undefined;\n      }\n\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.SearchGlobal({\n    q: query,\n    offsetRate,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    filter,\n    folderId: ALL_FOLDER_ID,\n    minDate,\n    maxDate,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: result.chats,\n    users: result.users,\n    messages: result.messages,\n  } as GramJs.messages.Messages);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n\n  let totalCount = messages.length;\n  let nextRate: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextRate = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    messages,\n    users,\n    chats,\n    totalCount,\n    nextRate: 'nextRate' in result && result.nextRate ? result.nextRate : nextRate,\n  };\n}\n\nexport async function fetchWebPagePreview({\n  text,\n}: {\n  text: ApiFormattedText;\n}) {\n  const textWithEntities = buildInputTextWithEntities(text);\n  const preview = await invokeRequest(new GramJs.messages.GetWebPagePreview({\n    message: textWithEntities.text,\n    entities: textWithEntities.entities,\n  }));\n\n  return preview && buildWebPage(preview);\n}\n\nexport async function sendPollVote({\n  chat, messageId, options,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  options: string[];\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendVote({\n    peer: buildInputPeer(id, accessHash),\n    msgId: messageId,\n    options: options.map(deserializeBytes),\n  }));\n}\n\nexport async function closePoll({\n  chat, messageId, poll,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  poll: ApiPoll;\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    media: buildInputPollFromExisting(poll, true),\n  }));\n}\n\nexport async function loadPollOptionResults({\n  chat, messageId, option, offset, limit, shouldResetVoters,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  option?: string;\n  offset?: string;\n  limit?: number;\n  shouldResetVoters?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPollVotes({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    ...(option && { option: deserializeBytes(option) }),\n    ...(offset && { offset }),\n    ...(limit && { limit }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: result.chats,\n    users: result.users,\n    messages: [] as GramJs.Message[],\n  } as GramJs.messages.Messages);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const votes = result.votes.map((vote) => ({\n    peerId: getApiChatIdFromMtpPeer(vote.peer),\n    date: vote.date,\n  }));\n\n  return {\n    count: result.count,\n    votes,\n    chats,\n    users,\n    nextOffset: result.nextOffset,\n    shouldResetVoters,\n  };\n}\n\nexport async function fetchExtendedMedia({\n  chat, ids,\n}: {\n  chat: ApiChat;\n  ids: number[];\n}) {\n  await invokeRequest(new GramJs.messages.GetExtendedMedia({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: ids,\n  }));\n}\n\nexport async function forwardMessages({\n  fromChat,\n  toChat,\n  toThreadId,\n  messages,\n  isSilent,\n  scheduledAt,\n  sendAs,\n  withMyScore,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  wasDrafted,\n  lastMessageId,\n}: {\n  fromChat: ApiChat;\n  toChat: ApiChat;\n  toThreadId?: ThreadId;\n  messages: ApiMessage[];\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  withMyScore?: boolean;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  const messageIds = messages.map(({ id }) => id);\n  const randomIds = messages.map(generateRandomBigInt);\n  const localMessages: Record<string, ApiMessage> = {};\n\n  messages.forEach((message, index) => {\n    const localMessage = buildLocalForwardedMessage({\n      toChat,\n      toThreadId: Number(toThreadId),\n      message,\n      scheduledAt,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n      lastMessageId,\n    });\n    localMessages[randomIds[index].toString()] = localMessage;\n\n    onUpdate({\n      '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n      id: localMessage.id,\n      chatId: toChat.id,\n      message: localMessage,\n      wasDrafted,\n    });\n  });\n\n  try {\n    const update = await invokeRequest(new GramJs.messages.ForwardMessages({\n      fromPeer: buildInputPeer(fromChat.id, fromChat.accessHash),\n      toPeer: buildInputPeer(toChat.id, toChat.accessHash),\n      randomId: randomIds,\n      id: messageIds,\n      withMyScore: withMyScore || undefined,\n      silent: isSilent || undefined,\n      dropAuthor: noAuthors || undefined,\n      dropMediaCaptions: noCaptions || undefined,\n      ...(toThreadId && { topMsgId: Number(toThreadId) }),\n      ...(scheduledAt && { scheduleDate: scheduledAt }),\n      ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    }), {\n      shouldThrow: true,\n      shouldIgnoreUpdates: true,\n    });\n    if (update) handleMultipleLocalMessagesUpdate(localMessages, update);\n  } catch (error: any) {\n    Object.values(localMessages).forEach((localMessage) => {\n      onUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: toChat.id,\n        localId: localMessage.id,\n        error: error.message,\n      });\n    });\n  }\n}\n\nexport async function findFirstMessageIdAfterDate({\n  chat,\n  timestamp,\n}: {\n  chat: ApiChat;\n  timestamp: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    offsetDate: timestamp,\n    addOffset: -1,\n    limit: 1,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages || !result.messages.length\n  ) {\n    return undefined;\n  }\n\n  return result.messages[0].id;\n}\n\nexport async function fetchScheduledHistory({ chat }: { chat: ApiChat }) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetScheduledHistory({\n    peer: buildInputPeer(id, accessHash),\n  }), {\n    abortControllerChatId: id,\n  });\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n\n  return {\n    messages,\n  };\n}\n\nexport async function sendScheduledMessages({ chat, ids }: { chat: ApiChat; ids: number[] }) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendScheduledMessages({\n    peer: buildInputPeer(id, accessHash),\n    id: ids,\n  }));\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.MessagesSlice | GramJs.messages.Messages | GramJs.messages.ChannelMessages |\n  GramJs.messages.DiscussionMessage | GramJs.messages.SponsoredMessages\n)) {\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  result.messages.forEach((message) => {\n    if ((message instanceof GramJs.Message && isMessageWithMedia(message))\n      || (message instanceof GramJs.MessageService && isServiceMessageWithMedia(message))\n    ) {\n      addMessageToLocalDb(message);\n    }\n  });\n}\n\nexport async function fetchPinnedMessages({ chat, threadId }: { chat: ApiChat; threadId: ThreadId }) {\n  const result = await invokeRequest(new GramJs.messages.Search(\n    {\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      filter: new GramJs.InputMessagesFilterPinned(),\n      q: '',\n      limit: PINNED_MESSAGES_LIMIT,\n      topMsgId: Number(threadId),\n    },\n  ), {\n    abortControllerChatId: chat.id,\n    abortControllerThreadId: threadId,\n  });\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchSeenBy({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReadParticipants({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }));\n\n  return result\n    ? result.reduce((acc, readDate) => {\n      acc[readDate.userId.toString()] = readDate.date;\n\n      return acc;\n    }, {} as Record<string, number>)\n    : undefined;\n}\n\nexport async function fetchSendAs({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.channels.GetSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), {\n    shouldIgnoreErrors: true,\n    abortControllerChatId: chat.id,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    users,\n    chats,\n    sendAs: result.peers.map(buildApiSendAsPeerId),\n  };\n}\n\nexport function saveDefaultSendAs({\n  sendAs, chat,\n}: {\n  sendAs: ApiPeer; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDefaultSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    sendAs: buildInputPeer(sendAs.id, sendAs.accessHash),\n  }));\n}\n\nexport async function fetchSponsoredMessages({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.GetSponsoredMessages({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.SponsoredMessagesEmpty || !result.messages.length) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiSponsoredMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function viewSponsoredMessage({ chat, random }: { chat: ApiChat; random: string }) {\n  await invokeRequest(new GramJs.channels.ViewSponsoredMessage({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport function clickSponsoredMessage({ chat, random }: { chat: ApiChat; random: string }) {\n  return invokeRequest(new GramJs.channels.ClickSponsoredMessage({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport async function readAllMentions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ReadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await readAllMentions({ chat });\n  }\n}\n\nexport async function readAllReactions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ReadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return;\n\n  processAffectedHistory(chat, result);\n\n  if (result.offset) {\n    await readAllReactions({ chat });\n  }\n}\n\nexport async function fetchUnreadMentions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: MENTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchUnreadReactions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: REACTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  dispatchThreadInfoUpdates(result.messages);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function transcribeAudio({\n  chat, messageId,\n}: {\n  chat: ApiChat; messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.TranscribeAudio({\n    msgId: messageId,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return undefined;\n\n  onUpdate({\n    '@type': 'updateTranscribedAudio',\n    isPending: result.pending,\n    transcriptionId: result.transcriptionId.toString(),\n    text: result.text,\n  });\n\n  return result.transcriptionId.toString();\n}\n\nexport async function translateText(params: TranslateTextParams) {\n  let result;\n  const isMessageTranslation = 'chat' in params;\n  if (isMessageTranslation) {\n    const { chat, messageIds, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: messageIds,\n      toLang: toLanguageCode,\n    }));\n  } else {\n    const { text, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      text: text.map((t) => buildInputTextWithEntities(t)),\n      toLang: toLanguageCode,\n    }));\n  }\n\n  if (!result) return undefined;\n\n  const formattedText = result.result.map((r) => buildApiFormattedText(r));\n\n  if (isMessageTranslation) {\n    onUpdate({\n      '@type': 'updateMessageTranslations',\n      chatId: params.chat.id,\n      messageIds: params.messageIds,\n      translations: formattedText,\n      toLanguageCode: params.toLanguageCode,\n    });\n  }\n\n  return formattedText;\n}\n\nfunction handleMultipleLocalMessagesUpdate(\n  localMessages: Record<string, ApiMessage>, update: GramJs.TypeUpdates,\n) {\n  if (!('updates' in update)) {\n    handleGramJsUpdate(update);\n    return;\n  }\n\n  update.updates.forEach((u) => {\n    if (u instanceof GramJs.UpdateMessageID) {\n      const localMessage = localMessages[u.randomId.toString()];\n      handleLocalMessageUpdate(localMessage, u);\n    } else {\n      handleGramJsUpdate(u);\n    }\n  });\n}\n\nfunction handleLocalMessageUpdate(localMessage: ApiMessage, update: GramJs.TypeUpdates) {\n  let messageUpdate;\n  if (update instanceof GramJs.UpdateShortSentMessage || update instanceof GramJs.UpdateMessageID) {\n    messageUpdate = update;\n  } else if ('updates' in update) {\n    messageUpdate = update.updates.find((u): u is GramJs.UpdateMessageID => u instanceof GramJs.UpdateMessageID);\n  }\n\n  if (!messageUpdate) {\n    handleGramJsUpdate(update);\n    return;\n  }\n\n  let newContent: MediaContent | undefined;\n  if (messageUpdate instanceof GramJs.UpdateShortSentMessage) {\n    if (localMessage.content.text && messageUpdate.entities) {\n      newContent = {\n        text: buildMessageTextContent(localMessage.content.text.text, messageUpdate.entities),\n      };\n    }\n    if (messageUpdate.media) {\n      newContent = {\n        ...newContent,\n        ...buildMessageMediaContent(messageUpdate.media),\n      };\n    }\n\n    const mtpMessage = buildMessageFromUpdate(messageUpdate.id, localMessage.chatId, messageUpdate);\n    if (isMessageWithMedia(mtpMessage)) {\n      addMessageToLocalDb(mtpMessage);\n    }\n  }\n\n  // Edge case for \"Send When Online\"\n  const isSentBefore = 'date' in messageUpdate && messageUpdate.date * 1000 < Date.now() + getServerTimeOffset() * 1000;\n\n  onUpdate({\n    '@type': localMessage.isScheduled && !isSentBefore\n      ? 'updateScheduledMessageSendSucceeded'\n      : 'updateMessageSendSucceeded',\n    chatId: localMessage.chatId,\n    localId: localMessage.id,\n    message: {\n      ...localMessage,\n      ...(newContent && {\n        content: {\n          ...localMessage.content,\n          ...newContent,\n        },\n      }),\n      id: messageUpdate.id,\n      sendingState: undefined,\n      ...('date' in messageUpdate && { date: messageUpdate.date }),\n    },\n  });\n\n  handleGramJsUpdate(update);\n}\n\nexport async function fetchOutboxReadDate({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  const result = await invokeRequest(new GramJs.messages.GetOutboxReadDate({\n    peer: peer as GramJs.TypeInputPeer,\n    msgId: messageId,\n  }), { shouldThrow: true });\n\n  if (!result) return undefined;\n\n  return { date: result.date };\n}\n\nexport async function exportMessageLink({\n  id, chat, shouldIncludeThread, shouldIncludeGrouped,\n}: {\n  id: number;\n  chat: ApiChat;\n  shouldIncludeThread?: boolean;\n  shouldIncludeGrouped?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.channels.ExportMessageLink({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    id,\n    thread: shouldIncludeThread || undefined,\n    grouped: shouldIncludeGrouped || undefined,\n  }));\n\n  return result?.link;\n}\n","import type { ApiMessage } from '../api/types';\n\nexport type MessageKey = `msg${string}-${number}`;\n\nexport function getMessageKey(message: ApiMessage): MessageKey {\n  const { chatId, id, previousLocalId } = message;\n\n  return buildMessageKey(chatId, previousLocalId || id);\n}\n\nexport function getMessageServerKey(message: ApiMessage): MessageKey | undefined {\n  if (isLocalMessageId(message.id)) {\n    return undefined;\n  }\n  const { chatId, id } = message;\n  return buildMessageKey(chatId, id);\n}\n\nexport function buildMessageKey(chatId: string, msgId: number): MessageKey {\n  return `msg${chatId}-${msgId}`;\n}\n\nexport function parseMessageKey(key: MessageKey) {\n  const match = key.match(/^msg(-?\\d+)-(\\d+)/)!;\n\n  return { chatId: match[1], messageId: Number(match[2]) };\n}\n\nexport function isLocalMessageId(id: number) {\n  return !Number.isInteger(id);\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiPeer, ApiSticker,\n  ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport { COMMON_CHATS_LIMIT, PROFILE_PHOTOS_LIMIT } from '../../../config';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport { buildApiUser, buildApiUserFullInfo, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport {\n  buildInputContact,\n  buildInputEmojiStatus,\n  buildInputEntity,\n  buildInputPeer,\n  buildMtpPeerId,\n  getEntityTypeById,\n} from '../gramjsBuilders';\nimport { addEntitiesToLocalDb, addPhotoToLocalDb, addUserToLocalDb } from '../helpers';\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\nimport { searchMessagesLocal } from './messages';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchFullUser({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return undefined;\n  }\n\n  const result = await invokeRequest(new GramJs.users.GetFullUser({ id: input }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n  addEntitiesToLocalDb(result.users);\n\n  if (result.fullUser.profilePhoto instanceof GramJs.Photo) {\n    localDb.photos[result.fullUser.profilePhoto.id.toString()] = result.fullUser.profilePhoto;\n  }\n\n  if (result.fullUser.personalPhoto instanceof GramJs.Photo) {\n    localDb.photos[result.fullUser.personalPhoto.id.toString()] = result.fullUser.personalPhoto;\n  }\n\n  if (result.fullUser.fallbackPhoto instanceof GramJs.Photo) {\n    localDb.photos[result.fullUser.fallbackPhoto.id.toString()] = result.fullUser.fallbackPhoto;\n  }\n\n  const botInfo = result.fullUser.botInfo;\n  if (botInfo?.descriptionPhoto instanceof GramJs.Photo) {\n    localDb.photos[botInfo.descriptionPhoto.id.toString()] = botInfo.descriptionPhoto;\n  }\n  if (botInfo?.descriptionDocument instanceof GramJs.Document) {\n    localDb.documents[botInfo.descriptionDocument.id.toString()] = botInfo.descriptionDocument;\n  }\n\n  const fullInfo = buildApiUserFullInfo(result);\n  const user = buildApiUser(result.users[0])!;\n\n  onUpdate({\n    '@type': 'updateUser',\n    id,\n    user: {\n      ...user,\n      avatarHash: user?.avatarHash || undefined,\n    },\n    fullInfo,\n  });\n\n  return { user, fullInfo };\n}\n\nexport async function fetchCommonChats(id: string, accessHash?: string, maxId?: string) {\n  const commonChats = await invokeRequest(new GramJs.messages.GetCommonChats({\n    userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    maxId: maxId ? buildMtpPeerId(maxId, getEntityTypeById(maxId)) : undefined,\n    limit: COMMON_CHATS_LIMIT,\n  }));\n\n  if (!commonChats) {\n    return undefined;\n  }\n\n  updateLocalDb(commonChats);\n\n  const chatIds: string[] = [];\n  const chats: ApiChat[] = [];\n\n  commonChats.chats.forEach((mtpChat) => {\n    const chat = buildApiChatFromPreview(mtpChat);\n\n    if (chat) {\n      chats.push(chat);\n      chatIds.push(chat.id);\n    }\n  });\n\n  return { chats, chatIds, isFullyLoaded: chatIds.length < COMMON_CHATS_LIMIT };\n}\n\nexport async function fetchNearestCountry() {\n  const dcInfo = await invokeRequest(new GramJs.help.GetNearestDc());\n\n  return dcInfo?.country;\n}\n\nexport async function fetchTopUsers() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    correspondents: true,\n  }));\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchContactList() {\n  const result = await invokeRequest(new GramJs.contacts.GetContacts({ hash: BigInt('0') }));\n  if (!result || result instanceof GramJs.contacts.ContactsNotModified) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    users,\n    userStatusesById,\n    chats: result.users.map((user) => buildApiChatFromPreview(user)).filter(Boolean),\n  };\n}\n\nexport async function fetchUsers({ users }: { users: ApiUser[] }) {\n  const result = await invokeRequest(new GramJs.users.GetUsers({\n    id: users.map(({ id, accessHash }) => buildInputPeer(id, accessHash)),\n  }));\n  if (!result || !result.length) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result);\n\n  return buildApiUsersAndStatuses(result);\n}\n\nexport async function importContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.ImportContacts({\n    contacts: [buildInputContact({\n      phone: phone || '',\n      firstName: firstName || '',\n      lastName: lastName || '',\n    })],\n  }));\n\n  if (result instanceof GramJs.contacts.ImportedContacts && result.users.length) {\n    addUserToLocalDb(result.users[0]);\n  }\n\n  return result?.imported.length ? buildApiPeerId(result.imported[0].userId, 'user') : undefined;\n}\n\nexport function updateContact({\n  id,\n  accessHash,\n  phoneNumber = '',\n  firstName = '',\n  lastName = '',\n  shouldSharePhoneNumber = false,\n}: {\n  id: string;\n  accessHash?: string;\n  phoneNumber?: string;\n  firstName?: string;\n  lastName?: string;\n  shouldSharePhoneNumber?: boolean;\n}) {\n  return invokeRequest(new GramJs.contacts.AddContact({\n    id: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    firstName,\n    lastName,\n    phone: phoneNumber,\n    ...(shouldSharePhoneNumber && { addPhonePrivacyException: shouldSharePhoneNumber }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function deleteContact({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return;\n  }\n\n  const result = await invokeRequest(new GramJs.contacts.DeleteContacts({ id: [input] }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteContact',\n    id,\n  });\n}\n\nexport async function fetchProfilePhotos(user?: ApiUser, chat?: ApiChat) {\n  if (user) {\n    const { id, accessHash } = user;\n\n    const result = await invokeRequest(new GramJs.photos.GetUserPhotos({\n      userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n      limit: PROFILE_PHOTOS_LIMIT,\n      offset: 0,\n      maxId: BigInt('0'),\n    }));\n\n    if (!result) {\n      return undefined;\n    }\n\n    updateLocalDb(result);\n\n    return {\n      photos: result.photos\n        .filter((photo): photo is GramJs.Photo => photo instanceof GramJs.Photo)\n        .map((photo) => buildApiPhoto(photo)),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  if (chat?.isRestricted) return undefined;\n\n  const result = await searchMessagesLocal({\n    chat: chat!,\n    type: 'profilePhoto',\n    limit: PROFILE_PHOTOS_LIMIT,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  const { messages, users } = result;\n\n  return {\n    photos: messages.map((message) => message.content.action!.photo).filter(Boolean),\n    users,\n  };\n}\n\nexport function reportSpam(userOrChat: ApiPeer) {\n  const { id, accessHash } = userOrChat;\n\n  return invokeRequest(new GramJs.messages.ReportSpam({\n    peer: buildInputPeer(id, accessHash),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function updateEmojiStatus(emojiStatus: ApiSticker, expires?: number) {\n  return invokeRequest(new GramJs.account.UpdateEmojiStatus({\n    emojiStatus: buildInputEmojiStatus(emojiStatus, expires),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function saveCloseFriends(userIds: string[]) {\n  const id = userIds.map((userId) => buildMtpPeerId(userId, 'user'));\n\n  return invokeRequest(new GramJs.contacts.EditCloseFriends({ id }), {\n    shouldReturnTrue: true,\n  });\n}\n\nfunction updateLocalDb(result: (GramJs.photos.Photos | GramJs.photos.PhotosSlice | GramJs.messages.Chats)) {\n  if ('chats' in result) {\n    addEntitiesToLocalDb(result.chats);\n  }\n\n  if ('photos' in result) {\n    result.photos.forEach(addPhotoToLocalDb);\n  }\n\n  if ('users' in result) {\n    addEntitiesToLocalDb(result.users);\n  }\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiSticker, ApiStickerSetInfo, ApiVideo, OnApiUpdate,\n} from '../../types';\n\nimport { DEFAULT_GIF_SEARCH_BOT_USERNAME, RECENT_STATUS_LIMIT, RECENT_STICKERS_LIMIT } from '../../../config';\nimport { buildVideoFromDocument } from '../apiBuilders/messageContent';\nimport { buildApiEmojiStatus } from '../apiBuilders/peers';\nimport {\n  buildStickerSet, buildStickerSetCovered, processStickerPackResult, processStickerResult,\n} from '../apiBuilders/symbols';\nimport { buildInputDocument, buildInputStickerSet, buildInputStickerSetShortName } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchCustomEmojiSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetEmojiStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length || stickerSet.thumbDocumentId) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchStickerSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetAllStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchRecentStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.RecentStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers.slice(0, RECENT_STICKERS_LIMIT)),\n  };\n}\n\nexport async function fetchFavoriteStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFavedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FavedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers),\n  };\n}\n\nexport async function fetchFeaturedStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchFeaturedEmojiStickers() {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedEmojiStickers({ hash: BigInt(0) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  result.sets.forEach(({ set }) => {\n    if (set.thumbDocumentId) {\n      localDb.stickerSets[String(set.id)] = set;\n    }\n  });\n\n  return {\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function faveSticker({\n  sticker,\n  unfave,\n}: {\n  sticker: ApiSticker;\n  unfave?: boolean;\n}) {\n  const request = new GramJs.messages.FaveSticker({\n    id: buildInputDocument(sticker),\n    unfave,\n  });\n\n  const result = await invokeRequest(request);\n  if (result) {\n    onUpdate({\n      '@type': 'updateFavoriteStickers',\n    });\n  }\n}\n\nexport function removeRecentSticker({\n  sticker,\n}: {\n  sticker: ApiSticker;\n}) {\n  const request = new GramJs.messages.SaveRecentSticker({\n    id: buildInputDocument(sticker),\n    unsave: true,\n  });\n\n  return invokeRequest(request);\n}\n\nexport function clearRecentStickers() {\n  return invokeRequest(new GramJs.messages.ClearRecentStickers());\n}\n\nexport async function fetchStickers(\n  { stickerSetInfo }:\n  { stickerSetInfo: ApiStickerSetInfo },\n) {\n  if ('isMissing' in stickerSetInfo) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: 'id' in stickerSetInfo\n      ? buildInputStickerSet(stickerSetInfo.id, stickerSetInfo.accessHash)\n      : buildInputStickerSetShortName(stickerSetInfo.shortName),\n  }), {\n    shouldThrow: true,\n  });\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  localDb.stickerSets[String(result.set.id)] = result.set;\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n    packs: processStickerPackResult(result.packs),\n  };\n}\n\nexport async function fetchCustomEmoji({ documentId }: { documentId: string[] }) {\n  if (!documentId.length) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetCustomEmojiDocuments({\n    documentId: documentId.map((id) => BigInt(id)),\n  }));\n  if (!result) return undefined;\n\n  return processStickerResult(result);\n}\n\nexport async function fetchAnimatedEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmoji(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchAnimatedEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmojiAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchGenericEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiGenericAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchPremiumGifts() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetPremiumGifts(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultTopicIcons() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultTopicIcons(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultStatusEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultStatuses(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function searchStickers({ query, hash = '0' }: { query: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.SearchStickerSets({\n    q: query,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.FoundStickerSetsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchSavedGifs({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedGifs({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedGifsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    gifs: processGifResult(result.gifs),\n  };\n}\n\nexport function saveGif({ gif, shouldUnsave }: { gif: ApiVideo; shouldUnsave?: boolean }) {\n  const request = new GramJs.messages.SaveGif({\n    id: buildInputDocument(gif),\n    unsave: shouldUnsave,\n  });\n\n  return invokeRequest(request, { shouldReturnTrue: true });\n}\n\nexport async function installStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.InstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: Date.now() },\n    });\n  }\n}\n\nexport async function uninstallStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.UninstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: undefined },\n    });\n  }\n}\n\nlet inputGifBot: GramJs.InputUser | undefined;\n\nexport async function searchGifs({\n  query,\n  offset = '',\n  username = DEFAULT_GIF_SEARCH_BOT_USERNAME,\n}: { query: string; offset?: string; username?: string }) {\n  if (!inputGifBot) {\n    const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({\n      username,\n    }));\n    if (!resolvedPeer || !(resolvedPeer.users[0] instanceof GramJs.User)) {\n      return undefined;\n    }\n\n    inputGifBot = new GramJs.InputUser({\n      userId: (resolvedPeer.peer as GramJs.PeerUser).userId,\n      accessHash: resolvedPeer.users[0].accessHash!,\n    });\n  }\n\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: inputGifBot,\n    peer: new GramJs.InputPeerEmpty(),\n    query,\n    offset,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const documents = result.results\n    .map((foundGif) => {\n      if (foundGif instanceof GramJs.BotInlineMediaResult) {\n        return foundGif.document;\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n\n  return {\n    nextOffset: result.nextOffset,\n    gifs: processGifResult(documents),\n  };\n}\n\nexport async function fetchStickersForEmoji({\n  emoji, hash = '0',\n}: { emoji: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetStickers({\n    emoticon: emoji,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.StickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    stickers: processStickerResult(result.stickers),\n    hash: String(result.hash),\n  };\n}\n\nexport async function fetchEmojiKeywords({ language, fromVersion }: {\n  language: string;\n  fromVersion?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetEmojiKeywordsDifference({\n    langCode: language,\n    fromVersion,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    language: result.langCode,\n    version: result.version,\n    keywords: result.keywords.reduce((acc, emojiKeyword) => {\n      acc[emojiKeyword.keyword] = emojiKeyword.emoticons;\n\n      return acc;\n    }, {} as Record<string, string[]>),\n  };\n}\n\nexport async function fetchRecentEmojiStatuses(hash = '0') {\n  const result = await invokeRequest(new GramJs.account.GetRecentEmojiStatuses({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.account.EmojiStatusesNotModified) {\n    return undefined;\n  }\n\n  const documentIds = result.statuses\n    .slice(0, RECENT_STATUS_LIMIT)\n    .map(buildApiEmojiStatus)\n    .filter(Boolean)\n    .map(({ documentId }) => documentId);\n  const emojiStatuses = await fetchCustomEmoji({ documentId: documentIds });\n\n  return {\n    hash: String(result.hash),\n    emojiStatuses,\n  };\n}\n\nfunction processGifResult(gifs: GramJs.TypeDocument[]) {\n  return gifs\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const gif = buildVideoFromDocument(document);\n        if (gif) {\n          localDb.documents[String(document.id)] = document;\n\n          return gif;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiError, ApiUser, ApiUsername, OnApiUpdate,\n} from '../../types';\n\nimport { USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildApiExportedInvite, buildChatInviteImporter } from '../apiBuilders/chats';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport { addEntitiesToLocalDb } from '../helpers';\nimport { invokeRequest } from './client';\n\nlet onUpdate: OnApiUpdate;\n\nexport const ACCEPTABLE_USERNAME_ERRORS = new Set([USERNAME_PURCHASE_ERROR, 'USERNAME_INVALID']);\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function checkChatUsername({ username }: { username: string }) {\n  try {\n    const result = await invokeRequest(new GramJs.channels.CheckUsername({\n      channel: new GramJs.InputChannelEmpty(),\n      username,\n    }), {\n      shouldThrow: true,\n    });\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport async function setChatUsername(\n  { chat, username }: { chat: ApiChat; username: string },\n) {\n  const result = await invokeRequest(new GramJs.channels.UpdateUsername({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    username,\n  }));\n\n  let usernames: ApiUsername[] = username ? [{ username, isEditable: true, isActive: true }] : [];\n  if (chat.usernames) {\n    // User can remove username from chat when changing it type to private, so we need to filter out empty usernames\n    usernames = usernames.concat(chat.usernames.filter((u) => u.username && !u.isEditable));\n  }\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { usernames: usernames.length ? usernames : undefined },\n    });\n  }\n\n  return result;\n}\n\nexport async function deactivateAllUsernames({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.DeactivateAllUsernames({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }));\n\n  if (result) {\n    const usernames = chat.usernames\n      ? chat.usernames\n        .map((u) => ({ ...u, isActive: false }))\n        // User can remove username from chat when changing it type to private, so we need to filter out empty usernames\n        .filter((u) => u.username)\n      : undefined;\n\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { usernames },\n    });\n  }\n\n  return result;\n}\n\nexport async function updatePrivateLink({\n  chat, usageLimit, expireDate,\n}: {\n  chat: ApiChat; usageLimit?: number; expireDate?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    usageLimit,\n    expireDate,\n  }));\n\n  if (!(result instanceof GramJs.ChatInviteExported)) return undefined;\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      inviteLink: result.link,\n    },\n  });\n\n  return result.link;\n}\n\nexport async function fetchExportedChatInvites({\n  peer, admin, limit = 0, isRevoked,\n}: { peer: ApiChat; admin: ApiUser; limit?: number; isRevoked?: boolean }) {\n  const exportedInvites = await invokeRequest(new GramJs.messages.GetExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n    limit,\n    revoked: isRevoked || undefined,\n  }), {\n    abortControllerChatId: peer.id,\n  });\n\n  if (!exportedInvites) return undefined;\n  addEntitiesToLocalDb(exportedInvites.users);\n\n  const invites = (exportedInvites.invites\n    .filter((invite): invite is GramJs.ChatInviteExported => invite instanceof GramJs.ChatInviteExported))\n    .map(buildApiExportedInvite);\n\n  return {\n    invites,\n    users: exportedInvites.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function editExportedChatInvite({\n  peer, isRevoked, link, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  isRevoked?: boolean;\n  link: string;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.EditExportedChatInvite({\n    link,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded,\n    title,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!invite) return undefined;\n\n  addEntitiesToLocalDb(invite.users);\n  if (invite instanceof GramJs.messages.ExportedChatInvite && invite.invite instanceof GramJs.ChatInviteExported) {\n    const replaceInvite = buildApiExportedInvite(invite.invite);\n    return {\n      oldInvite: replaceInvite,\n      newInvite: replaceInvite,\n      users: invite.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  if (invite instanceof GramJs.messages.ExportedChatInviteReplaced\n    && invite.invite instanceof GramJs.ChatInviteExported\n    && invite.newInvite instanceof GramJs.ChatInviteExported) {\n    const oldInvite = buildApiExportedInvite(invite.invite);\n    const newInvite = buildApiExportedInvite(invite.newInvite);\n    return {\n      oldInvite,\n      newInvite,\n      users: invite.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport async function exportChatInvite({\n  peer, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded || undefined,\n    title,\n  }));\n\n  if (!(invite instanceof GramJs.ChatInviteExported)) return undefined;\n  return buildApiExportedInvite(invite);\n}\n\nexport async function deleteExportedChatInvite({\n  peer, link,\n}: {\n  peer: ApiChat; link: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteExportedChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n  }));\n\n  return result;\n}\n\nexport async function deleteRevokedExportedChatInvites({\n  peer, admin,\n}: {\n  peer: ApiChat; admin: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteRevokedExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n  }));\n\n  return result;\n}\n\nexport async function fetchChatInviteImporters({\n  peer, link, offsetDate = 0, offsetUser, limit = 0, isRequested,\n}: {\n  peer: ApiChat; link?: string; offsetDate?: number; offsetUser?: ApiUser; limit?: number; isRequested?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetChatInviteImporters({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n    offsetDate,\n    offsetUser: offsetUser\n      ? buildInputEntity(offsetUser.id, offsetUser.accessHash) as GramJs.InputUser : new GramJs.InputUserEmpty(),\n    limit,\n    requested: isRequested || undefined,\n  }), {\n    abortControllerChatId: peer.id,\n  });\n\n  if (!result) return undefined;\n  const users = result.users.map((user) => buildApiUser(user)).filter(Boolean);\n  addEntitiesToLocalDb(result.users);\n  return {\n    importers: result.importers.map((importer) => buildChatInviteImporter(importer)),\n    users: buildCollectionByKey(users, 'id'),\n  };\n}\n\nexport function hideChatJoinRequest({\n  peer,\n  user,\n  isApproved,\n}: {\n  peer: ApiChat;\n  user: ApiUser;\n  isApproved: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.HideChatJoinRequest({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    approved: isApproved || undefined,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function hideAllChatJoinRequests({\n  peer,\n  isApproved,\n  link,\n}: {\n  peer: ApiChat;\n  isApproved: boolean;\n  link?: string;\n}) {\n  return invokeRequest(new GramJs.messages.HideAllChatJoinRequests({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    approved: isApproved || undefined,\n    link,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function hideChatReportPanel(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.HidePeerSettingsBar({\n    peer: buildInputPeer(id, accessHash),\n  }));\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiLimitType, ApiPremiumSection } from '../../../global/types';\nimport type { ApiAppConfig } from '../../types';\n\nimport {\n  DEFAULT_LIMITS,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STORY_EXPIRE_PERIOD,\n  STORY_VIEWERS_EXPIRE_PERIOD,\n} from '../../../config';\nimport localDb from '../localDb';\nimport { buildJson } from './misc';\n\ntype LimitType = 'default' | 'premium';\ntype Limit =\n  | 'upload_max_fileparts'\n  | 'stickers_faved_limit'\n  | 'saved_gifs_limit'\n  | 'dialog_filters_chats_limit'\n  | 'dialog_filters_limit'\n  | 'dialogs_folder_pinned_limit'\n  | 'dialogs_pinned_limit'\n  | 'caption_length_limit'\n  | 'channels_limit'\n  | 'channels_public_limit'\n  | 'about_length_limit'\n  | 'chatlist_invites_limit'\n  | 'chatlist_joined_limit'\n  | 'recommended_channels_limit'\n  | 'saved_dialogs_pinned_limit';\ntype LimitKey = `${Limit}_${LimitType}`;\ntype LimitsConfig = Record<LimitKey, number>;\n\nexport interface GramJsAppConfig extends LimitsConfig {\n  emojies_sounds: Record<string, {\n    id: string;\n    access_hash: string;\n    file_reference_base64: string;\n  }>;\n  emojies_send_dice: string[];\n  groupcall_video_participants_max: number;\n  reactions_uniq_max: number;\n  chat_read_mark_size_threshold: number;\n  chat_read_mark_expire_period: number;\n  pm_read_date_expire_period: number;\n  reactions_user_max_default: number;\n  reactions_user_max_premium: number;\n  autologin_domains: string[];\n  autologin_token: string;\n  url_auth_domains: string[];\n  premium_purchase_blocked: boolean;\n  premium_bot_username: string;\n  premium_invoice_slug: string;\n  premium_promo_order: string[];\n  default_emoji_statuses_stickerset_id: string;\n  hidden_members_group_size_min: number;\n  autoarchive_setting_available: boolean;\n  authorization_autoconfirm_period: number;\n  // Forums\n  topics_pinned_limit: number;\n  // Stories\n  stories_all_hidden?: boolean;\n  story_expire_period: number;\n  story_viewers_expire_period: number;\n  stories_changelog_user_id?: number;\n  // Boosts\n  group_transcribe_level_min?: number;\n}\n\nfunction buildEmojiSounds(appConfig: GramJsAppConfig) {\n  const { emojies_sounds } = appConfig;\n  return emojies_sounds ? Object.keys(emojies_sounds).reduce((acc: Record<string, string>, key) => {\n    const l = emojies_sounds[key];\n    localDb.documents[l.id] = new GramJs.Document({\n      id: BigInt(l.id),\n      accessHash: BigInt(l.access_hash),\n      dcId: 1,\n      mimeType: 'audio/ogg',\n      fileReference: Buffer.alloc(0),\n      size: BigInt(0),\n    } as GramJs.Document);\n\n    acc[key] = l.id;\n    return acc;\n  }, {}) : {};\n}\n\nfunction getLimit(appConfig: GramJsAppConfig, key: Limit, fallbackKey: ApiLimitType) {\n  const defaultLimit = appConfig[`${key}_default`] || DEFAULT_LIMITS[fallbackKey][0];\n  const premiumLimit = appConfig[`${key}_premium`] || DEFAULT_LIMITS[fallbackKey][1];\n  return [defaultLimit, premiumLimit] as const;\n}\n\nexport function buildAppConfig(json: GramJs.TypeJSONValue, hash: number): ApiAppConfig {\n  const appConfig = buildJson(json) as GramJsAppConfig;\n\n  return {\n    emojiSounds: buildEmojiSounds(appConfig),\n    seenByMaxChatMembers: appConfig.chat_read_mark_size_threshold,\n    seenByExpiresAt: appConfig.chat_read_mark_expire_period,\n    readDateExpiresAt: appConfig.pm_read_date_expire_period,\n    autologinDomains: appConfig.autologin_domains || [],\n    urlAuthDomains: appConfig.url_auth_domains || [],\n    maxUniqueReactions: appConfig.reactions_uniq_max,\n    premiumBotUsername: appConfig.premium_bot_username,\n    premiumInvoiceSlug: appConfig.premium_invoice_slug,\n    premiumPromoOrder: appConfig.premium_promo_order as ApiPremiumSection[],\n    isPremiumPurchaseBlocked: appConfig.premium_purchase_blocked,\n    defaultEmojiStatusesStickerSetId: appConfig.default_emoji_statuses_stickerset_id,\n    topicsPinnedLimit: appConfig.topics_pinned_limit,\n    maxUserReactionsDefault: appConfig.reactions_user_max_default,\n    maxUserReactionsPremium: appConfig.reactions_user_max_premium,\n    hiddenMembersMinCount: appConfig.hidden_members_group_size_min,\n    canDisplayAutoarchiveSetting: appConfig.autoarchive_setting_available,\n    limits: {\n      uploadMaxFileparts: getLimit(appConfig, 'upload_max_fileparts', 'uploadMaxFileparts'),\n      stickersFaved: getLimit(appConfig, 'stickers_faved_limit', 'stickersFaved'),\n      savedGifs: getLimit(appConfig, 'saved_gifs_limit', 'savedGifs'),\n      dialogFiltersChats: getLimit(appConfig, 'dialog_filters_chats_limit', 'dialogFiltersChats'),\n      dialogFilters: getLimit(appConfig, 'dialog_filters_limit', 'dialogFilters'),\n      dialogFolderPinned: getLimit(appConfig, 'dialogs_pinned_limit', 'dialogFolderPinned'),\n      captionLength: getLimit(appConfig, 'caption_length_limit', 'captionLength'),\n      channels: getLimit(appConfig, 'channels_limit', 'channels'),\n      channelsPublic: getLimit(appConfig, 'channels_public_limit', 'channelsPublic'),\n      aboutLength: getLimit(appConfig, 'about_length_limit', 'aboutLength'),\n      chatlistInvites: getLimit(appConfig, 'chatlist_invites_limit', 'chatlistInvites'),\n      chatlistJoined: getLimit(appConfig, 'chatlist_joined_limit', 'chatlistJoined'),\n      recommendedChannels: getLimit(appConfig, 'recommended_channels_limit', 'recommendedChannels'),\n      savedDialogsPinned: getLimit(appConfig, 'saved_dialogs_pinned_limit', 'savedDialogsPinned'),\n    },\n    hash,\n    areStoriesHidden: appConfig.stories_all_hidden,\n    storyExpirePeriod: appConfig.story_expire_period ?? STORY_EXPIRE_PERIOD,\n    storyViewersExpirePeriod: appConfig.story_viewers_expire_period ?? STORY_VIEWERS_EXPIRE_PERIOD,\n    storyChangelogUserId: appConfig.stories_changelog_user_id?.toString() ?? SERVICE_NOTIFICATIONS_USER_ID,\n    groupTranscribeLevelMin: appConfig.group_transcribe_level_min,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { LANG_PACKS } from '../../../config';\nimport type { ApiInputPrivacyRules, ApiPrivacyKey, LangCode } from '../../../types';\nimport type {\n  ApiAppConfig,\n  ApiConfig,\n  ApiError,\n  ApiLanguage,\n  ApiNotifyException,\n  ApiPhoto,\n  ApiUser,\n} from '../../types';\n\nimport { BLOCKED_LIST_LIMIT, DEFAULT_LANG_PACK, MAX_INT_32 } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { buildAppConfig } from '../apiBuilders/appConfig';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiPhoto, buildPrivacyRules } from '../apiBuilders/common';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport {\n  buildApiConfig,\n  buildApiCountryList,\n  buildApiNotifyException,\n  buildApiPeerColors,\n  buildApiSession,\n  buildApiWallpaper,\n  buildApiWebSession, buildLangPack, buildLangPackString,\n} from '../apiBuilders/misc';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildInputEntity, buildInputPeer, buildInputPhoto,\n  buildInputPrivacyKey,\n  buildInputPrivacyRules,\n} from '../gramjsBuilders';\nimport { addEntitiesToLocalDb, addPhotoToLocalDb } from '../helpers';\nimport localDb from '../localDb';\nimport { getClient, invokeRequest, uploadFile } from './client';\nimport { ACCEPTABLE_USERNAME_ERRORS } from './management';\n\nconst BETA_LANG_CODES = ['ar', 'fa', 'id', 'ko', 'uz', 'en'];\n\nexport function updateProfile({\n  firstName,\n  lastName,\n  about,\n}: {\n  firstName?: string;\n  lastName?: string;\n  about?: string;\n}) {\n  return invokeRequest(new GramJs.account.UpdateProfile({\n    firstName: firstName || '',\n    lastName: lastName || '',\n    about: about || '',\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function checkUsername(username: string) {\n  try {\n    const result = await invokeRequest(new GramJs.account.CheckUsername({\n      username,\n    }), {\n      shouldThrow: true,\n    });\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport function updateUsername(username: string) {\n  return invokeRequest(new GramJs.account.UpdateUsername({ username }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport async function updateProfilePhoto(photo?: ApiPhoto, isFallback?: boolean) {\n  const photoId = photo ? buildInputPhoto(photo) : new GramJs.InputPhotoEmpty();\n  const result = await invokeRequest(new GramJs.photos.UpdateProfilePhoto({\n    id: photoId,\n    ...(isFallback ? { fallback: true } : undefined),\n  }));\n  if (!result) return undefined;\n\n  addEntitiesToLocalDb(result.users);\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users: result.users.map(buildApiUser).filter(Boolean),\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n  return undefined;\n}\n\nexport async function uploadProfilePhoto(\n  file: File, isFallback?: boolean, isVideo = false, videoTs = 0, bot?: ApiUser,\n) {\n  const inputFile = await uploadFile(file);\n  const result = await invokeRequest(new GramJs.photos.UploadProfilePhoto({\n    ...(bot ? { bot: buildInputPeer(bot.id, bot.accessHash) } : undefined),\n    ...(isVideo ? { video: inputFile, videoStartTs: videoTs } : { file: inputFile }),\n    ...(isFallback ? { fallback: true } : undefined),\n  }));\n\n  if (!result) return undefined;\n\n  addEntitiesToLocalDb(result.users);\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users: result.users.map(buildApiUser).filter(Boolean),\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n  return undefined;\n}\n\nexport async function uploadContactProfilePhoto({\n  file, isSuggest, user,\n}: {\n  file?: File;\n  isSuggest?: boolean;\n  user: ApiUser;\n}) {\n  const inputFile = file ? await uploadFile(file) : undefined;\n  const result = await invokeRequest(new GramJs.photos.UploadContactProfilePhoto({\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    file: inputFile,\n    ...(isSuggest ? { suggest: true } : { save: true }),\n  }));\n\n  if (!result) return undefined;\n\n  addEntitiesToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users,\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n\n  return {\n    users,\n    photo: undefined,\n  };\n}\n\nexport async function deleteProfilePhotos(photos: ApiPhoto[]) {\n  const photoIds = photos.map(buildInputPhoto).filter(Boolean);\n  const isDeleted = await invokeRequest(new GramJs.photos.DeletePhotos({ id: photoIds }), {\n    shouldReturnTrue: true,\n  });\n  if (isDeleted) {\n    photos.forEach((photo) => {\n      delete localDb.photos[photo.id];\n    });\n  }\n  return isDeleted;\n}\n\nexport async function fetchWallpapers() {\n  const result = await invokeRequest(new GramJs.account.GetWallPapers({ hash: BigInt('0') }));\n\n  if (!result || result instanceof GramJs.account.WallPapersNotModified) {\n    return undefined;\n  }\n\n  const filteredWallpapers = result.wallpapers.filter((wallpaper) => {\n    if (\n      !(wallpaper instanceof GramJs.WallPaper)\n      || !(wallpaper.document instanceof GramJs.Document)\n    ) {\n      return false;\n    }\n\n    return !wallpaper.pattern && wallpaper.document.mimeType !== 'application/x-tgwallpattern';\n  }) as GramJs.WallPaper[];\n\n  filteredWallpapers.forEach((wallpaper) => {\n    localDb.documents[String(wallpaper.document.id)] = wallpaper.document as GramJs.Document;\n  });\n\n  return {\n    wallpapers: filteredWallpapers.map(buildApiWallpaper).filter(Boolean),\n  };\n}\n\nexport async function uploadWallpaper(file: File) {\n  const inputFile = await uploadFile(file);\n\n  const result = await invokeRequest(new GramJs.account.UploadWallPaper({\n    file: inputFile,\n    mimeType: file.type,\n    settings: new GramJs.WallPaperSettings(),\n  }));\n\n  if (!result || !(result instanceof GramJs.WallPaper)) {\n    return undefined;\n  }\n\n  const wallpaper = buildApiWallpaper(result);\n  if (!wallpaper) {\n    return undefined;\n  }\n\n  localDb.documents[String(result.document.id)] = result.document as GramJs.Document;\n\n  return { wallpaper };\n}\n\nexport async function fetchBlockedUsers({\n  isOnlyStories,\n}: {\n  isOnlyStories?: true;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.GetBlocked({\n    myStoriesFrom: isOnlyStories,\n    limit: BLOCKED_LIST_LIMIT,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((chat) => buildApiChatFromPreview(chat)).filter(Boolean),\n    blockedIds: result.blocked.map((blocked) => getApiChatIdFromMtpPeer(blocked.peerId)),\n    totalCount: result instanceof GramJs.contacts.BlockedSlice ? result.count : result.blocked.length,\n  };\n}\n\nexport function blockUser({\n  user,\n  isOnlyStories,\n}: {\n  user: ApiUser;\n  isOnlyStories?: true;\n}) {\n  return invokeRequest(new GramJs.contacts.Block({\n    id: buildInputPeer(user.id, user.accessHash),\n    myStoriesFrom: isOnlyStories,\n  }));\n}\n\nexport function unblockUser({\n  user,\n  isOnlyStories,\n}: {\n  user: ApiUser;\n  isOnlyStories?: true;\n}) {\n  return invokeRequest(new GramJs.contacts.Unblock({\n    id: buildInputPeer(user.id, user.accessHash),\n    myStoriesFrom: isOnlyStories,\n  }));\n}\n\nexport async function fetchAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    authorizations: buildCollectionByKey(result.authorizations.map(buildApiSession), 'hash'),\n    ttlDays: result.authorizationTtlDays,\n  };\n}\n\nexport function terminateAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllAuthorizations() {\n  return invokeRequest(new GramJs.auth.ResetAuthorizations());\n}\n\nexport async function fetchWebAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetWebAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    webAuthorizations: buildCollectionByKey(result.authorizations.map(buildApiWebSession), 'hash'),\n  };\n}\n\nexport function terminateWebAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetWebAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllWebAuthorizations() {\n  return invokeRequest(new GramJs.account.ResetWebAuthorizations());\n}\n\nexport async function fetchNotificationExceptions() {\n  const result = await invokeRequest(new GramJs.account.GetNotifyExceptions({\n    compareSound: true,\n  }), {\n    shouldIgnoreUpdates: true,\n  });\n\n  if (!(result instanceof GramJs.Updates || result instanceof GramJs.UpdatesCombined)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.updates.reduce((acc, update) => {\n    if (!(update instanceof GramJs.UpdateNotifySettings && update.peer instanceof GramJs.NotifyPeer)) {\n      return acc;\n    }\n\n    acc.push(buildApiNotifyException(update.notifySettings, update.peer.peer));\n\n    return acc;\n  }, [] as ApiNotifyException[]);\n}\n\nexport async function fetchNotificationSettings() {\n  const [\n    isMutedContactSignUpNotification,\n    privateContactNotificationsSettings,\n    groupNotificationsSettings,\n    broadcastNotificationsSettings,\n  ] = await Promise.all([\n    invokeRequest(new GramJs.account.GetContactSignUpNotification()),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyUsers(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyChats(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyBroadcasts(),\n    })),\n  ]);\n\n  if (!privateContactNotificationsSettings || !groupNotificationsSettings || !broadcastNotificationsSettings) {\n    return false;\n  }\n\n  const {\n    silent: privateSilent, muteUntil: privateMuteUntil, showPreviews: privateShowPreviews,\n  } = privateContactNotificationsSettings;\n  const {\n    silent: groupSilent, muteUntil: groupMuteUntil, showPreviews: groupShowPreviews,\n  } = groupNotificationsSettings;\n  const {\n    silent: broadcastSilent, muteUntil: broadcastMuteUntil, showPreviews: broadcastShowPreviews,\n  } = broadcastNotificationsSettings;\n\n  return {\n    hasContactJoinedNotifications: !isMutedContactSignUpNotification,\n    hasPrivateChatsNotifications: !(\n      privateSilent\n      || (typeof privateMuteUntil === 'number' && getServerTime() < privateMuteUntil)\n    ),\n    hasPrivateChatsMessagePreview: privateShowPreviews,\n    hasGroupNotifications: !(\n      groupSilent || (typeof groupMuteUntil === 'number'\n        && getServerTime() < groupMuteUntil)\n    ),\n    hasGroupMessagePreview: groupShowPreviews,\n    hasBroadcastNotifications: !(\n      broadcastSilent || (typeof broadcastMuteUntil === 'number'\n        && getServerTime() < broadcastMuteUntil)\n    ),\n    hasBroadcastMessagePreview: broadcastShowPreviews,\n  };\n}\n\nexport function updateContactSignUpNotification(isSilent: boolean) {\n  return invokeRequest(new GramJs.account.SetContactSignUpNotification({ silent: isSilent }));\n}\n\nexport function updateNotificationSettings(peerType: 'contact' | 'group' | 'broadcast', {\n  isSilent,\n  shouldShowPreviews,\n}: {\n  isSilent?: boolean;\n  shouldShowPreviews?: boolean;\n}) {\n  let peer: GramJs.TypeInputNotifyPeer;\n  if (peerType === 'contact') {\n    peer = new GramJs.InputNotifyUsers();\n  } else if (peerType === 'group') {\n    peer = new GramJs.InputNotifyChats();\n  } else {\n    peer = new GramJs.InputNotifyBroadcasts();\n  }\n\n  const settings = {\n    showPreviews: shouldShowPreviews,\n    silent: isSilent,\n    muteUntil: isSilent ? MAX_INT_32 : 0,\n  };\n\n  return invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer,\n    settings: new GramJs.InputPeerNotifySettings(settings),\n  }));\n}\n\nexport async function fetchLanguages(): Promise<ApiLanguage[] | undefined> {\n  const result = await invokeRequest(new GramJs.langpack.GetLanguages({\n    langPack: DEFAULT_LANG_PACK,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchLangPack({ sourceLangPacks, langCode }: {\n  sourceLangPacks: typeof LANG_PACKS;\n  langCode: string;\n}) {\n  const results = await Promise.all(sourceLangPacks.map((langPack) => {\n    return invokeRequest(new GramJs.langpack.GetLangPack({\n      langPack,\n      langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    }));\n  }));\n\n  const collections = results.filter(Boolean).map(buildLangPack);\n  if (!collections.length) {\n    return undefined;\n  }\n\n  return { langPack: Object.assign({}, ...collections.reverse()) as typeof collections[0] };\n}\n\nexport async function fetchLangStrings({ langPack, langCode, keys }: {\n  langPack: string; langCode: string; keys: string[];\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetStrings({\n    langPack,\n    langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    keys,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(buildLangPackString);\n}\n\nexport async function fetchPrivacySettings(privacyKey: ApiPrivacyKey) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const result = await invokeRequest(new GramJs.account.GetPrivacy({ key }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport function registerDevice(token: string) {\n  const client = getClient();\n  const secret = client.session.getAuthKey().getKey();\n  return invokeRequest(new GramJs.account.RegisterDevice({\n    tokenType: 10,\n    secret,\n    appSandbox: false,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport function unregisterDevice(token: string) {\n  return invokeRequest(new GramJs.account.UnregisterDevice({\n    tokenType: 10,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport async function setPrivacySettings(\n  privacyKey: ApiPrivacyKey, rules: ApiInputPrivacyRules,\n) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const privacyRules = buildInputPrivacyRules(rules);\n\n  const result = await invokeRequest(new GramJs.account.SetPrivacy({ key, rules: privacyRules }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport async function updateIsOnline(isOnline: boolean) {\n  await invokeRequest(new GramJs.account.UpdateStatus({ offline: !isOnline }));\n}\n\nexport async function fetchContentSettings() {\n  const result = await invokeRequest(new GramJs.account.GetContentSettings());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    isSensitiveEnabled: Boolean(result.sensitiveEnabled),\n    canChangeSensitive: Boolean(result.sensitiveCanChange),\n  };\n}\n\nexport function updateContentSettings(isEnabled: boolean) {\n  return invokeRequest(new GramJs.account.SetContentSettings({\n    sensitiveEnabled: isEnabled || undefined,\n  }));\n}\n\nexport async function fetchAppConfig(hash?: number): Promise<ApiAppConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetAppConfig({ hash }));\n  if (!result || result instanceof GramJs.help.AppConfigNotModified) return undefined;\n\n  const { config, hash: resultHash } = result;\n  return buildAppConfig(config, resultHash);\n}\n\nexport async function fetchConfig(): Promise<ApiConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetConfig());\n  if (!result) return undefined;\n\n  return buildApiConfig(result);\n}\n\nexport async function fetchPeerColors(hash?: number) {\n  const result = await invokeRequest(new GramJs.help.GetPeerColors({\n    hash,\n  }));\n  if (!result) return undefined;\n\n  const colors = buildApiPeerColors(result);\n  if (!colors) return undefined;\n\n  const newHash = result instanceof GramJs.help.PeerColors ? result.hash : undefined;\n\n  return {\n    colors,\n    hash: newHash,\n  };\n}\n\nfunction updateLocalDb(\n  result: (\n    GramJs.account.PrivacyRules | GramJs.contacts.Blocked | GramJs.contacts.BlockedSlice |\n    GramJs.Updates | GramJs.UpdatesCombined\n  ),\n) {\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n}\n\nexport async function fetchCountryList({ langCode = 'en' }: { langCode?: LangCode }) {\n  const countryList = await invokeRequest(new GramJs.help.GetCountriesList({\n    langCode,\n  }));\n\n  if (!(countryList instanceof GramJs.help.CountriesList)) {\n    return undefined;\n  }\n  return buildApiCountryList(countryList.countries);\n}\n\nexport async function fetchGlobalPrivacySettings() {\n  const result = await invokeRequest(new GramJs.account.GetGlobalPrivacySettings());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n    shouldHideReadMarks: Boolean(result.hideReadMarks),\n    shouldNewNonContactPeersRequirePremium: Boolean(result.newNoncontactPeersRequirePremium),\n  };\n}\n\nexport async function updateGlobalPrivacySettings({\n  shouldArchiveAndMuteNewNonContact,\n  shouldHideReadMarks,\n  shouldNewNonContactPeersRequirePremium,\n}: {\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldHideReadMarks?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetGlobalPrivacySettings({\n    settings: new GramJs.GlobalPrivacySettings({\n      ...(shouldArchiveAndMuteNewNonContact && { archiveAndMuteNewNoncontactPeers: true }),\n      ...(shouldHideReadMarks && { hideReadMarks: true }),\n      ...(shouldNewNonContactPeersRequirePremium && { newNoncontactPeersRequirePremium: true }),\n    }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n    shouldHideReadMarks: Boolean(result.hideReadMarks),\n    shouldNewNonContactPeersRequirePremium: Boolean(result.newNoncontactPeersRequirePremium),\n  };\n}\n\nexport function toggleUsername({\n  chatId, accessHash, username, isActive,\n}: {\n  username: string;\n  isActive: boolean;\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ToggleUsername({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      username,\n      active: isActive,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ToggleUsername({\n    username,\n    active: isActive,\n  }));\n}\n\nexport function reorderUsernames({ chatId, accessHash, usernames }: {\n  usernames: string[];\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ReorderUsernames({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      order: usernames,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ReorderUsernames({\n    order: usernames,\n  }));\n}\n","import { Api as GramJs, errors } from '../../../lib/gramjs';\n\nimport type { OnApiUpdate } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getTmpPassword, invokeRequest, updateTwoFaSettings } from './client';\n\nconst ApiErrors: { [k: string]: string } = {\n  EMAIL_UNCONFIRMED: 'Email unconfirmed',\n  EMAIL_HASH_EXPIRED: 'Email hash expired',\n  NEW_SALT_INVALID: 'The new salt is invalid',\n  NEW_SETTINGS_INVALID: 'The new password settings are invalid',\n  CODE_INVALID: 'Invalid Code',\n  PASSWORD_HASH_INVALID: 'Invalid Password',\n};\n\nconst emailCodeController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getPasswordInfo() {\n  const result = await invokeRequest(new GramJs.account.GetPassword());\n  if (!result) {\n    return undefined;\n  }\n\n  const { hint, hasPassword } = result;\n\n  return { hint, hasPassword };\n}\n\nfunction onRequestEmailCode(length: number) {\n  onUpdate({\n    '@type': 'updateTwoFaStateWaitCode',\n    length,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    emailCodeController.resolve = resolve;\n    emailCodeController.reject = reject;\n  });\n}\n\nexport function getTemporaryPaymentPassword(password: string, ttl?: number) {\n  return getTmpPassword(password, ttl);\n}\n\nexport async function checkPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ isCheckPassword: true, currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function clearPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updatePassword(currentPassword: string, password: string, hint?: string, email?: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: password,\n      hint,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updateRecoveryEmail(currentPassword: string, email: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: currentPassword,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport function provideRecoveryEmailCode(code: string) {\n  emailCodeController.resolve!(code);\n}\n\nfunction onError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateTwoFaError',\n    message,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiChat, ApiReaction } from '../../types';\n\nimport {\n  API_GENERAL_ID_LIMIT,\n  REACTION_LIST_LIMIT,\n  RECENT_REACTIONS_LIMIT,\n  TOP_REACTIONS_LIMIT,\n} from '../../../config';\nimport { split } from '../../../util/iteratees';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport {\n  buildApiAvailableReaction,\n  buildApiReaction,\n  buildApiSavedReactionTag,\n  buildMessagePeerReaction,\n} from '../apiBuilders/reactions';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildInputPeer, buildInputReaction } from '../gramjsBuilders';\nimport { addEntitiesToLocalDb } from '../helpers';\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\n\nexport function sendWatchingEmojiInteraction({\n  chat,\n  emoticon,\n}: {\n  chat: ApiChat; emoticon: string;\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteractionSeen({\n      emoticon,\n    }),\n  }), {\n    abortControllerChatId: chat.id,\n  });\n}\n\nexport function sendEmojiInteraction({\n  chat,\n  emoticon,\n  messageId,\n  timestamps,\n}: {\n  chat: ApiChat; messageId: number; emoticon: string; timestamps: number[];\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteraction({\n      emoticon,\n      msgId: messageId,\n      interaction: new GramJs.DataJSON({\n        data: JSON.stringify({\n          v: 1,\n          a: timestamps.map((t: number) => ({\n            t,\n            i: 1,\n          })),\n        }),\n      }),\n    }),\n  }), {\n    abortControllerChatId: chat.id,\n  });\n}\n\nexport async function fetchAvailableReactions() {\n  const result = await invokeRequest(new GramJs.messages.GetAvailableReactions({}));\n\n  if (!result || result instanceof GramJs.messages.AvailableReactionsNotModified) {\n    return undefined;\n  }\n\n  result.reactions.forEach((reaction) => {\n    if (reaction.staticIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.staticIcon.id)] = reaction.staticIcon;\n    }\n    if (reaction.selectAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.selectAnimation.id)] = reaction.selectAnimation;\n    }\n    if (reaction.aroundAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.aroundAnimation.id)] = reaction.aroundAnimation;\n    }\n    if (reaction.appearAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.appearAnimation.id)] = reaction.appearAnimation;\n    }\n    if (reaction.centerIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.centerIcon.id)] = reaction.centerIcon;\n    }\n  });\n\n  return result.reactions.map(buildApiAvailableReaction);\n}\n\nexport function sendReaction({\n  chat, messageId, reactions, shouldAddToRecent,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  reactions?: ApiReaction[];\n  shouldAddToRecent?: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.SendReaction({\n    reaction: reactions?.map((r) => buildInputReaction(r)),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    ...(shouldAddToRecent && { addToRecent: true }),\n  }), {\n    shouldReturnTrue: true,\n    shouldThrow: true,\n  });\n}\n\nexport function fetchMessageReactions({\n  ids, chat,\n}: {\n  ids: number[]; chat: ApiChat;\n}) {\n  const chunks = split(ids, API_GENERAL_ID_LIMIT);\n  chunks.forEach((chunkIds) => {\n    invokeRequest(new GramJs.messages.GetMessagesReactions({\n      id: chunkIds,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }), {\n      shouldReturnTrue: true,\n      abortControllerChatId: chat.id,\n    });\n  });\n}\n\nexport async function fetchMessageReactionsList({\n  chat, messageId, reaction, offset,\n}: {\n  chat: ApiChat; messageId: number; reaction?: ApiReaction; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReactionsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(reaction && { reaction: buildInputReaction(reaction) }),\n    limit: REACTION_LIST_LIMIT,\n    ...(offset && { offset }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  const { nextOffset, reactions, count } = result;\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n    nextOffset,\n    reactions: reactions.map(buildMessagePeerReaction).filter(Boolean),\n    count,\n  };\n}\n\nexport function setDefaultReaction({\n  reaction,\n}: {\n  reaction: ApiReaction;\n}) {\n  return invokeRequest(new GramJs.messages.SetDefaultReaction({\n    reaction: buildInputReaction(reaction),\n  }));\n}\n\nexport async function fetchTopReactions({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetTopReactions({\n    limit: TOP_REACTIONS_LIMIT,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.ReactionsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    reactions: result.reactions.map(buildApiReaction).filter(Boolean),\n  };\n}\n\nexport async function fetchRecentReactions({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentReactions({\n    limit: RECENT_REACTIONS_LIMIT,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.ReactionsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    reactions: result.reactions.map(buildApiReaction).filter(Boolean),\n  };\n}\n\nexport function clearRecentReactions() {\n  return invokeRequest(new GramJs.messages.ClearRecentReactions());\n}\n\nexport async function fetchDefaultTagReactions({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetDefaultTagReactions({\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.ReactionsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    reactions: result.reactions.map(buildApiReaction).filter(Boolean),\n  };\n}\n\nexport async function fetchSavedReactionTags({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedReactionTags({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedReactionTagsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    tags: result.tags.map(buildApiSavedReactionTag).filter(Boolean),\n  };\n}\n\nexport function updateSavedReactionTag({\n  reaction,\n  title,\n}: {\n  reaction: ApiReaction;\n  title?: string;\n}) {\n  return invokeRequest(new GramJs.messages.UpdateSavedReactionTag({\n    reaction: buildInputReaction(reaction),\n    title,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  ApiStoryPublicForward,\n  StatisticsGraph,\n  StatisticsMessageInteractionCounter,\n  StatisticsOverviewItem,\n  StatisticsOverviewPercentage,\n  StatisticsOverviewPeriod,\n  StatisticsStoryInteractionCounter,\n} from '../../types';\n\nimport { buildAvatarHash } from './chats';\nimport { buildApiUsernames } from './common';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\n\nexport function buildChannelStatistics(stats: GramJs.stats.BroadcastStats): ApiChannelStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    followersGraph: buildGraph(stats.followersGraph),\n    muteGraph: buildGraph(stats.muteGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    viewsBySourceGraph: (stats.viewsBySourceGraph as GramJs.StatsGraphAsync).token,\n    newFollowersBySourceGraph: (stats.newFollowersBySourceGraph as GramJs.StatsGraphAsync).token,\n    interactionsGraph: (stats.interactionsGraph as GramJs.StatsGraphAsync).token,\n    reactionsByEmotionGraph: (stats.reactionsByEmotionGraph as GramJs.StatsGraphAsync).token,\n    storyInteractionsGraph: (stats.storyInteractionsGraph as GramJs.StatsGraphAsync).token,\n    storyReactionsByEmotionGraph: (stats.storyReactionsByEmotionGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    followers: buildStatisticsOverview(stats.followers),\n    viewsPerPost: buildStatisticsOverview(stats.viewsPerPost),\n    sharesPerPost: buildStatisticsOverview(stats.sharesPerPost),\n    enabledNotifications: buildStatisticsPercentage(stats.enabledNotifications),\n    reactionsPerPost: buildStatisticsOverview(stats.reactionsPerPost),\n    viewsPerStory: buildStatisticsOverview(stats.viewsPerStory),\n    sharesPerStory: buildStatisticsOverview(stats.sharesPerStory),\n    reactionsPerStory: buildStatisticsOverview(stats.reactionsPerStory),\n\n    // Recent posts\n    recentPosts: stats.recentPostsInteractions.map(buildApiPostInteractionCounter).filter(Boolean),\n  };\n}\n\nexport function buildApiPostInteractionCounter(\n  interaction: GramJs.TypePostInteractionCounters,\n): StatisticsMessageInteractionCounter | StatisticsStoryInteractionCounter | undefined {\n  if (interaction instanceof GramJs.PostInteractionCountersMessage) {\n    return {\n      msgId: interaction.msgId,\n      forwardsCount: interaction.forwards,\n      viewsCount: interaction.views,\n      reactionsCount: interaction.reactions,\n    };\n  }\n\n  if (interaction instanceof GramJs.PostInteractionCountersStory) {\n    return {\n      storyId: interaction.storyId,\n      reactionsCount: interaction.reactions,\n      viewsCount: interaction.views,\n      forwardsCount: interaction.forwards,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildGroupStatistics(stats: GramJs.stats.MegagroupStats): ApiGroupStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    membersGraph: buildGraph(stats.membersGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    messagesGraph: (stats.messagesGraph as GramJs.StatsGraphAsync).token,\n    actionsGraph: (stats.actionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    period: getOverviewPeriod(stats.period),\n    members: buildStatisticsOverview(stats.members),\n    viewers: buildStatisticsOverview(stats.viewers),\n    messages: buildStatisticsOverview(stats.messages),\n    posters: buildStatisticsOverview(stats.posters),\n  };\n}\n\nexport function buildPostsStatistics(stats: GramJs.stats.MessageStats): ApiPostStatistics {\n  return {\n    viewsGraph: buildGraph(stats.viewsGraph),\n    reactionsGraph: buildGraph(stats.reactionsByEmotionGraph),\n  };\n}\n\nexport function buildMessagePublicForwards(\n  result: GramJs.messages.TypeMessages,\n): ApiMessagePublicForward[] | undefined {\n  if (!result || !('messages' in result)) {\n    return undefined;\n  }\n\n  return result.messages.map((message) => buildApiMessagePublicForward(message, result.chats));\n}\n\nexport function buildStoryPublicForwards(\n  result: GramJs.stats.PublicForwards,\n): Array<ApiStoryPublicForward | ApiMessagePublicForward> | undefined {\n  if (!result || !('forwards' in result)) {\n    return undefined;\n  }\n\n  return result.forwards.map((forward) => {\n    if (forward instanceof GramJs.PublicForwardMessage) {\n      return buildApiMessagePublicForward(forward.message, result.chats);\n    }\n\n    const { peer, story } = forward;\n    const peerId = getApiChatIdFromMtpPeer(peer);\n\n    return {\n      peerId,\n      storyId: story.id,\n      viewsCount: (story as GramJs.StoryItem).views?.viewsCount || 0,\n      reactionsCount: (story as GramJs.StoryItem).views?.reactionsCount || 0,\n    } as ApiStoryPublicForward;\n  });\n}\n\nexport function buildGraph(\n  result: GramJs.TypeStatsGraph, isPercentage?: boolean,\n): StatisticsGraph | undefined {\n  if ((result as GramJs.StatsGraphError).error) {\n    return undefined;\n  }\n\n  const data = JSON.parse((result as GramJs.StatsGraph).json.data);\n  const [x, ...y] = data.columns;\n  const hasSecondYAxis = data.y_scaled;\n\n  return {\n    type: isPercentage ? 'area' : data.types.y0,\n    zoomToken: (result as GramJs.StatsGraph).zoomToken,\n    labelFormatter: data.xTickFormatter,\n    tooltipFormatter: data.xTooltipFormatter,\n    labels: x.slice(1),\n    hideCaption: !data.subchart.show,\n    hasSecondYAxis,\n    isStacked: data.stacked && !hasSecondYAxis,\n    isPercentage,\n    datasets: y.map((item: any) => {\n      const key = item[0];\n\n      return {\n        name: data.names[key],\n        color: extractColor(data.colors[key]),\n        values: item.slice(1),\n      };\n    }),\n    ...calculateMinimapRange(data.subchart.defaultZoom, x.slice(1)),\n  };\n}\n\nfunction extractColor(color: string): string {\n  return color.substring(color.indexOf('#'));\n}\n\nfunction calculateMinimapRange(range: Array<number>, values: Array<number>) {\n  const [min, max] = range;\n\n  let minIndex = 0;\n  let maxIndex = values.length - 1;\n\n  values.forEach((item, index) => {\n    if (!minIndex && item >= min) {\n      minIndex = index;\n    }\n\n    if (!maxIndex && item >= max) {\n      maxIndex = index;\n    }\n  });\n\n  const begin = Math.max(0, minIndex / (values.length - 1));\n  const end = Math.min(1, maxIndex / (values.length - 1));\n\n  return { minimapRange: { begin, end }, labelFromIndex: minIndex, labelToIndex: maxIndex };\n}\n\nfunction buildStatisticsOverview({ current, previous }: GramJs.StatsAbsValueAndPrev): StatisticsOverviewItem {\n  const change = current - previous;\n\n  return {\n    current,\n    change,\n    ...(previous && { percentage: (change ? ((Math.abs(change) / previous) * 100) : 0).toFixed(2) }),\n  };\n}\n\nexport function buildStatisticsPercentage(data: GramJs.StatsPercentValue): StatisticsOverviewPercentage {\n  return {\n    part: data.part,\n    total: data.total,\n    percentage: ((data.part / data.total) * 100).toFixed(2),\n  };\n}\n\nfunction getOverviewPeriod(data: GramJs.StatsDateRangeDays): StatisticsOverviewPeriod {\n  return {\n    maxDate: data.maxDate,\n    minDate: data.minDate,\n  };\n}\n\nfunction buildApiMessagePublicForward(message: GramJs.TypeMessage, chats: GramJs.TypeChat[]): ApiMessagePublicForward {\n  const peerId = getApiChatIdFromMtpPeer(message.peerId!);\n  const channel = chats.find((c) => buildApiPeerId(c.id, 'channel') === peerId);\n\n  return {\n    messageId: message.id,\n    views: (message as GramJs.Message).views,\n    title: (channel as GramJs.Channel).title,\n    chat: {\n      id: peerId,\n      type: 'chatTypeChannel',\n      title: (channel as GramJs.Channel).title,\n      usernames: buildApiUsernames(channel as GramJs.Channel),\n      avatarHash: channel && 'photo' in channel\n        ? buildAvatarHash((channel as GramJs.Channel).photo)\n        : undefined,\n    },\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiMessagePublicForward, ApiPostStatistics, ApiStoryPublicForward, ApiUser, StatisticsGraph,\n} from '../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport {\n  buildChannelStatistics,\n  buildGraph,\n  buildGroupStatistics,\n  buildMessagePublicForwards,\n  buildPostsStatistics,\n  buildStoryPublicForwards,\n} from '../apiBuilders/statistics';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport { addEntitiesToLocalDb } from '../helpers';\nimport { invokeRequest } from './client';\n\nexport async function fetchChannelStatistics({\n  chat, dcId,\n}: { chat: ApiChat; dcId?: number }) {\n  const result = await invokeRequest(new GramJs.stats.GetBroadcastStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    stats: buildChannelStatistics(result),\n    users: [],\n  };\n}\n\nexport async function fetchGroupStatistics({\n  chat, dcId,\n}: { chat: ApiChat; dcId?: number }) {\n  const result = await invokeRequest(new GramJs.stats.GetMegagroupStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    stats: buildGroupStatistics(result),\n  };\n}\n\nexport async function fetchMessageStatistics({\n  chat,\n  messageId,\n  dcId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n}): Promise<ApiPostStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessageStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildPostsStatistics(result);\n}\n\nexport async function fetchMessagePublicForwards({\n  chat,\n  messageId,\n  dcId,\n  offset,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n  offset?: string;\n}): Promise<{\n    forwards?: ApiMessagePublicForward[];\n    count?: number;\n    nextOffset?: string;\n    chats: ApiChat[];\n    users: ApiUser[];\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessagePublicForwards({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n    offset,\n    limit: STATISTICS_PUBLIC_FORWARDS_LIMIT,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.chats);\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    forwards: buildMessagePublicForwards(result),\n    count: result.count,\n    nextOffset: result.nextOffset,\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function fetchStatisticsAsyncGraph({\n  token,\n  x,\n  isPercentage,\n  dcId,\n}: {\n  token: string;\n  x?: number;\n  isPercentage?: boolean;\n  dcId?: number;\n}): Promise<StatisticsGraph | undefined> {\n  const result = await invokeRequest(new GramJs.stats.LoadAsyncGraph({\n    token,\n    ...(x && { x: BigInt(x) }),\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildGraph(result as GramJs.StatsGraph, isPercentage);\n}\n\nexport async function fetchStoryStatistics({\n  chat,\n  storyId,\n  dcId,\n}: {\n  chat: ApiChat;\n  storyId: number;\n  dcId?: number;\n}): Promise<ApiPostStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetStoryStats({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: storyId,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildPostsStatistics(result);\n}\n\nexport async function fetchStoryPublicForwards({\n  chat,\n  storyId,\n  dcId,\n  offset,\n}: {\n  chat: ApiChat;\n  storyId: number;\n  dcId?: number;\n  offset?: string;\n}): Promise<{\n    publicForwards: (ApiMessagePublicForward | ApiStoryPublicForward)[] | undefined;\n    users: ApiUser[];\n    chats: ApiChat[];\n    count?: number;\n    nextOffset?: string;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetStoryPublicForwards({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: storyId,\n    offset,\n    limit: STATISTICS_PUBLIC_FORWARDS_LIMIT,\n  }), {\n    dcId,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.chats);\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    publicForwards: buildStoryPublicForwards(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n    count: result.count,\n    nextOffset: result.nextOffset,\n  };\n}\n","import type bigInt from 'big-integer';\nimport BigInt from 'big-integer';\nimport AuthKey from '../../../lib/gramjs/crypto/AuthKey';\nimport Logger from '../../../lib/gramjs/extensions/Logger';\nimport Helpers from '../../../lib/gramjs/Helpers';\nimport MTProtoState from '../../../lib/gramjs/network/MTProtoState';\n\ntype DhConfig = {\n  p: number[];\n  g: number;\n  random: number[];\n};\n\nlet currentPhoneCallState: PhoneCallState | undefined;\n\nclass PhoneCallState {\n  private state?: MTProtoState;\n\n  private seq = 0;\n\n  private gA?: bigInt.BigInteger;\n\n  private gB: any;\n\n  private p?: bigInt.BigInteger;\n\n  private random?: bigInt.BigInteger;\n\n  private waitForState: Promise<void>;\n\n  private resolveState?: VoidFunction;\n\n  constructor(\n    private isOutgoing: boolean,\n  ) {\n    this.waitForState = new Promise<void>((resolve) => {\n      this.resolveState = resolve;\n    });\n  }\n\n  async requestCall({ p, g, random }: DhConfig) {\n    const pBN = Helpers.readBigIntFromBuffer(Buffer.from(p), false);\n    const randomBN = Helpers.readBigIntFromBuffer(Buffer.from(random), false);\n\n    const gA = Helpers.modExp(BigInt(g), randomBN, pBN);\n\n    this.gA = gA;\n    this.p = pBN;\n    this.random = randomBN;\n\n    const gAHash: Buffer = await Helpers.sha256(Helpers.getByteArray(gA));\n    return Array.from(gAHash);\n  }\n\n  acceptCall({ p, g, random }: DhConfig) {\n    const pLast = Helpers.readBigIntFromBuffer(p, false);\n    const randomLast = Helpers.readBigIntFromBuffer(random, false);\n\n    const gB = Helpers.modExp(BigInt(g), randomLast, pLast);\n    this.gB = gB;\n    this.p = pLast;\n    this.random = randomLast;\n\n    return Array.from(Helpers.getByteArray(gB));\n  }\n\n  async confirmCall(gAOrB: number[], emojiData: Uint16Array, emojiOffsets: number[]) {\n    if (this.isOutgoing) {\n      this.gB = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    } else {\n      this.gA = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    }\n    const authKey = Helpers.modExp(\n      !this.isOutgoing ? this.gA : this.gB,\n      this.random,\n      this.p,\n    );\n    const fingerprint: Buffer = await Helpers.sha1(Helpers.getByteArray(authKey));\n    const keyFingerprint = Helpers.readBigIntFromBuffer(fingerprint.slice(-8).reverse(), false);\n\n    const emojis = await generateEmojiFingerprint(\n      Helpers.getByteArray(authKey),\n      Helpers.getByteArray(this.gA),\n      emojiData,\n      emojiOffsets,\n    );\n\n    const key = new AuthKey();\n    await key.setKey(Helpers.getByteArray(authKey));\n    this.state = new MTProtoState(key, new Logger(), true, this.isOutgoing);\n    this.resolveState!();\n\n    return { gA: Array.from(Helpers.getByteArray(this.gA)), keyFingerprint: keyFingerprint.toString(), emojis };\n  }\n\n  async encode(data: string) {\n    if (!this.state) return undefined;\n\n    const seqArray = new Uint32Array(1);\n    seqArray[0] = this.seq++;\n    const encodedData = await this.state.encryptMessageData(\n      Buffer.concat([Helpers.convertToLittle(seqArray), Buffer.from(data)]),\n    );\n    return Array.from(encodedData);\n  }\n\n  async decode(data: number[]): Promise<any> {\n    if (!this.state) {\n      return this.waitForState.then(() => {\n        return this.decode(data);\n      });\n    }\n\n    const message = await this.state.decryptMessageData(Buffer.from(data));\n\n    return JSON.parse(message.toString());\n  }\n}\n\n// https://github.com/TelegramV/App/blob/ead52320975362139cabad18cf8346f98c349a22/src/js/MTProto/Calls/Internal.js#L72\nfunction computeEmojiIndex(bytes: Uint8Array) {\n  return ((BigInt(bytes[0]).and(0x7F)).shiftLeft(56))\n    .or((BigInt(bytes[1]).shiftLeft(48)))\n    .or((BigInt(bytes[2]).shiftLeft(40)))\n    .or((BigInt(bytes[3]).shiftLeft(32)))\n    .or((BigInt(bytes[4]).shiftLeft(24)))\n    .or((BigInt(bytes[5]).shiftLeft(16)))\n    .or((BigInt(bytes[6]).shiftLeft(8)))\n    .or((BigInt(bytes[7])));\n}\n\nexport async function generateEmojiFingerprint(\n  authKey: Uint8Array, gA: Uint8Array, emojiData: Uint16Array, emojiOffsets: number[],\n) {\n  const hash = await Helpers.sha256(Buffer.concat([new Uint8Array(authKey), new Uint8Array(gA)]));\n  const result = [];\n  const emojiCount = emojiOffsets.length - 1;\n  const kPartSize = 8;\n  for (let partOffset = 0; partOffset !== hash.byteLength; partOffset += kPartSize) {\n    const value = computeEmojiIndex(hash.subarray(partOffset, partOffset + kPartSize));\n    const index = value.modPow(1, emojiCount).toJSNumber();\n    const offset = emojiOffsets[index];\n    const size = emojiOffsets[index + 1] - offset;\n    result.push(String.fromCharCode(...emojiData.subarray(offset, offset + size)));\n  }\n  return result.join('');\n}\n\nexport function createPhoneCallState(params: ConstructorParameters<typeof PhoneCallState>) {\n  currentPhoneCallState = new PhoneCallState(...params);\n}\n\nexport function destroyPhoneCallState() {\n  currentPhoneCallState = undefined;\n}\n\ntype FunctionPropertyOf<T> = {\n  [P in keyof T]: T[P] extends Function\n    ? P\n    : never\n}[keyof T];\n\ntype ParamsOf<T extends FunctionPropertyOf<PhoneCallState>> = Parameters<PhoneCallState[T]>;\ntype ReturnTypeOf<T extends FunctionPropertyOf<PhoneCallState>> = ReturnType<PhoneCallState[T]>;\n\nexport function encodePhoneCallData(params: ParamsOf<'encode'>): ReturnTypeOf<'encode'> {\n  return currentPhoneCallState!.encode(...params);\n}\n\nexport async function decodePhoneCallData(params: ParamsOf<'decode'>) {\n  if (!currentPhoneCallState) {\n    return undefined;\n  }\n  const result = await currentPhoneCallState.decode(...params);\n  return result;\n}\n\nexport function confirmPhoneCall(params: ParamsOf<'confirmCall'>): ReturnTypeOf<'confirmCall'> {\n  return currentPhoneCallState!.confirmCall(...params);\n}\n\nexport function acceptPhoneCall(params: ParamsOf<'acceptCall'>): ReturnTypeOf<'acceptCall'> {\n  return currentPhoneCallState!.acceptCall(...params);\n}\n\nexport function requestPhoneCall(params: ParamsOf<'requestCall'>): ReturnTypeOf<'requestCall'> {\n  return currentPhoneCallState!.requestCall(...params);\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiPeer, ApiRequestInputInvoice,\n  OnApiUpdate,\n} from '../../types';\n\nimport { buildCollectionByCallback } from '../../../util/iteratees';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport {\n  buildApiBoostsStatus,\n  buildApiCheckedGiftCode,\n  buildApiGiveawayInfo,\n  buildApiInvoiceFromForm,\n  buildApiMyBoost,\n  buildApiPaymentForm,\n  buildApiPremiumPromo,\n  buildApiReceipt,\n  buildShippingOptions,\n} from '../apiBuilders/payments';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildInputInvoice, buildInputPeer, buildShippingInfo } from '../gramjsBuilders';\nimport {\n  addEntitiesToLocalDb,\n  deserializeBytes,\n  serializeBytes,\n} from '../helpers';\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\nimport { getTemporaryPaymentPassword } from './twoFaSettings';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function validateRequestedInfo({\n  inputInvoice,\n  requestInfo,\n  shouldSave,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  requestInfo: GramJs.TypePaymentRequestedInfo;\n  shouldSave?: boolean;\n}): Promise<{\n    id: string;\n    shippingOptions: any;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.payments.ValidateRequestedInfo({\n    invoice: buildInputInvoice(inputInvoice),\n    save: shouldSave || undefined,\n    info: buildShippingInfo(requestInfo),\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return undefined;\n  }\n\n  return {\n    id,\n    shippingOptions: buildShippingOptions(shippingOptions),\n  };\n}\n\nexport async function sendPaymentForm({\n  inputInvoice,\n  formId,\n  requestedInfoId,\n  shippingOptionId,\n  credentials,\n  savedCredentialId,\n  temporaryPassword,\n  tipAmount,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  formId: string;\n  credentials: any;\n  requestedInfoId?: string;\n  shippingOptionId?: string;\n  savedCredentialId?: string;\n  temporaryPassword?: string;\n  tipAmount?: number;\n}) {\n  const inputCredentials = temporaryPassword && savedCredentialId\n    ? new GramJs.InputPaymentCredentialsSaved({\n      id: savedCredentialId,\n      tmpPassword: deserializeBytes(temporaryPassword),\n    })\n    : new GramJs.InputPaymentCredentials({\n      save: credentials.save,\n      data: new GramJs.DataJSON({ data: JSON.stringify(credentials.data) }),\n    });\n  const result = await invokeRequest(new GramJs.payments.SendPaymentForm({\n    formId: BigInt(formId),\n    invoice: buildInputInvoice(inputInvoice),\n    requestedInfoId,\n    shippingOptionId,\n    credentials: inputCredentials,\n    ...(tipAmount && { tipAmount: BigInt(tipAmount) }),\n  }));\n\n  if (result instanceof GramJs.payments.PaymentVerificationNeeded) {\n    onUpdate({\n      '@type': 'updatePaymentVerificationNeeded',\n      url: result.url,\n    });\n\n    return undefined;\n  }\n\n  return Boolean(result);\n}\n\nexport async function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentForm({\n    invoice: buildInputInvoice(inputInvoice),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result.photo) {\n    localDb.webDocuments[result.photo.url] = result.photo;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    form: buildApiPaymentForm(result),\n    invoice: buildApiInvoiceFromForm(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    botId: result.botId.toString(),\n  };\n}\n\nexport async function getReceipt(chat: ApiChat, msgId: number) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentReceipt({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  return {\n    receipt: buildApiReceipt(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function fetchPremiumPromo() {\n  const result = await invokeRequest(new GramJs.help.GetPremiumPromo());\n  if (!result) return undefined;\n\n  addEntitiesToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  result.videos.forEach((video) => {\n    if (video instanceof GramJs.Document) {\n      localDb.documents[video.id.toString()] = video;\n    }\n  });\n\n  return {\n    promo: buildApiPremiumPromo(result),\n    users,\n  };\n}\n\nexport async function fetchTemporaryPaymentPassword(password: string) {\n  const result = await getTemporaryPaymentPassword(password);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('error' in result) {\n    return result;\n  }\n\n  return {\n    value: serializeBytes(result.tmpPassword),\n    validUntil: result.validUntil,\n  };\n}\n\nexport async function fetchMyBoosts() {\n  const result = await invokeRequest(new GramJs.premium.GetMyBoosts());\n\n  if (!result) return undefined;\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const boosts = result.myBoosts.map(buildApiMyBoost);\n\n  return {\n    users,\n    chats,\n    boosts,\n  };\n}\n\nexport async function applyBoost({\n  chat,\n  slots,\n} : {\n  chat: ApiChat;\n  slots: number[];\n}) {\n  const result = await invokeRequest(new GramJs.premium.ApplyBoost({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    slots,\n  }));\n\n  if (!result) return undefined;\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const boosts = result.myBoosts.map(buildApiMyBoost);\n\n  return {\n    users,\n    chats,\n    boosts,\n  };\n}\n\nexport async function fetchBoostsStatus({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.premium.GetBoostsStatus({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiBoostsStatus(result);\n}\n\nexport async function fetchBoostsList({\n  chat,\n  offset = '',\n  limit,\n}: {\n  chat: ApiChat;\n  offset?: string;\n  limit?: number;\n}) {\n  const result = await invokeRequest(new GramJs.premium.GetBoostsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    offset,\n    limit,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  const userBoosts = result.boosts.filter((boost) => boost.userId);\n  const boosterIds = userBoosts.map((boost) => boost.userId!.toString());\n  const boosters = buildCollectionByCallback(userBoosts, (boost) => (\n    [boost.userId!.toString(), boost.expires]\n  ));\n\n  return {\n    count: result.count,\n    users,\n    boosters,\n    boosterIds,\n    nextOffset: result.nextOffset,\n  };\n}\n\nexport async function fetchGiveawayInfo({\n  peer,\n  messageId,\n}: {\n  peer: ApiPeer;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.payments.GetGiveawayInfo({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    msgId: messageId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiGiveawayInfo(result);\n}\n\nexport async function checkGiftCode({\n  slug,\n}: {\n  slug: string;\n}) {\n  const result = await invokeRequest(new GramJs.payments.CheckGiftCode({\n    slug,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n\n  return {\n    code: buildApiCheckedGiftCode(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n  };\n}\n\nexport function applyGiftCode({\n  slug,\n}: {\n  slug: string;\n}) {\n  return invokeRequest(new GramJs.payments.ApplyGiftCode({\n    slug,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import type {\n  ApiInitialArgs,\n  ApiOnProgress,\n  ApiUpdate,\n  OnApiUpdate,\n} from '../../types';\nimport type { LocalDb } from '../localDb';\nimport type { MethodArgs, MethodResponse, Methods } from './types';\n\nimport { API_THROTTLE_RESET_UPDATES, API_UPDATE_THROTTLE } from '../../../config';\nimport { throttle, throttleWithTickEnd } from '../../../util/schedulers';\nimport { updateFullLocalDb } from '../localDb';\nimport { init as initUpdater } from '../updates/updater';\nimport { init as initAuth } from './auth';\nimport { init as initBots } from './bots';\nimport { init as initCalls } from './calls';\nimport { init as initChats } from './chats';\nimport { init as initClient } from './client';\nimport * as methods from './index';\nimport { init as initManagement } from './management';\nimport { init as initMessages } from './messages';\nimport { init as initPayments } from './payments';\nimport { init as initStickers } from './symbols';\nimport { init as initTwoFaSettings } from './twoFaSettings';\nimport { init as initUsers } from './users';\n\nlet onUpdate: OnApiUpdate;\n\nexport function initApi(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs, initialLocalDb?: LocalDb) {\n  onUpdate = _onUpdate;\n\n  initUpdater(handleUpdate);\n  initAuth(handleUpdate);\n  initChats(handleUpdate);\n  initMessages(handleUpdate);\n  initUsers(handleUpdate);\n  initStickers(handleUpdate);\n  initManagement(handleUpdate);\n  initTwoFaSettings(handleUpdate);\n  initBots(handleUpdate);\n  initCalls(handleUpdate);\n  initPayments(handleUpdate);\n\n  if (initialLocalDb) updateFullLocalDb(initialLocalDb);\n\n  initClient(handleUpdate, initialArgs);\n}\n\nexport function callApi<T extends keyof Methods>(fnName: T, ...args: MethodArgs<T>): MethodResponse<T> {\n  // @ts-ignore\n  return methods[fnName](...args) as MethodResponse<T>;\n}\n\nexport function cancelApiProgress(progressCallback: ApiOnProgress) {\n  progressCallback.isCanceled = true;\n}\n\nconst flushUpdatesOnTickEnd = throttleWithTickEnd(flushUpdates);\n\nlet flushUpdatesThrottled: typeof flushUpdatesOnTickEnd | undefined;\nlet currentThrottleId: number | undefined;\n\nlet pendingUpdates: ApiUpdate[] | undefined;\n\nfunction handleUpdate(update: ApiUpdate) {\n  if (!pendingUpdates) {\n    pendingUpdates = [update];\n  } else {\n    pendingUpdates.push(update);\n  }\n\n  if (!flushUpdatesThrottled || API_THROTTLE_RESET_UPDATES.has(update['@type'])) {\n    flushUpdatesThrottled = throttle(flushUpdatesOnTickEnd, API_UPDATE_THROTTLE, true);\n    currentThrottleId = Math.random();\n  }\n\n  flushUpdatesThrottled(currentThrottleId!);\n}\n\nfunction flushUpdates(throttleId: number) {\n  if (!pendingUpdates || throttleId !== currentThrottleId) {\n    return;\n  }\n\n  const currentUpdates = pendingUpdates!;\n  pendingUpdates = undefined;\n  currentUpdates.forEach(onUpdate);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiInputPrivacyRules } from '../../../types';\nimport type {\n  ApiChat,\n  ApiPeer,\n  ApiPeerStories,\n  ApiReaction,\n  ApiReportReason,\n  ApiStealthMode,\n  ApiTypeStory,\n  ApiUser,\n} from '../../types';\n\nimport { STORY_LIST_LIMIT } from '../../../config';\nimport { buildCollectionByCallback } from '../../../util/iteratees';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport {\n  buildApiPeerStories,\n  buildApiStealthMode,\n  buildApiStory,\n  buildApiStoryView,\n  buildApiStoryViews,\n} from '../apiBuilders/stories';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildInputPeer,\n  buildInputPrivacyRules,\n  buildInputReaction,\n  buildInputReportReason,\n} from '../gramjsBuilders';\nimport { addEntitiesToLocalDb, addStoryToLocalDb } from '../helpers';\nimport { invokeRequest } from './client';\n\nexport async function fetchAllStories({\n  stateHash,\n  isFirstRequest = false,\n  isHidden = false,\n}: {\n  isFirstRequest?: boolean;\n  stateHash?: string;\n  isHidden?: boolean;\n}): Promise<\n  undefined\n  | { state: string; stealthMode: ApiStealthMode }\n  | {\n    users: ApiUser[];\n    chats: ApiChat[];\n    peerStories: Record<string, ApiPeerStories>;\n    hasMore?: true;\n    state: string;\n    stealthMode: ApiStealthMode;\n  }> {\n  const params: ConstructorParameters<typeof GramJs.stories.GetAllStories>[0] = isFirstRequest\n    ? (isHidden ? { hidden: true } : {})\n    : { state: stateHash, next: true, ...(isHidden && { hidden: true }) };\n  const result = await invokeRequest(new GramJs.stories.GetAllStories(params));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result instanceof GramJs.stories.AllStoriesNotModified) {\n    return {\n      state: result.state,\n      stealthMode: buildApiStealthMode(result.stealthMode),\n    };\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n  result.peerStories.forEach((peerStories) => (\n    peerStories.stories.forEach((story) => addStoryToLocalDb(story, getApiChatIdFromMtpPeer(peerStories.peer)))\n  ));\n\n  const allUserStories = result.peerStories.reduce<Record<string, ApiPeerStories>>((acc, peerStories) => {\n    const peerId = getApiChatIdFromMtpPeer(peerStories.peer);\n    const stories = buildApiPeerStories(peerStories);\n    const { pinnedIds, orderedIds, lastUpdatedAt } = Object.values(stories).reduce<\n    {\n      pinnedIds: number[];\n      orderedIds: number[];\n      lastUpdatedAt?: number;\n    }\n    >((dataAcc, story) => {\n      if ('isPinned' in story && story.isPinned) {\n        dataAcc.pinnedIds.push(story.id);\n      }\n      if (!('isDeleted' in story)) {\n        dataAcc.orderedIds.push(story.id);\n        dataAcc.lastUpdatedAt = Math.max(story.date, dataAcc.lastUpdatedAt || 0);\n      }\n\n      return dataAcc;\n    }, {\n      pinnedIds: [],\n      orderedIds: [],\n      lastUpdatedAt: undefined,\n    });\n\n    if (orderedIds.length === 0) {\n      return acc;\n    }\n\n    acc[peerId] = {\n      byId: stories,\n      orderedIds,\n      pinnedIds,\n      lastUpdatedAt,\n      lastReadId: peerStories.maxReadId,\n    };\n\n    return acc;\n  }, {});\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean),\n    peerStories: allUserStories,\n    hasMore: result.hasMore,\n    state: result.state,\n    stealthMode: buildApiStealthMode(result.stealthMode),\n  };\n}\n\nexport async function fetchPeerStories({\n  peer,\n}: {\n  peer: ApiPeer;\n}) {\n  const result = await invokeRequest(new GramJs.stories.GetPeerStories({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  result.stories.stories.forEach((story) => addStoryToLocalDb(story, peer.id));\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const stories = buildCollectionByCallback(result.stories.stories, (story) => (\n    [story.id, buildApiStory(peer.id, story)]\n  ));\n\n  return {\n    chats,\n    users,\n    stories,\n    lastReadStoryId: result.stories.maxReadId,\n  };\n}\n\nexport function fetchPeerPinnedStories({\n  peer, offsetId,\n}: {\n  peer: ApiPeer;\n  offsetId?: number;\n}) {\n  return fetchCommonStoriesRequest({\n    method: new GramJs.stories.GetPinnedStories({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      offsetId,\n      limit: STORY_LIST_LIMIT,\n    }),\n    peerId: peer.id,\n  });\n}\n\nexport function fetchStoriesArchive({\n  peer,\n  offsetId,\n}: {\n  peer: ApiPeer;\n  offsetId?: number;\n}) {\n  return fetchCommonStoriesRequest({\n    method: new GramJs.stories.GetStoriesArchive({\n      peer: peer && buildInputPeer(peer.id, peer.accessHash),\n      offsetId,\n      limit: STORY_LIST_LIMIT,\n    }),\n    peerId: peer.id,\n  });\n}\n\nexport async function fetchPeerStoriesByIds({ peer, ids }: { peer: ApiPeer; ids: number[] }) {\n  const result = await invokeRequest(new GramJs.stories.GetStoriesByID({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: ids,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n  result.stories.forEach((story) => addStoryToLocalDb(story, peer.id));\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const stories = ids.reduce<Record<string, ApiTypeStory>>((acc, id) => {\n    const story = result.stories.find(({ id: currentId }) => currentId === id);\n    if (story) {\n      acc[id] = buildApiStory(peer.id, story);\n    } else {\n      acc[id] = {\n        id,\n        peerId: peer.id,\n        isDeleted: true,\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return {\n    chats,\n    users,\n    stories,\n  };\n}\n\nexport function viewStory({ peer, storyId }: { peer: ApiPeer; storyId: number }) {\n  return invokeRequest(new GramJs.stories.IncrementStoryViews({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n  }));\n}\n\nexport function markStoryRead({ peer, storyId }: { peer: ApiPeer; storyId: number }) {\n  return invokeRequest(new GramJs.stories.ReadStories({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    maxId: storyId,\n  }));\n}\n\nexport function deleteStory({ peer, storyId }: { peer: ApiPeer; storyId: number }) {\n  return invokeRequest(new GramJs.stories.DeleteStories({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n  }));\n}\n\nexport function toggleStoryPinned({ peer, storyId, isPinned }: { peer: ApiPeer; storyId: number; isPinned?: boolean }) {\n  return invokeRequest(new GramJs.stories.TogglePinned({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n    pinned: isPinned,\n  }));\n}\n\nexport async function fetchStoryViewList({\n  peer,\n  storyId,\n  areJustContacts,\n  query,\n  areReactionsFirst,\n  limit = STORY_LIST_LIMIT,\n  offset = '',\n}: {\n  peer: ApiPeer;\n  storyId: number;\n  areJustContacts?: true;\n  areReactionsFirst?: true;\n  query?: string;\n  limit?: number;\n  offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.stories.GetStoryViewsList({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyId,\n    justContacts: areJustContacts,\n    q: query,\n    reactionsFirst: areReactionsFirst,\n    limit,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const views = result.views.map(buildApiStoryView).filter(Boolean);\n\n  return {\n    users,\n    chats,\n    views,\n    nextOffset: result.nextOffset,\n    reactionsCount: result.reactionsCount,\n    viewsCount: result.count,\n  };\n}\n\nexport async function fetchStoriesViews({\n  peer,\n  storyIds,\n}: {\n  peer: ApiPeer;\n  storyIds: number[];\n}) {\n  const result = await invokeRequest(new GramJs.stories.GetStoriesViews({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyIds,\n  }));\n\n  if (!result?.views[0]) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n\n  const views = buildApiStoryViews(result.views[0]);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  return {\n    views,\n    users,\n  };\n}\n\nexport async function fetchStoryLink({ peer, storyId }: { peer: ApiPeer ; storyId: number }) {\n  const result = await invokeRequest(new GramJs.stories.ExportStoryLink({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: storyId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport function reportStory({\n  peer,\n  storyId,\n  reason,\n  description,\n}: {\n  peer: ApiPeer; storyId: number; reason: ApiReportReason; description?: string;\n}) {\n  return invokeRequest(new GramJs.stories.Report({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: [storyId],\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n}\n\nexport function editStoryPrivacy({\n  peer,\n  id,\n  privacy,\n}: {\n  peer: ApiPeer;\n  id: number;\n  privacy: ApiInputPrivacyRules;\n}) {\n  return invokeRequest(new GramJs.stories.EditStory({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id,\n    privacyRules: buildInputPrivacyRules(privacy),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function toggleStoriesHidden({\n  peer,\n  isHidden,\n}: {\n  peer: ApiPeer;\n  isHidden: boolean;\n}) {\n  return invokeRequest(new GramJs.stories.TogglePeerStoriesHidden({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    hidden: isHidden,\n  }));\n}\n\nexport function fetchStoriesMaxIds({\n  peers,\n}: {\n  peers: ApiPeer[];\n}) {\n  return invokeRequest(new GramJs.stories.GetPeerMaxIDs({\n    id: peers.map((peer) => buildInputPeer(peer.id, peer.accessHash)),\n  }), { shouldIgnoreErrors: true });\n}\n\nasync function fetchCommonStoriesRequest({ method, peerId }: {\n  method: GramJs.stories.GetPinnedStories | GramJs.stories.GetStoriesArchive;\n  peerId: string;\n}) {\n  const result = await invokeRequest(method);\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesToLocalDb(result.users);\n  addEntitiesToLocalDb(result.chats);\n  result.stories.forEach((story) => addStoryToLocalDb(story, peerId));\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const stories = buildCollectionByCallback(result.stories, (story) => (\n    [story.id, buildApiStory(peerId, story)]\n  ));\n\n  return {\n    users,\n    chats,\n    stories,\n  };\n}\n\nexport function sendStoryReaction({\n  peer, storyId, reaction, shouldAddToRecent,\n}: {\n  peer: ApiPeer;\n  storyId: number;\n  reaction?: ApiReaction;\n  shouldAddToRecent?: boolean;\n}) {\n  return invokeRequest(new GramJs.stories.SendReaction({\n    reaction: reaction ? buildInputReaction(reaction) : new GramJs.ReactionEmpty(),\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    storyId,\n    ...(shouldAddToRecent && { addToRecent: true }),\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n\nexport function activateStealthMode({\n  isForPast,\n  isForFuture,\n}: {\n  isForPast?: true;\n  isForFuture?: true;\n}) {\n  return invokeRequest(new GramJs.stories.ActivateStealthMode({\n    past: isForPast,\n    future: isForFuture,\n  }), {\n    shouldReturnTrue: true,\n  });\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiPremiumSection } from '../../../global/types';\nimport type {\n  ApiBoostsStatus,\n  ApiCheckedGiftCode,\n  ApiGiveawayInfo,\n  ApiInvoice, ApiLabeledPrice, ApiMyBoost, ApiPaymentCredentials,\n  ApiPaymentForm, ApiPaymentSavedInfo, ApiPremiumPromo, ApiPremiumSubscriptionOption,\n  ApiReceipt,\n} from '../../types';\n\nimport { buildApiMessageEntity } from './common';\nimport { omitVirtualClassFields } from './helpers';\nimport { buildApiDocument, buildApiWebDocument } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildStatisticsPercentage } from './statistics';\n\nexport function buildShippingOptions(shippingOptions: GramJs.ShippingOption[] | undefined) {\n  if (!shippingOptions) {\n    return undefined;\n  }\n\n  return Object.values(shippingOptions).map((option) => {\n    return {\n      id: option.id,\n      title: option.title,\n      amount: option.prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0),\n      prices: option.prices.map(({ label, amount }) => {\n        return {\n          label,\n          amount: amount.toJSNumber(),\n        };\n      }),\n    };\n  });\n}\n\nexport function buildApiReceipt(receipt: GramJs.payments.PaymentReceipt): ApiReceipt {\n  const {\n    invoice,\n    info,\n    shipping,\n    currency,\n    totalAmount,\n    credentialsTitle,\n    tipAmount,\n  } = receipt;\n\n  const { shippingAddress, phone, name } = (info || {});\n\n  const { prices } = invoice;\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n\n  let shippingPrices: ApiLabeledPrice[] | undefined;\n  let shippingMethod: string | undefined;\n\n  if (shipping) {\n    shippingPrices = shipping.prices.map(({ label, amount }) => {\n      return {\n        label,\n        amount: amount.toJSNumber(),\n      };\n    });\n    shippingMethod = shipping.title;\n  }\n\n  return {\n    currency,\n    prices: mappedPrices,\n    info: { shippingAddress, phone, name },\n    totalAmount: totalAmount.toJSNumber(),\n    credentialsTitle,\n    shippingPrices,\n    shippingMethod,\n    tipAmount: tipAmount ? tipAmount.toJSNumber() : 0,\n  };\n}\n\nexport function buildApiPaymentForm(form: GramJs.payments.PaymentForm): ApiPaymentForm {\n  const {\n    formId,\n    canSaveCredentials,\n    passwordMissing: isPasswordMissing,\n    providerId,\n    nativeProvider,\n    nativeParams,\n    savedInfo,\n    invoice,\n    savedCredentials,\n    url,\n  } = form;\n\n  const {\n    test: isTest,\n    nameRequested: isNameRequested,\n    phoneRequested: isPhoneRequested,\n    emailRequested: isEmailRequested,\n    shippingAddressRequested: isShippingAddressRequested,\n    flexible: isFlexible,\n    phoneToProvider: shouldSendPhoneToProvider,\n    emailToProvider: shouldSendEmailToProvider,\n    currency,\n    prices,\n  } = invoice;\n\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n  const { shippingAddress } = savedInfo || {};\n  const cleanedInfo: ApiPaymentSavedInfo | undefined = savedInfo ? omitVirtualClassFields(savedInfo) : undefined;\n  if (cleanedInfo && shippingAddress) {\n    cleanedInfo.shippingAddress = omitVirtualClassFields(shippingAddress);\n  }\n\n  const nativeData = nativeParams ? JSON.parse(nativeParams.data) : {};\n\n  return {\n    url,\n    canSaveCredentials,\n    isPasswordMissing,\n    formId: String(formId),\n    providerId: String(providerId),\n    nativeProvider,\n    savedInfo: cleanedInfo,\n    invoiceContainer: {\n      isTest,\n      isNameRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      isShippingAddressRequested,\n      isFlexible,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices: mappedPrices,\n    },\n    nativeParams: {\n      needCardholderName: Boolean(nativeData?.need_cardholder_name),\n      needCountry: Boolean(nativeData?.need_country),\n      needZip: Boolean(nativeData?.need_zip),\n      publishableKey: nativeData?.publishable_key,\n      publicToken: nativeData?.public_token,\n    },\n    ...(savedCredentials && { savedCredentials: buildApiPaymentCredentials(savedCredentials) }),\n  };\n}\n\nexport function buildApiInvoiceFromForm(form: GramJs.payments.PaymentForm): ApiInvoice {\n  const {\n    invoice, description: text, title, photo,\n  } = form;\n  const {\n    test, currency, prices, recurring, termsUrl, maxTipAmount, suggestedTipAmounts,\n  } = invoice;\n\n  const totalAmount = prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0);\n\n  return {\n    text,\n    title,\n    photo: buildApiWebDocument(photo),\n    amount: totalAmount,\n    currency,\n    isTest: test,\n    isRecurring: recurring,\n    termsUrl,\n    maxTipAmount: maxTipAmount?.toJSNumber(),\n    ...(suggestedTipAmounts && { suggestedTipAmounts: suggestedTipAmounts.map((tip) => tip.toJSNumber()) }),\n  };\n}\n\nexport function buildApiPremiumPromo(promo: GramJs.help.PremiumPromo): ApiPremiumPromo {\n  const {\n    statusText, statusEntities, videos, videoSections, periodOptions,\n  } = promo;\n\n  return {\n    statusText,\n    statusEntities: statusEntities.map(buildApiMessageEntity),\n    videoSections: videoSections as ApiPremiumSection[],\n    videos: videos.map(buildApiDocument).filter(Boolean),\n    options: periodOptions.map(buildApiPremiumSubscriptionOption),\n  };\n}\n\nfunction buildApiPremiumSubscriptionOption(option: GramJs.PremiumSubscriptionOption): ApiPremiumSubscriptionOption {\n  const {\n    current, canPurchaseUpgrade, currency, amount, botUrl, months,\n  } = option;\n\n  return {\n    isCurrent: current,\n    canPurchaseUpgrade,\n    currency,\n    amount: amount.toJSNumber(),\n    botUrl,\n    months,\n  };\n}\n\nexport function buildApiPaymentCredentials(credentials: GramJs.PaymentSavedCredentialsCard[]): ApiPaymentCredentials[] {\n  return credentials.map(({ id, title }) => ({ id, title }));\n}\n\nexport function buildApiBoostsStatus(boostStatus: GramJs.premium.BoostsStatus): ApiBoostsStatus {\n  const {\n    level, boostUrl, boosts, myBoost, currentLevelBoosts, nextLevelBoosts, premiumAudience,\n  } = boostStatus;\n  return {\n    level,\n    currentLevelBoosts,\n    boosts,\n    hasMyBoost: Boolean(myBoost),\n    boostUrl,\n    nextLevelBoosts,\n    ...(premiumAudience && { premiumSubscribers: buildStatisticsPercentage(premiumAudience) }),\n  };\n}\n\nexport function buildApiMyBoost(myBoost: GramJs.MyBoost): ApiMyBoost {\n  const {\n    date, expires, slot, cooldownUntilDate, peer,\n  } = myBoost;\n\n  return {\n    date,\n    expires,\n    slot,\n    cooldownUntil: cooldownUntilDate,\n    chatId: peer && getApiChatIdFromMtpPeer(peer),\n  };\n}\n\nexport function buildApiGiveawayInfo(info: GramJs.payments.TypeGiveawayInfo): ApiGiveawayInfo | undefined {\n  if (info instanceof GramJs.payments.GiveawayInfo) {\n    const {\n      startDate,\n      adminDisallowedChatId,\n      disallowedCountry,\n      joinedTooEarlyDate,\n      participating,\n      preparingResults,\n    } = info;\n\n    return {\n      type: 'active',\n      startDate,\n      isParticipating: participating,\n      adminDisallowedChatId: adminDisallowedChatId && buildApiPeerId(adminDisallowedChatId, 'channel'),\n      disallowedCountry,\n      joinedTooEarlyDate,\n      isPreparingResults: preparingResults,\n    };\n  } else {\n    const {\n      activatedCount,\n      finishDate,\n      giftCodeSlug,\n      winner,\n      refunded,\n      startDate,\n      winnersCount,\n    } = info;\n\n    return {\n      type: 'results',\n      startDate,\n      activatedCount,\n      finishDate,\n      winnersCount,\n      giftCodeSlug,\n      isRefunded: refunded,\n      isWinner: winner,\n    };\n  }\n}\n\nexport function buildApiCheckedGiftCode(giftcode: GramJs.payments.TypeCheckedGiftCode): ApiCheckedGiftCode {\n  const {\n    date, fromId, months, giveawayMsgId, toId, usedDate, viaGiveaway,\n  } = giftcode;\n\n  return {\n    date,\n    months,\n    toId: toId && buildApiPeerId(toId, 'user'),\n    fromId: fromId && getApiChatIdFromMtpPeer(fromId),\n    usedAt: usedDate,\n    isFromGiveaway: viaGiveaway,\n    giveawayMessageId: giveawayMsgId,\n  };\n}\n","/* eslint-disable no-console */\n\nimport type { DebugLevel } from '../../../util/debugConsole';\nimport type { ApiOnProgress, ApiUpdate } from '../../types';\nimport type { OriginMessageEvent, WorkerMessageData } from './types';\n\nimport { DEBUG } from '../../../config';\nimport { DEBUG_LEVELS } from '../../../util/debugConsole';\nimport { throttleWithTickEnd } from '../../../util/schedulers';\nimport { log } from '../helpers';\nimport { callApi, cancelApiProgress, initApi } from '../methods/init';\n\ndeclare const self: WorkerGlobalScope;\n\nconst ORIGINAL_FUNCTIONS = DEBUG_LEVELS.reduce((acc, level) => {\n  acc[level] = console[level];\n  return acc;\n}, {} as Record<DebugLevel, (...args: any[]) => void>);\n\nfunction enableDebugLog() {\n  DEBUG_LEVELS.forEach((level) => {\n    console[level] = (...args: any[]) => {\n      postMessage({\n        type: 'debugLog',\n        level,\n        args: JSON.parse(JSON.stringify(args, (key, value) => (typeof value === 'bigint'\n          ? value.toString()\n          : value))),\n      });\n    };\n  });\n}\n\nfunction disableDebugLog() {\n  DEBUG_LEVELS.forEach((level) => {\n    console[level] = ORIGINAL_FUNCTIONS[level];\n  });\n}\n\nhandleErrors();\n\nconst callbackState = new Map<string, ApiOnProgress>();\n\nif (DEBUG) {\n  console.log('>>> FINISH LOAD WORKER');\n}\n\nonmessage = async (message: OriginMessageEvent) => {\n  const { data } = message;\n\n  switch (data.type) {\n    case 'initApi': {\n      const { messageId, args } = data;\n      await initApi(onUpdate, args[0], args[1]);\n      if (messageId) {\n        sendToOrigin({\n          type: 'methodResponse',\n          messageId,\n          response: true,\n        });\n      }\n      break;\n    }\n    case 'callMethod': {\n      const {\n        messageId, name, args, withCallback,\n      } = data;\n      try {\n        if (messageId && withCallback) {\n          const callback = (...callbackArgs: any[]) => {\n            const lastArg = callbackArgs[callbackArgs.length - 1];\n\n            sendToOrigin({\n              type: 'methodCallback',\n              messageId,\n              callbackArgs,\n            }, lastArg instanceof ArrayBuffer ? lastArg : undefined);\n          };\n\n          callbackState.set(messageId, callback);\n\n          args.push(callback as never);\n        }\n\n        const response = await callApi(name, ...args);\n\n        if (DEBUG && typeof response === 'object' && 'CONSTRUCTOR_ID' in response) {\n          log('UNEXPECTED RESPONSE', `${name}: ${response.className}`);\n        }\n\n        const { arrayBuffer } = (typeof response === 'object' && 'arrayBuffer' in response && response) || {};\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            response,\n          }, arrayBuffer);\n        }\n      } catch (error: any) {\n        if (DEBUG) {\n          console.error(error);\n        }\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            error: { message: error.message },\n          });\n        }\n      }\n\n      if (messageId) {\n        callbackState.delete(messageId);\n      }\n\n      break;\n    }\n    case 'cancelProgress': {\n      const callback = callbackState.get(data.messageId);\n      if (callback) {\n        cancelApiProgress(callback);\n      }\n\n      break;\n    }\n    case 'ping': {\n      sendToOrigin({\n        type: 'methodResponse',\n        messageId: data.messageId!,\n      });\n\n      break;\n    }\n    case 'toggleDebugMode': {\n      if (data.isEnabled) {\n        enableDebugLog();\n      } else {\n        disableDebugLog();\n      }\n    }\n  }\n};\n\nfunction handleErrors() {\n  self.onerror = (e) => {\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.error.message || 'Uncaught exception in worker' } });\n  };\n\n  self.addEventListener('unhandledrejection', (e) => {\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.reason.message || 'Uncaught rejection in worker' } });\n  });\n}\n\nlet pendingUpdates: ApiUpdate[] = [];\n\nconst sendUpdatesOnTickEnd = throttleWithTickEnd(() => {\n  const currentUpdates = pendingUpdates;\n  pendingUpdates = [];\n\n  sendToOrigin({\n    type: 'updates',\n    updates: currentUpdates,\n  });\n});\n\nfunction onUpdate(update: ApiUpdate) {\n  if (DEBUG && update['@type'] !== 'updateUserStatus' && update['@type'] !== 'updateServerTimeOffset') {\n    log('UPDATE', update['@type'], update);\n  }\n\n  pendingUpdates.push(update);\n  sendUpdatesOnTickEnd();\n}\n\nfunction sendToOrigin(data: WorkerMessageData, arrayBuffer?: ArrayBuffer) {\n  if (arrayBuffer) {\n    postMessage(data, [arrayBuffer]);\n  } else {\n    postMessage(data);\n  }\n}\n","import type { ThreadId } from '../../types';\nimport type { ApiWebDocument } from './bots';\nimport type { ApiGroupCall, PhoneCallAction } from './calls';\nimport type { ApiChat } from './chats';\nimport type { ApiMessageStoryData, ApiWebPageStoryData } from './stories';\n\nexport interface ApiDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface ApiPhotoSize extends ApiDimensions {\n  type: 's' | 'm' | 'x' | 'y' | 'z';\n}\n\nexport interface ApiVideoSize extends ApiDimensions {\n  type: 'u' | 'v';\n  videoStartTs: number;\n  size: number;\n}\n\nexport interface ApiThumbnail extends ApiDimensions {\n  dataUri: string;\n}\n\nexport interface ApiPhoto {\n  id: string;\n  thumbnail?: ApiThumbnail;\n  isVideo?: boolean;\n  sizes: ApiPhotoSize[];\n  videoSizes?: ApiVideoSize[];\n  blobUrl?: string;\n  isSpoiler?: boolean;\n}\n\nexport interface ApiSticker {\n  id: string;\n  stickerSetInfo: ApiStickerSetInfo;\n  emoji?: string;\n  isCustomEmoji?: boolean;\n  isLottie: boolean;\n  isVideo: boolean;\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  isPreloadedGlobally?: boolean;\n  hasEffect?: boolean;\n  isFree?: boolean;\n  shouldUseTextColor?: boolean;\n}\n\nexport interface ApiStickerSet {\n  isArchived?: true;\n  isLottie?: true;\n  isVideos?: true;\n  isEmoji?: true;\n  installedDate?: number;\n  id: string;\n  accessHash: string;\n  title: string;\n  hasThumbnail?: boolean;\n  thumbCustomEmojiId?: string;\n  count: number;\n  stickers?: ApiSticker[];\n  packs?: Record<string, ApiSticker[]>;\n  covers?: ApiSticker[];\n  shortName: string;\n}\n\ntype ApiStickerSetInfoShortName = {\n  shortName: string;\n};\n\ntype ApiStickerSetInfoId = {\n  id: string;\n  accessHash: string;\n};\n\ntype ApiStickerSetInfoMissing = {\n  isMissing: true;\n};\n\nexport type ApiStickerSetInfo = ApiStickerSetInfoShortName | ApiStickerSetInfoId | ApiStickerSetInfoMissing;\n\nexport interface ApiVideo {\n  id: string;\n  mimeType: string;\n  duration: number;\n  fileName: string;\n  width?: number;\n  height?: number;\n  supportsStreaming?: boolean;\n  isRound?: boolean;\n  isGif?: boolean;\n  isSpoiler?: boolean;\n  thumbnail?: ApiThumbnail;\n  blobUrl?: string;\n  previewBlobUrl?: string;\n  size: number;\n  noSound?: boolean;\n}\n\nexport interface ApiAudio {\n  id: string;\n  size: number;\n  mimeType: string;\n  fileName: string;\n  duration: number;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: ApiPhotoSize[];\n}\n\nexport interface ApiVoice {\n  id: string;\n  duration: number;\n  waveform?: number[];\n}\n\nexport interface ApiDocument {\n  id?: string;\n  fileName: string;\n  size: number;\n  timestamp?: number;\n  mimeType: string;\n  thumbnail?: ApiThumbnail;\n  previewBlobUrl?: string;\n  mediaType?: 'photo' | 'video';\n  mediaSize?: ApiDimensions;\n}\n\nexport interface ApiContact {\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  userId: string;\n}\n\nexport interface ApiPollAnswer {\n  text: string;\n  option: string;\n}\n\nexport interface ApiPollResult {\n  isChosen?: true;\n  isCorrect?: true;\n  option: string;\n  votersCount: number;\n}\n\nexport interface ApiPoll {\n  id: string;\n  summary: {\n    closed?: true;\n    isPublic?: true;\n    multipleChoice?: true;\n    quiz?: true;\n    question: string;\n    answers: ApiPollAnswer[];\n    closePeriod?: number;\n    closeDate?: number;\n  };\n  results: {\n    isMin?: true;\n    results?: ApiPollResult[];\n    totalVoters?: number;\n    recentVoterIds?: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n}\n\n// First type used for state, second - for API requests\nexport type ApiInputInvoice = {\n  chatId: string;\n  messageId: number;\n  isExtendedMedia?: boolean;\n} | {\n  slug: string;\n};\n\nexport type ApiRequestInputInvoice = {\n  chat: ApiChat;\n  messageId: number;\n} | {\n  slug: string;\n};\n\nexport interface ApiInvoice {\n  text: string;\n  title: string;\n  photo?: ApiWebDocument;\n  amount: number;\n  currency: string;\n  receiptMsgId?: number;\n  isTest?: boolean;\n  isRecurring?: boolean;\n  termsUrl?: string;\n  extendedMedia?: ApiMessageExtendedMediaPreview;\n  maxTipAmount?: number;\n  suggestedTipAmounts?: number[];\n}\n\nexport interface ApiMessageExtendedMediaPreview {\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  duration?: number;\n}\n\nexport interface ApiPaymentCredentials {\n  id: string;\n  title: string;\n}\n\nexport interface ApiGeoPoint {\n  long: number;\n  lat: number;\n  accessHash: string;\n  accuracyRadius?: number;\n}\n\ninterface ApiGeo {\n  type: 'geo';\n  geo: ApiGeoPoint;\n}\n\ninterface ApiVenue {\n  type: 'venue';\n  geo: ApiGeoPoint;\n  title: string;\n  address: string;\n  provider: string;\n  venueId: string;\n  venueType: string;\n}\n\ninterface ApiGeoLive {\n  type: 'geoLive';\n  geo: ApiGeoPoint;\n  heading?: number;\n  period: number;\n}\n\nexport type ApiLocation = ApiGeo | ApiVenue | ApiGeoLive;\n\nexport type ApiGame = {\n  title: string;\n  description: string;\n  photo?: ApiPhoto;\n  shortName: string;\n  id: string;\n  accessHash: string;\n  document?: ApiDocument;\n};\n\nexport type ApiGiveaway = {\n  quantity: number;\n  months: number;\n  untilDate: number;\n  isOnlyForNewSubscribers?: true;\n  countries?: string[];\n  channelIds: string[];\n  prizeDescription?: string;\n};\n\nexport type ApiGiveawayResults = {\n  months: number;\n  untilDate: number;\n  isRefunded?: true;\n  isOnlyForNewSubscribers?: true;\n  channelId: string;\n  prizeDescription?: string;\n  winnersCount?: number;\n  winnerIds: string[];\n  additionalPeersCount?: number;\n  launchMessageId: number;\n  unclaimedCount: number;\n};\n\nexport type ApiNewPoll = {\n  summary: ApiPoll['summary'];\n  quiz?: {\n    correctAnswers: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n};\n\nexport interface ApiAction {\n  text: string;\n  targetUserIds?: string[];\n  targetChatId?: string;\n  type:\n  | 'historyClear'\n  | 'contactSignUp'\n  | 'chatCreate'\n  | 'topicCreate'\n  | 'suggestProfilePhoto'\n  | 'joinedChannel'\n  | 'chatBoost'\n  | 'other';\n  photo?: ApiPhoto;\n  amount?: number;\n  currency?: string;\n  giftCryptoInfo?: {\n    currency: string;\n    amount: string;\n  };\n  translationValues: string[];\n  call?: Partial<ApiGroupCall>;\n  phoneCall?: PhoneCallAction;\n  score?: number;\n  months?: number;\n  topicEmojiIconId?: string;\n  isTopicAction?: boolean;\n  slug?: string;\n  isGiveaway?: boolean;\n  isUnclaimed?: boolean;\n  pluralValue?: number;\n}\n\nexport interface ApiWebPage {\n  id: number;\n  url: string;\n  displayUrl: string;\n  type?: string;\n  siteName?: string;\n  title?: string;\n  description?: string;\n  photo?: ApiPhoto;\n  audio?: ApiAudio;\n  duration?: number;\n  document?: ApiDocument;\n  video?: ApiVideo;\n  story?: ApiWebPageStoryData;\n}\n\nexport interface ApiSponsoredWebPage {\n  url: string;\n  siteName: string;\n  photo?: ApiPhoto;\n}\n\nexport type ApiReplyInfo = ApiMessageReplyInfo | ApiStoryReplyInfo;\n\nexport interface ApiMessageReplyInfo {\n  type: 'message';\n  replyToMsgId?: number;\n  replyToPeerId?: string;\n  replyFrom?: ApiMessageForwardInfo;\n  replyMedia?: MediaContent;\n  replyToTopId?: number;\n  isForumTopic?: true;\n  isQuote?: true;\n  quoteText?: ApiFormattedText;\n}\n\nexport interface ApiStoryReplyInfo {\n  type: 'story';\n  peerId: string;\n  storyId: number;\n}\n\nexport interface ApiInputMessageReplyInfo {\n  type: 'message';\n  replyToMsgId: number;\n  replyToTopId?: number;\n  replyToPeerId?: string;\n  quoteText?: ApiFormattedText;\n}\n\nexport interface ApiInputStoryReplyInfo {\n  type: 'story';\n  peerId: string;\n  storyId: number;\n}\n\nexport type ApiInputReplyInfo = ApiInputMessageReplyInfo | ApiInputStoryReplyInfo;\n\nexport interface ApiMessageForwardInfo {\n  date: number;\n  savedDate?: number;\n  isImported?: boolean;\n  isChannelPost: boolean;\n  channelPostId?: number;\n  isLinkedChannelPost?: boolean;\n  fromChatId?: string;\n  fromId?: string;\n  savedFromPeerId?: string;\n  fromMessageId?: number;\n  hiddenUserName?: string;\n  postAuthorTitle?: string;\n}\n\nexport interface ApiStoryForwardInfo {\n  fromPeerId?: string;\n  fromName?: string;\n  storyId?: number;\n  isModified?: boolean;\n}\n\nexport type ApiMessageEntityDefault = {\n  type: Exclude<\n  `${ApiMessageEntityTypes}`,\n  `${ApiMessageEntityTypes.Pre}` | `${ApiMessageEntityTypes.TextUrl}` | `${ApiMessageEntityTypes.MentionName}` |\n  `${ApiMessageEntityTypes.CustomEmoji}`\n  >;\n  offset: number;\n  length: number;\n};\n\nexport type ApiMessageEntityPre = {\n  type: ApiMessageEntityTypes.Pre;\n  offset: number;\n  length: number;\n  language?: string;\n};\n\nexport type ApiMessageEntityTextUrl = {\n  type: ApiMessageEntityTypes.TextUrl;\n  offset: number;\n  length: number;\n  url: string;\n};\n\nexport type ApiMessageEntityMentionName = {\n  type: ApiMessageEntityTypes.MentionName;\n  offset: number;\n  length: number;\n  userId: string;\n};\n\nexport type ApiMessageEntityCustomEmoji = {\n  type: ApiMessageEntityTypes.CustomEmoji;\n  offset: number;\n  length: number;\n  documentId: string;\n};\n\nexport type ApiMessageEntity = ApiMessageEntityDefault | ApiMessageEntityPre | ApiMessageEntityTextUrl |\nApiMessageEntityMentionName | ApiMessageEntityCustomEmoji;\n\nexport enum ApiMessageEntityTypes {\n  Bold = 'MessageEntityBold',\n  Blockquote = 'MessageEntityBlockquote',\n  BotCommand = 'MessageEntityBotCommand',\n  Cashtag = 'MessageEntityCashtag',\n  Code = 'MessageEntityCode',\n  Email = 'MessageEntityEmail',\n  Hashtag = 'MessageEntityHashtag',\n  Italic = 'MessageEntityItalic',\n  MentionName = 'MessageEntityMentionName',\n  Mention = 'MessageEntityMention',\n  Phone = 'MessageEntityPhone',\n  Pre = 'MessageEntityPre',\n  Strike = 'MessageEntityStrike',\n  TextUrl = 'MessageEntityTextUrl',\n  Url = 'MessageEntityUrl',\n  Underline = 'MessageEntityUnderline',\n  Spoiler = 'MessageEntitySpoiler',\n  CustomEmoji = 'MessageEntityCustomEmoji',\n  Unknown = 'MessageEntityUnknown',\n}\n\nexport interface ApiFormattedText {\n  text: string;\n  entities?: ApiMessageEntity[];\n}\n\nexport type MediaContent = {\n  text?: ApiFormattedText;\n  photo?: ApiPhoto;\n  video?: ApiVideo;\n  altVideo?: ApiVideo;\n  document?: ApiDocument;\n  sticker?: ApiSticker;\n  contact?: ApiContact;\n  poll?: ApiPoll;\n  action?: ApiAction;\n  webPage?: ApiWebPage;\n  audio?: ApiAudio;\n  voice?: ApiVoice;\n  invoice?: ApiInvoice;\n  location?: ApiLocation;\n  game?: ApiGame;\n  storyData?: ApiMessageStoryData;\n  giveaway?: ApiGiveaway;\n  giveawayResults?: ApiGiveawayResults;\n  isExpiredVoice?: boolean;\n  isExpiredRoundVideo?: boolean;\n  ttlSeconds?: number;\n};\n\nexport interface ApiMessage {\n  id: number;\n  chatId: string;\n  content: MediaContent;\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  replyInfo?: ApiReplyInfo;\n  sendingState?: 'messageSendingStatePending' | 'messageSendingStateFailed';\n  forwardInfo?: ApiMessageForwardInfo;\n  isDeleting?: boolean;\n  previousLocalId?: number;\n  viewsCount?: number;\n  forwardsCount?: number;\n  isEdited?: boolean;\n  editDate?: number;\n  isMentioned?: boolean;\n  isMediaUnread?: boolean;\n  groupedId?: string;\n  isInAlbum?: boolean;\n  hasUnreadMention?: boolean;\n  inlineButtons?: ApiKeyboardButtons;\n  keyboardButtons?: ApiKeyboardButtons;\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n  viaBotId?: string;\n  postAuthorTitle?: string;\n  isScheduled?: boolean;\n  shouldHideKeyboardButtons?: boolean;\n  isHideKeyboardSelective?: boolean;\n  isFromScheduled?: boolean;\n  isSilent?: boolean;\n  isPinned?: boolean;\n  seenByDates?: Record<string, number>;\n  isProtected?: boolean;\n  isForwardingAllowed?: boolean;\n  transcriptionId?: string;\n  isTranscriptionError?: boolean;\n  emojiOnlyCount?: number;\n  reactors?: {\n    nextOffset?: string;\n    count: number;\n    reactions: ApiPeerReaction[];\n  };\n  reactions?: ApiReactions;\n  hasComments?: boolean;\n  readDate?: number;\n  savedPeerId?: string;\n  senderBoosts?: number;\n}\n\nexport interface ApiReactions {\n  canSeeList?: boolean;\n  areTags?: boolean;\n  results: ApiReactionCount[];\n  recentReactions?: ApiPeerReaction[];\n}\n\nexport interface ApiPeerReaction {\n  peerId: string;\n  reaction: ApiReaction;\n  isOwn?: boolean;\n  isBig?: boolean;\n  isUnread?: boolean;\n  addedDate: number;\n}\n\nexport interface ApiReactionCount {\n  chosenOrder?: number;\n  count: number;\n  reaction: ApiReaction;\n}\n\nexport interface ApiAvailableReaction {\n  selectAnimation?: ApiDocument;\n  appearAnimation?: ApiDocument;\n  activateAnimation?: ApiDocument;\n  effectAnimation?: ApiDocument;\n  staticIcon?: ApiDocument;\n  centerIcon?: ApiDocument;\n  aroundAnimation?: ApiDocument;\n  reaction: ApiReactionEmoji;\n  title: string;\n  isInactive?: boolean;\n  isPremium?: boolean;\n}\n\ntype ApiChatReactionsAll = {\n  type: 'all';\n  areCustomAllowed?: true;\n};\n\ntype ApiChatReactionsSome = {\n  type: 'some';\n  allowed: ApiReaction[];\n};\n\nexport type ApiChatReactions = ApiChatReactionsAll | ApiChatReactionsSome;\n\nexport type ApiReactionEmoji = {\n  emoticon: string;\n};\n\nexport type ApiReactionCustomEmoji = {\n  documentId: string;\n};\n\nexport type ApiReaction = ApiReactionEmoji | ApiReactionCustomEmoji;\n\nexport type ApiReactionKey = `${string}-${string}`;\n\nexport type ApiSavedReactionTag = {\n  reaction: ApiReaction;\n  title?: string;\n  count: number;\n};\n\ninterface ApiBaseThreadInfo {\n  chatId: string;\n  messagesCount: number;\n  lastMessageId?: number;\n  lastReadInboxMessageId?: number;\n  recentReplierIds?: string[];\n}\n\nexport interface ApiCommentsInfo extends ApiBaseThreadInfo {\n  isCommentsInfo: true;\n  threadId?: ThreadId;\n  originChannelId: string;\n  originMessageId: number;\n}\n\nexport interface ApiMessageThreadInfo extends ApiBaseThreadInfo {\n  isCommentsInfo: false;\n  threadId: ThreadId;\n  // For linked messages in discussion\n  fromChannelId?: string;\n  fromMessageId?: number;\n}\n\nexport type ApiThreadInfo = ApiCommentsInfo | ApiMessageThreadInfo;\n\nexport type ApiMessageOutgoingStatus = 'read' | 'succeeded' | 'pending' | 'failed';\n\nexport type ApiSponsoredMessage = {\n  chatId?: string;\n  randomId: string;\n  isRecommended?: boolean;\n  isAvatarShown?: boolean;\n  isBot?: boolean;\n  channelPostId?: number;\n  startParam?: string;\n  chatInviteHash?: string;\n  chatInviteTitle?: string;\n  text: ApiFormattedText;\n  webPage?: ApiSponsoredWebPage;\n  expiresAt: number;\n  sponsorInfo?: string;\n  additionalInfo?: string;\n  buttonText?: string;\n  botApp?: ApiBotApp;\n};\n\n// KeyboardButtons\n\ninterface ApiKeyboardButtonSimple {\n  type: 'unsupported' | 'buy' | 'command' | 'requestPhone' | 'game';\n  text: string;\n}\n\ninterface ApiKeyboardButtonReceipt {\n  type: 'receipt';\n  text: string;\n  receiptMessageId: number;\n}\n\ninterface ApiKeyboardButtonUrl {\n  type: 'url';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonSimpleWebView {\n  type: 'simpleWebView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonWebView {\n  type: 'webView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonCallback {\n  type: 'callback';\n  text: string;\n  data: string;\n}\n\ninterface ApiKeyboardButtonRequestPoll {\n  type: 'requestPoll';\n  text: string;\n  isQuiz?: boolean;\n}\n\ninterface ApiKeyboardButtonSwitchBotInline {\n  type: 'switchBotInline';\n  text: string;\n  query: string;\n  isSamePeer?: boolean;\n}\n\ninterface ApiKeyboardButtonUserProfile {\n  type: 'userProfile';\n  text: string;\n  userId: string;\n}\n\ninterface ApiKeyboardButtonUrlAuth {\n  type: 'urlAuth';\n  text: string;\n  url: string;\n  buttonId: number;\n}\n\nexport type ApiTranscription = {\n  text: string;\n  isPending?: boolean;\n  transcriptionId: string;\n};\n\nexport type ApiKeyboardButton = (\n  ApiKeyboardButtonSimple\n  | ApiKeyboardButtonReceipt\n  | ApiKeyboardButtonUrl\n  | ApiKeyboardButtonCallback\n  | ApiKeyboardButtonRequestPoll\n  | ApiKeyboardButtonSwitchBotInline\n  | ApiKeyboardButtonUserProfile\n  | ApiKeyboardButtonWebView\n  | ApiKeyboardButtonSimpleWebView\n  | ApiKeyboardButtonUrlAuth\n);\n\nexport type ApiKeyboardButtons = ApiKeyboardButton[][];\nexport type ApiReplyKeyboard = {\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n} & {\n  [K in 'inlineButtons' | 'keyboardButtons']?: ApiKeyboardButtons;\n};\n\nexport type ApiMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice' | 'profilePhoto';\nexport type ApiGlobalMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice';\n\nexport type ApiReportReason = 'spam' | 'violence' | 'pornography' | 'childAbuse'\n| 'copyright' | 'geoIrrelevant' | 'fake' | 'illegalDrugs' | 'personalDetails' | 'other';\n\nexport type ApiSendMessageAction = {\n  type: 'cancel' | 'typing' | 'recordAudio' | 'chooseSticker' | 'playingGame';\n};\n\nexport type ApiThemeParameters = {\n  bg_color: string;\n  text_color: string;\n  hint_color: string;\n  link_color: string;\n  button_color: string;\n  button_text_color: string;\n  secondary_bg_color: string;\n  header_bg_color: string;\n  accent_text_color: string;\n  section_bg_color: string;\n  section_header_text_color: string;\n  subtitle_text_color: string;\n  destructive_text_color: string;\n};\n\nexport type ApiBotApp = {\n  id: string;\n  accessHash: string;\n  title: string;\n  shortName: string;\n  description: string;\n  photo?: ApiPhoto;\n  document?: ApiDocument;\n};\n\nexport type ApiMessagesBotApp = ApiBotApp & {\n  isInactive?: boolean;\n  shouldRequestWriteAccess?: boolean;\n};\n\nexport const MAIN_THREAD_ID = -1;\n\n// `Symbol` can not be transferred from worker\nexport const MESSAGE_DELETED = 'MESSAGE_DELETED';\n","// We cache avatars as Data URI for faster initial load\n// and messages media as Blob for smaller size.\n\nexport enum ApiMediaFormat {\n  BlobUrl,\n  Progressive,\n  DownloadUrl,\n  Text,\n}\n\nexport type ApiParsedMedia = string | Blob | ArrayBuffer;\nexport type ApiPreparedMedia = string;\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n","// Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n// Emoji 15.0.2 support was taken here https://github.com/mei23/twemoji-parser\n// Version 3d4dedc 15.12.2023\n\nconst vs16RegExp = /\\uFE0F/g;\n// avoid using a string literal like `\\u200D` here because minifiers expand it inline\nconst zeroWidthJoiner = String.fromCharCode(0x200d);\n\nexport function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n}\n\n// Default Twemoji regex was modified here.\n// An exception for ascii emoji has been added to the beginning of the regular string: 🅰🅱🅾🅿.\n// UTF-16 endcoding are `\\ud83c\\udd70`, `\\ud83c\\udd71`, `\\ud83c\\udd7e` and `\\ud83c\\udd7f`.\n// These emojis in the graphic version must end with the `\\ufe0f` symbol.\n// Therefore, they should be excluded from the regular expression.\n// You must remove next substring `\\udd70\\udd71\\udd7e\\udd7f` from the middle of the regex on every update.\n\n// This file is generated by source/emoji/scripts/generate.sh\n// eslint-disable-next-line max-len\nexport default /(?:\\ud83c[\\udd70\\udd71\\udd7e\\udd7f]\\ufe0f)|(?:\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\udef1\\ud83c\\udffb\\u200d\\ud83e\\udef2\\ud83c[\\udffc-\\udfff]|\\ud83e\\udef1\\ud83c\\udffc\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\udef1\\ud83c\\udffd\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\udef1\\ud83c\\udffe\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\udef1\\ud83c\\udfff\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1|\\ud83d\\udc6b\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6c\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6d\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc8f\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc91\\ud83c[\\udffb-\\udfff]|\\ud83e\\udd1d\\ud83c[\\udffb-\\udfff]|\\ud83d[\\udc6b-\\udc6d\\udc8f\\udc91]|\\ud83e\\udd1d)|(?:\\ud83c\\udfc3|\\ud83d\\udeb6|\\ud83e\\uddce)(?:\\ud83c[\\udffb-\\udfff])?(?:\\u200d[\\u2640\\u2642]\\ufe0f)?(?:\\u200d\\u27a1\\ufe0f)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\ud83e[\\uddaf\\uddbc\\uddbd])(?:\\u200d\\u27a1\\ufe0f)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf7c\\udf84\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92]|\\ud83e[\\uddaf\\uddaf-\\uddb3\\uddbc\\uddbc\\uddbd\\uddbd])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75]|\\u26f9)((?:\\ud83c[\\udffb-\\udfff]|\\ufe0f)\\u200d[\\u2640\\u2642]\\ufe0f)|(?:\\ud83c[\\udfc3\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc70\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6\\udeb6]|\\ud83e[\\udd26\\udd35\\udd37-\\udd39\\udd3d\\udd3e\\uddb8\\uddb9\\uddcd\\uddce\\uddce\\uddcf\\uddd4\\uddd6-\\udddd])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83e\\uddd1\\u200d\\ud83e\\uddd1\\u200d\\ud83e\\uddd2\\u200d\\ud83e\\uddd2|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83e\\uddd1\\u200d\\ud83e\\uddd1\\u200d\\ud83e\\uddd2|\\ud83e\\uddd1\\u200d\\ud83e\\uddd2\\u200d\\ud83e\\uddd2|\\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83d\\ude36\\u200d\\ud83c\\udf2b\\ufe0f|\\u26d3\\ufe0f\\u200d\\ud83d\\udca5|\\u2764\\ufe0f\\u200d\\ud83d\\udd25|\\u2764\\ufe0f\\u200d\\ud83e\\ude79|\\ud83c\\udf44\\u200d\\ud83d\\udfeb|\\ud83c\\udf4b\\u200d\\ud83d\\udfe9|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc15\\u200d\\ud83e\\uddba|\\ud83d\\udc26\\u200d\\ud83d\\udd25|\\ud83d\\udc3b\\u200d\\u2744\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83d\\ude2e\\u200d\\ud83d\\udca8|\\ud83d\\ude35\\u200d\\ud83d\\udcab|\\ud83d\\ude42\\u200d\\u2194\\ufe0f|\\ud83d\\ude42\\u200d\\u2195\\ufe0f|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|\\ud83e\\uddd1\\u200d\\ud83e\\uddd2|\\ud83e\\uddde\\u200d\\u2640\\ufe0f|\\ud83e\\uddde\\u200d\\u2642\\ufe0f|\\ud83e\\udddf\\u200d\\u2640\\ufe0f|\\ud83e\\udddf\\u200d\\u2642\\ufe0f|\\ud83d\\udc08\\u200d\\u2b1b|\\ud83d\\udc26\\u200d\\u2b1b)|[#*0-9]\\ufe0f?\\u20e3|(?:[©®\\u2122\\u265f]\\ufe0f)|(?:\\ud83c[\\udc04\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u203c\\u2049\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26a7\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|\\ud83e\\udef0|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|(?:\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd0c\\udd0f\\udd18-\\udd1c\\udd1e\\udd1f\\udd26\\udd30-\\udd39\\udd3d\\udd3e\\udd77\\uddb5\\uddb6\\uddb8\\uddb9\\uddbb\\uddcd-\\uddcf\\uddd1-\\udddd\\udec3-\\udec5\\udef1-\\udef8]|[\\u270a\\u270b]))(?:\\ud83c[\\udffb-\\udfff])?|(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udc8e\\udc90\\udc92-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\uded5-\\uded7\\udedc-\\udedf\\udeeb\\udeec\\udef4-\\udefc\\udfe0-\\udfeb\\udff0]|\\ud83e[\\udd0d\\udd0e\\udd10-\\udd17\\udd20-\\udd25\\udd27-\\udd2f\\udd3a\\udd3c\\udd3f-\\udd45\\udd47-\\udd76\\udd78-\\uddb4\\uddb7\\uddba\\uddbc-\\uddcc\\uddd0\\uddde-\\uddff\\ude70-\\ude7c\\ude80-\\ude88\\ude90-\\udebd\\udebf-\\udec2\\udece-\\udedb\\udee0-\\udee8]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u267e\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a])|\\ufe0f/g;\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n\n  static resolved(): Deferred<void>;\n  static resolved<T>(value: T): Deferred<T>;\n  static resolved<T>(value?: T): Deferred<T | void> {\n    const deferred = new Deferred<T | void>();\n    deferred.resolve(value);\n    return deferred;\n  }\n}\n","import EMOJI_REGEX from '../../lib/twemojiRegex';\n\n// Non-standard variations of emojis, used on some devices\nconst EMOJI_EXCEPTIONS: [string | RegExp, string][] = [\n  [/\\u{1f3f3}\\u200d\\u{1f308}/gu, '\\u{1f3f3}\\ufe0f\\u200d\\u{1f308}'], // 🏳‍🌈\n  [/\\u{1f3f3}\\u200d\\u26a7\\ufe0f?/gu, '\\u{1f3f3}\\ufe0f\\u200d\\u26a7\\ufe0f'], // 🏳️‍⚧️\n  [/\\u26d3\\u200d\\u{1f4a5}/gu, '\\u26d3\\ufe0f\\u200d\\u{1f4a5}'], // ⛓‍💥\n  [/\\u200d([\\u2640\\u2642])(?!\\ufe0f)/gu, '\\u200d$1\\ufe0f'], // Gender variation without 0xFE0F\n];\n\nexport default function fixNonStandardEmoji(text: string) {\n  // Non-standard sequences typically parsed as separate emojis, so no need to fix text without any\n  if (!text.match(EMOJI_REGEX)) return text;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [regex, replacement] of EMOJI_EXCEPTIONS) {\n    text = text.replace(regex, replacement);\n  }\n\n  return text;\n}\n","import twemojiRegex from '../../lib/twemojiRegex';\nimport fixNonStandardEmoji from './fixNonStandardEmoji';\n\nconst DETECT_UP_TO = 100;\nconst MAX_LENGTH = DETECT_UP_TO * 8; // Maximum 8 per one emoji.\nconst RE_EMOJI_ONLY = new RegExp(`^(?:${twemojiRegex.source})+$`, '');\n\nconst parseEmojiOnlyString = (text: string): number | false => {\n  const standardizedText = fixNonStandardEmoji(text);\n  const lines = standardizedText.split('\\n');\n  const textWithoutNewlines = lines.join('');\n  if (textWithoutNewlines.length > MAX_LENGTH) {\n    return false;\n  }\n\n  const isEmojiOnly = Boolean(textWithoutNewlines.match(RE_EMOJI_ONLY));\n  if (!isEmojiOnly) {\n    return false;\n  }\n  const countPerLine = lines.map((line) => {\n    let emojiCount = 0;\n    while (twemojiRegex.exec(line)) {\n      emojiCount++;\n\n      if (emojiCount > DETECT_UP_TO) {\n        twemojiRegex.lastIndex = 0;\n        return -1;\n      }\n    }\n\n    return emojiCount;\n  });\n\n  let max = lines.length;\n  for (let i = 0; i < countPerLine.length; i++) {\n    if (countPerLine[i] === -1) {\n      return false;\n    }\n    if (countPerLine[i] > max) {\n      max = countPerLine[i];\n    }\n  }\n\n  return max;\n};\n\nexport default parseEmojiOnlyString;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [5802,8764,1649,1637], () => (__webpack_require__(52040)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"1637\":\"243c3a399332afaf050b\",\"1649\":\"23ef32650e96d33d6586\",\"5802\":\"36a9971f58c808c4a974\",\"8764\":\"58763b7a689318950e51\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t2385: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunktelegram_t\"] = self[\"webpackChunktelegram_t\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","APP_CODE_NAME","IS_TEST","process","IS_PACKAGED_ELECTRON","DEBUG","ELECTRON_HOST_URL","MEDIA_CACHE_DISABLED","MEDIA_CACHE_NAME","MEDIA_CACHE_NAME_AVATARS","MEDIA_CACHE_MAX_BYTES","DOWNLOAD_WORKERS","UPLOAD_WORKERS","GLOBAL_SEARCH_CONTACTS_LIMIT","window","innerHeight","MEMBERS_LOAD_SLICE","PINNED_MESSAGES_LIMIT","BLOCKED_LIST_LIMIT","PROFILE_PHOTOS_LIMIT","COMMON_CHATS_LIMIT","GROUP_CALL_PARTICIPANTS_LIMIT","STORY_LIST_LIMIT","API_GENERAL_ID_LIMIT","STATISTICS_PUBLIC_FORWARDS_LIMIT","TOP_REACTIONS_LIMIT","RECENT_REACTIONS_LIMIT","REACTION_LIST_LIMIT","REACTION_UNREAD_SLICE","MENTION_UNREAD_SLICE","TOPICS_SLICE","SPONSORED_MESSAGE_CACHE_MS","MAX_INT_32","API_UPDATE_THROTTLE","Math","round","API_THROTTLE_RESET_UPDATES","Set","RECENT_STICKERS_LIMIT","RECENT_STATUS_LIMIT","DEFAULT_STATUS_ICON_ID","VIDEO_WEBM_TYPE","GIF_MIME_TYPE","LOTTIE_STICKER_MIME_TYPE","VIDEO_STICKER_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","WEB_APP_PLATFORM","SERVICE_NOTIFICATIONS_USER_ID","CHANNEL_ID_LENGTH","DEFAULT_GIF_SEARCH_BOT_USERNAME","ALL_FOLDER_ID","ARCHIVED_FOLDER_ID","DELETED_COMMENTS_CHANNEL_ID","DEFAULT_LANG_PACK","GENERAL_TOPIC_ID","STORY_EXPIRE_PERIOD","STORY_VIEWERS_EXPIRE_PERIOD","DEFAULT_LIMITS","uploadMaxFileparts","stickersFaved","savedGifs","dialogFiltersChats","dialogFilters","dialogFolderPinned","captionLength","channels","channelsPublic","aboutLength","chatlistInvites","chatlistJoined","recommendedChannels","savedDialogsPinned","DEBUG_LEVELS","throttle","fn","ms","shouldRunFirst","interval","isPending","args","_args","self","setInterval","clearInterval","undefined","throttleWithTickEnd","schedulerFn","waiting","throttleWith","onTickEnd","reduce","acc","level","console","pause","Promise","resolve","setTimeout","onTickEndCallbacks","callback","push","then","currentCallbacks","forEach","cb","isPeerUser","peer","hasOwnProperty","isPeerChat","buildApiPeerId","id","type","toString","getApiChatIdFromMtpPeer","userId","chatId","channelId","buildApiPeerColor","peerColor","color","backgroundEmojiId","buildApiEmojiStatus","mtpEmojiStatus","GramJs","EmojiStatus","documentId","EmojiStatusUntil","until","bytesToDataUri","bytes","shouldOmitPrefix","mimeType","btoa","String","fromCharCode","omitVirtualClassFields","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","className","classType","getBytes","rest","IS_MULTITAB_SUPPORTED","channel","BroadcastChannel","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","value","Uint8Array","Buffer","from","Object","keys","length","BigInt","Array","isArray","map","VirtualClass","split","field","constructors","valueOmited","key","createLocalDbInitial","initial","convertedValue","acc2","key2","typedValue","name","Proxy","get","target","prop","Reflect","set","localDb","broadcastLocalDbUpdateFull","LOG_BACKGROUND","LOG_PREFIX_COLOR","LOG_SUFFIX","INVOKE","BEACON","RESPONSE","CONNECTING","CONNECTED","UPDATE","resolveMessageApiChatId","mtpMessage","Message","MessageService","peerId","isChatFolder","filter","DialogFilter","DialogFilterChatlist","addMessageToLocalDb","message","messageFullId","mockMessage","media","MessageMediaInvoice","extendedMedia","MessageExtendedMedia","messages","addMediaToLocalDb","replyTo","MessageReplyHeader","replyMedia","action","addPhotoToLocalDb","photo","MessageMediaDocument","document","Document","documents","MessageMediaWebPage","webpage","WebPage","MessageMediaGame","game","webDocuments","url","addStoryToLocalDb","story","StoryItem","storyData","MessageMediaPhoto","doc","altDocument","Photo","photos","addUserToLocalDb","user","storedUser","users","min","addEntitiesToLocalDb","entities","entity","User","Chat","Channel","chat","storedChat","chats","isStoredMin","isChatMin","addChatToLocalDb","serializeBytes","deserializeBytes","log","suffix","data","error","warn","buildCollectionByKey","collection","byKey","member","buildCollectionByCallback","pick","object","result","pickTruthy","omit","stringKeys","has","omitUndefined","stringKey","compact","array","Boolean","chunkSize","i","slice","serverTimeOffset","getServerTimeOffset","getServerTime","floor","Date","now","TEMPLATE","LOOKUP","DEFAULT_THUMB_SIZE","w","h","buildApiThumbnailFromStripped","sizes","thumb","find","s","PhotoStrippedSize","realSizes","PhotoSize","dataUri","strippedPhotoToJpg","width","height","buildApiThumbnailFromPath","photoSize","sizeAttribute","replace","path","len","num","buildPath","buildApiPhoto","isSpoiler","PhotoSizeProgressive","buildApiPhotoSize","thumbnail","videoSizes","buildApiVideoSize","isVideo","videoSize","VideoSize","videoStartTs","size","buildApiUsernames","mtpPeer","usernames","username","isActive","isEditable","active","editable","buildPrivacyRules","rules","visibility","isUnspecified","allowUserIds","allowChatIds","blockUserIds","blockChatIds","localChats","rule","PrivacyValueAllowAll","PrivacyValueAllowContacts","PrivacyValueAllowCloseFriends","PrivacyValueDisallowContacts","PrivacyValueDisallowAll","PrivacyValueAllowUsers","PrivacyValueDisallowUsers","PrivacyValueAllowChatParticipants","dialogId","PrivacyValueDisallowChatParticipants","buildApiMessageEntity","offset","MessageEntityMentionName","ApiMessageEntityTypes","MentionName","MessageEntityTextUrl","TextUrl","MessageEntityPre","Pre","language","MessageEntityCustomEmoji","CustomEmoji","buildStickerFromDocument","isNoPremium","DocumentEmpty","videoThumbs","stickerAttribute","attributes","attr","DocumentAttributeSticker","customEmojiAttribute","DocumentAttributeCustomEmoji","fileAttribute","DocumentAttributeFilename","isLottie","isCustomEmoji","shouldUseTextColor","textColor","imageSizeAttribute","DocumentAttributeImageSize","videoSizeAttribute","DocumentAttributeVideo","stickerOrEmojiAttribute","stickerSetInfo","inputSet","stickerset","InputStickerSetID","accessHash","InputStickerSetShortName","shortName","isMissing","emoji","alt","isFree","free","cachedThumb","thumbs","PhotoCachedSize","isWebmSupported","pathThumb","PhotoPathSize","buildApiThumbnailFromCached","hasEffect","some","buildStickerSet","archived","animated","installedDate","videos","title","count","emojis","thumbDocumentId","isArchived","isVideos","isEmoji","hasThumbnail","thumbCustomEmojiId","buildStickerSetCovered","coveredStickerSet","stickerSet","StickerSetNoCovered","stickers","processStickerResult","StickerSetCovered","cover","StickerSetMultiCovered","covers","StickerSetFullCovered","packs","processStickerPackResult","emoticon","sticker","buildMessageContent","content","buildMessageMediaContent","hasUnsupportedMedia","MessageMediaUnsupported","poll","contact","video","isRound","text","buildMessageTextContent","ttlSeconds","isExpiredVoice","voice","isExpiredVoiceMessage","isExpiredRoundVideo","isExpiredRoundVideoMessage","audioAttribute","DocumentAttributeAudio","duration","waveform","buildVoice","buildVideo","nopremium","buildSticker","spoiler","buildPhoto","altVideo","startsWith","buildVideoFromDocument","buildAltVideo","audio","thumbnailSizes","fileName","getFilenameFromDocument","toJSNumber","buildAudio","buildApiDocument","buildDocumentFromMedia","MessageMediaContact","firstName","lastName","phoneNumber","buildContact","MessageMediaPoll","buildPoll","results","buildPollFromMedia","webPage","buildWebPage","invoice","description","test","totalAmount","currency","receiptMsgId","preview","MessageExtendedMediaPreview","buildApiMessageExtendedMediaPreview","buildApiWebDocument","amount","Number","isTest","buildInvoice","buildInvoiceFromMedia","location","MessageMediaGeo","point","buildGeoPoint","geo","buildGeo","MessageMediaVenue","provider","address","venueId","venueType","buildVenue","MessageMediaGeoLive","period","heading","buildGeoLive","buildLocationFromMedia","apiPhoto","apiDocument","buildGame","buildGameFromMedia","MessageMediaStory","viaMention","isMention","buildMessageStoryData","giveaway","MessageMediaGiveaway","months","quantity","untilDate","countriesIso2","onlyNewSubscribers","prizeDescription","channelIds","countries","isOnlyForNewSubscribers","buildGiveaway","buildGiweawayFromMedia","giveawayResults","MessageMediaGiveawayResults","launchMsgId","unclaimedCount","winners","winnersCount","additionalPeersCount","refunded","winnerIds","winner","launchMessageId","isRefunded","buildGiveawayResults","buildGiweawayResultsFromMedia","videoAttr","a","gifAttr","DocumentAttributeAnimated","supportsStreaming","roundMessage","nosound","isGif","noSound","date","mediaType","mediaSize","photoPath","imageAttribute","videoAttribute","timestamp","GeoPointEmpty","long","lat","accuracyRadius","pollResults","answers","rawAnswers","answer","option","summary","isPublic","publicVoters","buildPollResults","rawResults","totalVoters","recentVoters","solution","solutionEntities","chosen","correct","voters","isChosen","isCorrect","votersCount","isMin","recentVoterIds","audioAttributes","performer","buildAudioFromDocument","attributeStory","WebPageAttributeStory","defaultBase","filenameAttribute","extension","videoDuration","WebDocument","sizeAttr","dimensions","buildApiAttachBot","bot","botId","shouldRequestWriteAccess","requestWriteAccess","isForAttachMenu","showInAttachMenu","isForSideMenu","showInSideMenu","attachMenuPeerTypes","peerTypes","buildApiAttachMenuPeerType","icons","buildApiAttachMenuIcon","isInactive","inactive","isDisclaimerNeeded","sideMenuDisclaimerNeeded","peerType","AttachMenuPeerTypeBotPM","AttachMenuPeerTypePM","AttachMenuPeerTypeChat","AttachMenuPeerTypeBroadcast","AttachMenuPeerTypeSameBotPM","icon","buildApiBotInfo","botInfo","descriptionPhoto","descriptionDocument","commands","menuButton","gif","commandsArray","command","buildApiBotCommand","buildApiBotMenuButton","BotMenuButton","buildApiBotApp","app","BotAppNotModified","buildApiGroupCallParticipant","participant","about","versioned","canSelfUnmute","justJoined","left","muted","mutedByYou","source","volume","volumeByAdmin","videoJoined","presentation","raiseHandRating","isSelf","isLeft","isMuted","isMutedByMe","hasJustJoined","isVolumeByAdmin","isVersioned","isVideoJoined","isUser","buildApiGroupCallParticipantVideo","participantVideo","audioSource","endpoint","paused","sourceGroups","isPaused","buildApiGroupCallParticipantVideoSourceGroup","participantVideoSourceGroup","semantics","sources","buildApiGroupCall","groupCall","GroupCallDiscarded","connectionState","participantsCount","version","participants","streamDcId","scheduleDate","canChangeJoinMuted","joinMuted","canStartVideo","scheduleStartSubscribed","isLoaded","buildPhoneCall","call","phoneCall","PhoneCallAccepted","PhoneCallWaiting","PhoneCall","PhoneCallRequested","adminId","participantId","protocol","buildApiCallProtocol","p2pAllowed","gAOrB","keyFingerprint","connections","startDate","state","isP2pAllowed","buildApiCallConnection","PhoneCallDiscarded","reason","buildApiCallDiscardReason","needRating","needDebug","receiveDate","gB","gAHash","discardReason","PhoneCallDiscardReasonMissed","PhoneCallDiscardReasonBusy","PhoneCallDiscardReasonHangup","connection","PhoneConnectionWebrtc","password","turn","stun","ip","ipv6","port","isTurn","isStun","libraryVersions","minLayer","maxLayer","udpP2p","udpReflector","isUdpP2p","isUdpReflector","buildCallProtocol","PhoneCallProtocol","buildMessageReactions","reactions","recentReactions","canSeeList","reactionsAsTags","areTags","buildReactionCount","sort","reactionCountComparator","buildMessagePeerReaction","b","chosenOrder","reactionCount","reaction","apiReaction","buildApiReaction","userReaction","big","unread","my","addedDate","isUnread","isBig","isOwn","ReactionEmoji","ReactionCustomEmoji","buildApiSavedReactionTag","tag","buildApiAvailableReaction","availableReaction","selectAnimation","staticIcon","appearAnimation","aroundAnimation","centerIcon","effectAnimation","activateAnimation","premium","isPremium","buildApiChatFieldsFromPeerEntity","peerEntity","isSupport","hasVideoAvatar","hasVideo","avatarHash","buildAvatarHash","isSignaturesShown","signatures","hasPrivateLink","hasLink","isScam","scam","isFake","fake","isJoinToSend","joinToSend","isJoinRequest","joinRequest","isForum","forum","areStoriesHidden","storiesHidden","maxStoryId","storiesMaxId","storiesUnavailable","emojiStatus","boostLevel","isVerified","verified","isCallActive","callActive","isCallNotEmpty","callNotEmpty","creationDate","membersCount","isProtected","noforwards","buildApiChatPermissions","isCreator","creator","buildApiChatRestrictions","buildApiChatMigrationInfo","fakeType","hasStories","buildApiChatFromDialog","dialog","folderId","unreadMark","unreadCount","unreadMentionsCount","unreadReactionsCount","notifySettings","silent","muteUntil","readOutboxMaxId","readInboxMaxId","draft","viewForumAsMessages","getApiChatTypeFromPeerEntity","getApiChatTitleFromMtpPeer","lastReadOutboxMessageId","lastReadInboxMessageId","hasUnreadMark","DraftMessage","draftDate","isForumAsMessages","adminRights","currentUserBannedRights","bannedRights","defaultBannedRights","ChatForbidden","isForbidden","ChannelForbidden","isRestricted","restrictions","restrictionReason","restricted","restrictionReasons","targetReason","platform","buildApiChatRestrictionReason","assign","isNotJoined","migratedTo","InputChannelEmpty","InputChannel","buildApiChatFromPreview","ChatEmpty","UserEmpty","getUserName","megagroup","getPeerKey","photoId","buildChatMember","ChannelParticipantBanned","ChannelParticipantLeft","inviterId","joinedDate","kickedByUserId","kickedBy","promotedByUserId","promotedBy","customTitle","rank","ChannelParticipantAdmin","ChatParticipantAdmin","isAdmin","ChannelParticipantCreator","ChatParticipantCreator","isOwner","buildChatMembers","ChatParticipants","ChannelParticipants","buildChatTypingStatus","update","SendMessageCancelAction","SendMessageTypingAction","SendMessageRecordVideoAction","SendMessageUploadVideoAction","SendMessageRecordAudioAction","SendMessageUploadAudioAction","SendMessageUploadPhotoAction","SendMessageUploadDocumentAction","SendMessageGeoLocationAction","SendMessageChooseContactAction","SendMessageGamePlayAction","SendMessageRecordRoundAction","SendMessageUploadRoundAction","SendMessageChooseStickerAction","SpeakingInGroupCallAction","SendMessageEmojiInteractionSeen","SendMessageEmojiInteraction","UpdateUserTyping","fromId","buildApiChatFolder","excludedChatIds","includedChatIds","includePeers","pinnedChatIds","pinnedPeers","hasMyInvites","isChatList","broadcasts","excludePeers","buildApiChatFolderFromSuggested","buildApiChatBotCommands","botInfos","botCommands","concat","mtpCommand","buildApiExportedInvite","invite","revoked","expireDate","link","permanent","usage","usageLimit","requested","requestNeeded","isRevoked","isPermanent","isRequestNeeded","buildApiChatSettings","autoarchived","reportSpam","addContact","blockContact","isAutoArchived","canReportSpam","canAddContact","canBlockContact","buildApiChatReactions","chatReactions","ChatReactionsAll","areCustomAllowed","allowCustom","ChatReactionsSome","allowed","buildApiSendAsPeerId","sendAs","premiumRequired","buildApiTopic","forumTopic","ForumTopicDeleted","closed","pinned","hidden","short","iconColor","iconEmojiId","topMessage","isClosed","isPinned","isHidden","lastMessageId","buildApiChatlistExportedInvite","ExportedChatlistInvite","peers","peerIds","interpolateArray","fitCount","peak","newData","springFactor","leftFiller","rightFiller","idx","val","LEGACY_CHANNEL_ID_MIN_LENGTH","getEntityTypeById","chatOrUserId","buildPeer","PeerUser","buildMtpPeerId","PeerChannel","PeerChat","buildInputPeer","InputPeerUser","InputPeerChannel","InputPeerChat","buildInputPeerFromLocalDb","buildInputEntity","InputUser","buildInputStickerSet","buildInputDocument","InputDocument","buildInputMediaDocument","inputDocument","InputMediaDocument","buildInputPollFromExisting","shouldClose","InputMediaPoll","Poll","question","PollAnswer","quiz","multipleChoice","closeDate","closePeriod","correctAnswers","o","buildMtpMessageEntity","generateRandomBigInt","readBigIntFromBuffer","generateRandomBytes","generateRandomInt","buildMessageFromUpdate","Bold","MessageEntityBold","Italic","MessageEntityItalic","Underline","MessageEntityUnderline","Strike","MessageEntityStrike","Code","MessageEntityCode","Blockquote","MessageEntityBlockquote","Url","MessageEntityUrl","Hashtag","MessageEntityHashtag","InputMessageEntityMentionName","Spoiler","MessageEntitySpoiler","MessageEntityUnknown","isMessageWithMedia","buildInputPhoto","localPhoto","InputPhoto","buildInputContact","phone","InputPhoneContact","clientId","buildChatBannedRights","ChatBannedRights","buildChatAdminRights","ChatAdminRights","buildShippingInfo","info","shippingAddress","PaymentRequestedInfo","PostAddress","buildInputPrivacyKey","privacyKey","InputPrivacyKeyPhoneNumber","InputPrivacyKeyAddedByPhone","InputPrivacyKeyStatusTimestamp","InputPrivacyKeyProfilePhoto","InputPrivacyKeyForwards","InputPrivacyKeyChatInvite","InputPrivacyKeyPhoneCall","InputPrivacyKeyPhoneP2P","InputPrivacyKeyVoiceMessages","InputPrivacyKeyAbout","buildInputReportReason","InputReportReasonSpam","InputReportReasonViolence","InputReportReasonChildAbuse","InputReportReasonPornography","InputReportReasonCopyright","InputReportReasonFake","InputReportReasonGeoIrrelevant","InputReportReasonIllegalDrugs","InputReportReasonPersonalDetails","InputReportReasonOther","buildInputThemeParams","params","DataJSON","JSON","stringify","buildInputGroupCall","InputGroupCall","buildInputPhoneCall","InputPhoneCall","buildInputInvoice","InputInvoiceSlug","slug","InputInvoiceMessage","msgId","messageId","buildInputReaction","ReactionEmpty","buildInputEmojiStatus","expires","EmojiStatusEmpty","buildInputTextWithEntities","formatted","TextWithEntities","buildInputBotApp","InputBotAppID","buildInputReplyTo","replyInfo","InputReplyToStory","storyId","replyToMsgId","replyToTopId","replyToPeerId","quoteText","InputReplyToMessage","topMsgId","quoteEntities","buildInputPrivacyRules","privacyRules","allowedUsers","InputPrivacyValueAllowUsers","allowedChats","InputPrivacyValueAllowChatParticipants","blockedUsers","InputPrivacyValueDisallowUsers","blockedChats","InputPrivacyValueDisallowChatParticipants","InputPrivacyValueAllowAll","InputPrivacyValueAllowContacts","InputPrivacyValueDisallowContacts","InputPrivacyValueDisallowAll","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","INPUT_WAVEFORM_LENGTH","MIN_SCHEDULED_PERIOD","currentUserId","localMessageCounter","getNextLocalMessageId","buildApiSponsoredMessage","startParam","channelPost","chatInvite","chatInviteHash","randomId","recommended","sponsorInfo","additionalInfo","showPeerPhoto","buttonText","chatInviteTitle","ChatInvite","isBot","expiresAt","isRecommended","buildSponsoredWebPage","isAvatarShown","channelPostId","botApp","buildApiMessage","buildApiMessageWithChatId","isChatWithSelf","isOutgoing","out","post","fwdFrom","senderId","targetPeerId","isChannelPost","MessageActionEmpty","giftCryptoInfo","translationValues","score","topicEmojiIconId","isTopicAction","isGiveaway","isUnclaimed","pluralValue","targetUserIds","targetChatId","MessageActionChatCreate","MessageActionChatEditTitle","MessageActionChatEditPhoto","MessageActionChatDeletePhoto","MessageActionChatAddUser","includes","MessageActionChatDeleteUser","MessageActionChatJoinedByLink","MessageActionChannelCreate","MessageActionChatMigrateTo","MessageActionChannelMigrateFrom","MessageActionPinMessage","MessageActionHistoryClear","MessageActionPhoneCall","withDuration","join","mins","max","MessageActionInviteToGroupCall","MessageActionContactSignUp","MessageActionPaymentSent","MessageActionGroupCall","MessageActionBotAllowed","domain","fromRequest","MessageActionCustomAction","MessageActionChatJoinedByRequest","MessageActionGameScore","MessageActionWebViewDataSent","MessageActionGiftPremium","cryptoCurrency","cryptoAmountWithDecimals","cryptoAmount","divide","toFixed","MessageActionTopicCreate","MessageActionTopicEdit","MessageActionSuggestProfilePhoto","MessageActionGiveawayLaunch","MessageActionGiftCode","viaGiveaway","unclaimed","boostPeer","MessageActionGiveawayResults","MessageActionBoostApply","boosts","unshift","buildAction","isScheduled","isInvoiceMedia","isEdited","editDate","editHide","inlineButtons","keyboardButtons","keyboardPlaceholder","isKeyboardSingleUse","isKeyboardSelective","shouldSkipBuyButton","replyMarkup","ReplyKeyboardMarkup","ReplyInlineMarkup","markup","rows","buttons","button","KeyboardButton","KeyboardButtonUrl","KeyboardButtonCallback","requiresPassword","KeyboardButtonRequestPoll","isQuiz","KeyboardButtonRequestPhone","KeyboardButtonBuy","receiptMessageId","KeyboardButtonGame","KeyboardButtonSwitchInline","query","isSamePeer","samePeer","KeyboardButtonUserProfile","KeyboardButtonSimpleWebView","KeyboardButtonWebView","KeyboardButtonUrlAuth","buttonId","every","row","placeholder","singleUse","selective","buildReplyButtons","forwardInfo","buildApiMessageForwardInfo","mediaUnread","isMediaUnread","postAuthor","groupedId","isInAlbum","shouldHideKeyboardButtons","ReplyKeyboardHide","isHideKeyboardSelective","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","hasComments","replies","comments","senderBoosts","fromBoostsApplied","savedPeerId","viewsCount","views","forwardsCount","forwards","isFromScheduled","fromScheduled","isSilent","buildApiReplyInfo","hasUnreadMention","mentioned","isMentioned","viaBotId","postAuthorTitle","buildMessageDraft","DraftMessageEmpty","savedFromPeerId","savedFromPeer","savedDate","isImported","imported","isLinkedChannelPost","fromChatId","fromMessageId","savedFromMsgId","hiddenUserName","fromName","replyHeader","MessageReplyStoryHeader","replyFrom","quote","isForumTopic","isQuote","buildNewPoll","localId","buildUploadingMedia","attachment","filename","blobUrl","previewBlobUrl","shouldSendAsFile","shouldSendAsSpoiler","quick","inputWaveform","buildApiThreadInfoFromMessage","buildApiThreadInfo","messageReplies","maxId","readMaxId","recentRepliers","apiChannelId","baseThreadInfo","messagesCount","lastReadMessageId","recentReplierIds","isCommentsInfo","originChannelId","originMessageId","threadId","buildApiUserFullInfo","mtpUserFull","fullUser","commonChatsCount","pinnedMsgId","blocked","profilePhoto","voiceMessagesForbidden","premiumGifts","fallbackPhoto","personalPhoto","translationsDisabled","storiesPinnedAvailable","contactRequirePremium","bio","pinnedMessageId","isBlocked","noVoiceMessages","hasPinnedStories","isTranslationDisabled","gift","botUrl","buildApiPremiumGiftOption","isContactRequirePremium","buildApiUser","mtpUser","support","closeFriend","UserProfilePhoto","userType","deleted","isCloseFriend","mutualContact","isContact","canEditBot","botCanEdit","canBeInvitedToGroup","botNochats","noStatus","status","botInlinePlaceholder","botPlaceholder","botAttachMenu","isAttachBot","buildApiUserStatus","mtpStatus","UserStatusEmpty","UserStatusOnline","UserStatusOffline","wasOnline","UserStatusRecently","isReadDateRestrictedByMe","byMe","UserStatusLastWeek","buildApiUsersAndStatuses","mtpUsers","userStatusesById","usersById","duplicateUser","values","buildApiWallpaper","wallpaper","WallPaperNoFile","buildApiSession","session","isCurrent","current","isOfficialApp","officialApp","isPasswordPending","passwordPending","hash","areCallsEnabled","callRequestsDisabled","areSecretChatsEnabled","encryptedRequestsDisabled","isUnconfirmed","unconfirmed","buildApiWebSession","buildApiNotifyException","showPreviews","otherSound","hasSound","NotificationSoundNone","shouldShowPreviews","buildApiCountry","country","code","iso2","defaultName","countryCode","prefixes","patterns","buildJson","json","JsonNull","JsonString","JsonBool","JsonNumber","JsonArray","el","buildApiUrlAuthResult","UrlAuthResultRequest","UrlAuthResultAccepted","UrlAuthResultDefault","buildLangPack","mtpLangPack","strings","mtpString","buildLangPackString","LangPackString","LangPackStringPluralized","buildApiPeerColorSet","colorSet","help","PeerColorSet","colors","padStart","buildApiStory","StoryItemDeleted","isDeleted","StoryItemSkipped","closeFriends","isForCloseFriends","edited","caption","privacy","public","contacts","selectedContacts","mediaAreas","sentReaction","isForContacts","isForSelectedContacts","noForwards","buildApiStoryViews","isOut","buildApiMediaArea","buildApiStoryForwardInfo","hasViewers","reactionsCount","recentViewerIds","recentViewers","viewerId","buildApiStoryView","view","blockedMyStoriesFrom","StoryView","areStoriesBlocked","isUserBlocked","StoryViewPublicForward","StoryViewPublicRepost","buildApiStealthMode","stealthMode","activeUntil","activeUntilDate","cooldownUntil","cooldownUntilDate","buildApiMediaAreaCoordinates","coordinates","x","y","rotation","area","MediaAreaVenue","MediaAreaGeoPoint","MediaAreaSuggestedReaction","dark","flipped","isDark","isFlipped","MediaAreaChannelPost","forwardHeader","modified","fromPeerId","isModified","unmuteTimers","Map","unmuteQueue","scheduleUnmute","item","onUpdate","topicId","clearTimeout","delete","pop","timer","afterNext","scheduleMutedChatUpdate","LocalUpdatePts","constructor","pts","ptsCount","LocalUpdateChannelPts","DELETE_MISSING_CHANNEL_MESSAGE_DELAY","sentMessageIds","dispatchUserAndChatUpdates","e","dispatchThreadInfoUpdates","threadInfoUpdates","sendUpdate","updater","UpdateServerTimeOffset","_serverTimeOffset","timeOffset","UpdateConnectionState","disconnected","broken","connected","UpdateNewMessage","UpdateNewScheduledMessage","UpdateNewChannelMessage","UpdateShortChatMessage","UpdateShortMessage","shouldForceReply","_entities","buildApiMessageFromShort","MessageEmpty","ReplyKeyboardForceReply","hasLocalCopy","invoiceSlug","PhotoEmpty","ChatPhotoEmpty","dcId","ChatPhoto","buildChatPhotoForLocalDb","localDbChatId","newProfilePhoto","isTopicReply","UpdateEditMessage","UpdateEditChannelMessage","UpdateMessageReactions","UpdateMessageExtendedMedia","localMessage","swapLocalInvoiceMedia","UpdateDeleteMessages","ids","UpdateDeleteScheduledMessages","UpdateDeleteChannelMessages","existingIds","missingIds","profilePhotoIds","UpdateServiceNotification","popup","notification","currentDate","inboxDate","buildApiMessageFromNotification","UpdateMessageID","UpdateShortSentMessage","add","UpdateReadMessagesContents","messageUpdate","UpdateChannelReadMessagesContents","UpdateMessagePoll","pollId","apiPoll","pollUpdate","UpdateMessagePollVote","options","UpdateChannelMessageViews","UpdateReadHistoryInbox","stillUnreadCount","UpdateReadHistoryOutbox","UpdateReadChannelInbox","UpdateReadChannelOutbox","UpdateReadChannelDiscussionInbox","UpdateReadChannelDiscussionOutbox","UpdateDialogPinned","DialogPeer","UpdatePinnedDialogs","order","dp","UpdateSavedDialogPinned","UpdatePinnedSavedDialogs","UpdateFolderPeers","folderPeers","folderPeer","UpdateDialogFilter","folder","UpdateDialogFilterOrder","orderedIds","UpdateChatParticipants","replacedMembers","UpdateChatParticipantAdd","addedMember","UpdateChatParticipantDelete","deletedMemberId","UpdatePinnedMessages","UpdatePinnedChannelMessages","messageIds","UpdateNotifySettings","NotifyPeer","payload","NotifyForumTopic","buildApiNotifyExceptionTopic","scheduleMutedTopicUpdate","UpdateChatUserTyping","interaction","parse","timestamps","t","typingStatus","UpdateChannelUserTyping","UpdateChannel","UpdateDialogUnreadMark","UpdateChatDefaultBannedRights","UpdateUserStatus","UpdateUser","UpdateUserEmojiStatus","UpdateUserName","apiUserId","updatedUser","UpdateUserPhone","UpdatePeerSettings","settings","UpdatePeerBlocked","isBlockedFromStories","UpdatePrivacy","buildPrivacyKey","UpdateDraftMessage","UpdateContactsReset","UpdateFavedStickers","UpdateRecentStickers","UpdateRecentReactions","UpdateSavedReactionTags","UpdateMoveStickerSetToTop","masks","UpdateStickerSets","UpdateStickerSetsOrder","n","UpdateNewStickerSet","StickerSet","UpdateSavedGifs","UpdateGroupCall","UpdateGroupCallConnection","UpdateGroupCallParticipants","groupCallId","UpdatePendingJoinRequests","recentRequesterIds","recentRequesters","requestsPending","UpdatePhoneCall","UpdatePhoneCallSignalingData","callId","phoneCallId","UpdateWebViewResultSent","queryId","UpdateBotMenuButton","UpdateTranscribedAudio","transcriptionId","pending","UpdateConfig","UpdateChannelPinnedTopic","UpdateChannelPinnedTopics","UpdateRecentEmojiStatuses","UpdateStory","UpdateReadStories","lastReadId","UpdateSentStoryReaction","UpdateStoriesStealthMode","UpdateAttachMenuBots","UpdateNewAuthorization","device","UpdateChannelViewForumAsMessages","isEnabled","enabled","ApiErrors","PHONE_NUMBER_INVALID","PHONE_CODE_INVALID","PASSWORD_HASH_INVALID","PHONE_PASSWORD_FLOOD","PHONE_NUMBER_BANNED","authController","onWebAuthTokenFailed","onRequestPhoneNumber","buildAuthStateUpdate","reject","onRequestCode","isCodeViaApp","onRequestPassword","hint","noReset","onRequestRegistration","onRequestQrCode","qrCode","token","onAuthError","err","errors","FloodWaitError","hours","ceil","seconds","authorizationState","provideAuthPhoneNumber","provideAuthCode","provideAuthPassword","provideAuthRegistration","registration","restartAuth","Error","restartAuthWithQr","SortedQueue","comparator","this","queue","index","binarySearch","splice","shift","clear","right","middle","comparison","COMMON_BOX_QUEUE_ID","CHANNEL_DIFFERENCE_LIMIT","UPDATE_WAIT_TIMEOUT","invoke","seqTimeout","isInited","PTS_TIMEOUTS","SEQ_QUEUE","seqStart","seq","PTS_QUEUE","applyState","commonBoxState","qts","processUpdate","isFromDifference","shouldOnlySave","scheduleGetDifference","Updates","UpdatesCombined","_isFromDifference","popSeqQueue","saveSeqUpdate","UpdateChannelTooLong","getChannelDifference","getUpdateChannelId","ptsQueue","ptsComparator","popPtsQueue","savePtsUpdate","updateChannelState","currentState","channelPtsById","scheduleGetChannelDifference","applyUpdate","updateObject","updates","localSeq","localPts","getPtsCount","timeout","async","getDifference","forceSync","isFetching","response","GetDifference","DifferenceTooLong","DifferenceEmpty","processDifference","DifferenceSlice","intermediateState","GetChannelDifference","ChannelMessagesFilterEmpty","limit","ChannelDifferenceTooLong","ChannelDifferenceEmpty","final","reset","loadRemoteState","processAffectedHistory","affected","channeId","remoteState","GetState","difference","newMessages","channelTooLongIds","otherUpdates","updateChannelId","shouldApplyImmediately","diff","cacheApi","caches","isSupported","isCacheApiSupported","catch","Type","fetch","cacheName","isHtmlAllowed","request","Request","cache","open","match","contentType","headers","Text","Blob","blob","shouldRecreate","resolvedType","Json","ArrayBuffer","arrayBuffer","save","cacheData","Response","put","remove","MEDIA_ENTITY_TYPES","JPEG_SIZE_TYPES","downloadMedia","mediaFormat","start","end","client","onProgress","fullSize","parsed","parseMediaUrl","entityType","entityId","sizeType","mediaMatchType","parsedParams","URLSearchParams","zoom","scale","downloadStaticMap","stickerSets","progressCallback","workers","getMessageMediaMimeType","downloadStickerSetThumb","getMimeType","downloadProfilePhoto","download","ApiMediaFormat","BlobUrl","Progressive","DownloadUrl","buffer","parseMedia","canCache","dataBlob","fallbackMimeType","subarray","byte","mediaMatch","ChatAbortController","AbortController","getThreadSignal","controller","threads","signal","abortThread","abort","super","DEFAULT_USER_AGENT","DEFAULT_PLATFORM","GramJsLogger","setLevel","gramJsUpdateEventBuilder","build","CHAT_ABORT_CONTROLLERS","ABORT_CONTROLLERS","setIsPremium","LOG_OUT_TIMEOUT","destroy","noLogOut","noClearLocalDb","isConnected","race","invokeRequest","auth","LogOut","resetUpdatesManager","disconnect","onSessionUpdate","sessionData","handleGramJsUpdate","UpdatesTooLong","GetFullUser","InputUserSelf","shouldThrow","handleTerminatedSession","nestedUpdate","currentUser","shouldIgnoreUpdates","shouldIgnoreErrors","abortControllerChatId","abortControllerThreadId","shouldRetryOnTimeout","abortControllerGroup","shouldReturnTrue","abortSignal","UpdateShort","isResponseUpdate","debug","isSlowMode","SendMessage","SendMedia","SendMultiMedia","hasErrorKey","dispatchErrorUpdate","invokeRequestBeacon","invokeBeacon","downloadMediaWithClient","repairFileReference","uploadFile","file","updateTwoFaSettings","abortChatRequests","abortRequestGroup","group","fetchCurrentUser","userFull","currentUserFullInfo","_currentUserId","onCurrentUserUpdate","stories","GetStoriesByID","GetMessages","InputMessageID","MessagesNotModified","setForceHttpTransport","forceHttpTransport","setAllowHttpTransport","allowHttpTransport","setShouldDebugExportedSenders","requestChannelDifference","answerCallbackButton","isGame","GetBotCallbackAnswer","fetchTopInlineBots","topPeers","GetTopPeers","botsInline","TopPeers","fetchInlineBot","resolvedPeer","ResolveUsername","fetchInlineBotResults","GetInlineBotResults","switchWebview","switchPm","nextOffset","isGallery","gallery","BotInlineMediaResult","buildApiBotInlineMediaResult","webDocument","webThumbnail","buildApiBotInlineResult","cacheTime","sendInlineBotResult","resultId","SendInlineBotResult","clearDraft","startBot","StartBot","requestWebView","theme","isFromBotMenu","RequestWebView","themeParams","fromBotMenu","WebViewResultUrl","requestSimpleWebView","isFromSwitchWebView","isFromSideMenu","RequestSimpleWebView","fromSwitchWebview","fromSideMenu","fetchBotApp","appName","GetBotApp","InputBotAppShortName","baseApp","buildApiMessagesBotApp","requestAppWebView","isWriteAllowed","RequestAppWebView","writeAllowed","prolongWebView","ProlongWebView","sendWebViewData","SendWebViewData","loadAttachBots","GetAttachMenuBots","AttachMenuBots","bots","loadAttachBot","GetAttachMenuBot","AttachMenuBotsBot","toggleAttachBot","ToggleBotInAttachMenu","requestBotUrlAuth","RequestUrlAuth","authResult","acceptBotUrlAuth","AcceptUrlAuth","requestLinkUrlAuth","acceptLinkUrlAuth","fetchBotCanSendMessage","CanSendMessage","allowBotSendMessages","AllowSendMessage","invokeWebViewCustomMethod","customMethod","parameters","InvokeWebViewCustomMethod","setBotInfo","langCode","SetBotInfo","getGroupCall","GetGroupCall","c","discardGroupCall","DiscardGroupCall","editGroupCallParticipant","presentationPaused","videoStopped","videoPaused","raiseHand","EditGroupCallParticipant","editGroupCallTitle","EditGroupCallTitle","exportGroupCallInvite","ExportGroupCallInvite","fetchGroupCallParticipants","GetGroupParticipants","leaveGroupCall","isPageUnload","LeaveGroupCall","joinGroupCall","inviteHash","JoinGroupCall","joinAs","InputPeerSelf","u","createGroupCall","CreateGroupCall","joinGroupCallPresentation","JoinGroupCallPresentation","toggleGroupCallStartSubscription","subscribed","ToggleGroupCallStartSubscription","leaveGroupCallPresentation","LeaveGroupCallPresentation","getDhConfig","dhConfig","GetDhConfig","DhConfigNotModified","g","p","random","discardCall","isBusy","DiscardCall","requestCall","RequestCall","setCallRating","rating","comment","SetCallRating","receivedCall","ReceivedCall","acceptCall","AcceptCall","confirmCall","gA","ConfirmCall","sendSignalingData","SendSignalingData","fetchChats","offsetDate","withPinned","lastLocalServiceMessageId","GetDialogs","offsetPeer","InputPeerEmpty","excludePinned","resultPinned","GetPinnedDialogs","DialogsNotModified","updateLocalDb","peersByKey","preparePeers","draftsById","dialogs","orderedPinnedIds","lastMessageByChatId","Dialog","isListed","chatIds","totalChatCount","DialogsSlice","fetchSavedChats","GetSavedDialogs","GetPinnedSavedDialogs","SavedDialogsNotModified","hasPinned","buildApiChatFromSavedDialog","SavedDialogsSlice","fetchFullChat","GetFullChannel","fullChat","ChannelFull","onlineCount","exportedInvite","slowmodeSeconds","slowmodeNextSendDate","migratedFromChatId","migratedFromMaxId","canViewParticipants","canViewStats","linkedChatId","hiddenPrehistory","availableReactions","defaultSendAs","statsDc","chatPhoto","participantsHidden","emojiset","boostsApplied","boostsUnrestrict","inviteLink","ChatInviteExported","members","fetchMembers","kickedMembers","bannedUsers","bannedStatusesById","adminMembers","adminUsers","adminStatusesById","mtpLinkedChat","statusesById","fullInfo","slowMode","nextSendDate","migratedFrom","maxMessageId","canViewMembers","canViewStatistics","isPreHistoryHidden","adminMembersById","enabledReactions","sendAsId","statisticsDcId","emojiSet","areParticipantsHidden","boostsToUnrestrict","getFullChannelInfo","GetFullChat","ChatFull","getFullChatInfo","fetchChatSettings","GetPeerSettings","searchChats","Search","q","accountPeerIds","myResults","allChats","allUsers","accountChats","r","accountUsers","globalChats","globalUsers","fetchChat","GetUsers","GetSupport","requestChatUpdate","lastLocalMessage","noLastMessage","GetPeerDialogs","InputDialogPeer","lastRemoteMessage","lastMessage","chatUpdate","saveDraft","SaveDraft","updateChatMutedState","account","InputNotifyPeer","InputPeerNotifySettings","updateTopicMutedState","InputNotifyForumTopic","createChannel","CreateChannel","broadcast","newChannel","restrictedUserIds","InviteToChannel","handleUserPrivacyRestrictedUpdates","joinChannel","JoinChannel","deleteChatUser","DeleteChatUser","deleteChat","DeleteChat","leaveChannel","LeaveChannel","deleteChannel","DeleteChannel","createGroupChat","CreateChat","newChat","editChatPhoto","inputEntity","inputPhoto","File","uploadedPhoto","InputChatUploadedPhoto","InputChatPhoto","InputChatPhotoEmpty","EditPhoto","EditChatPhoto","toggleChatPinned","shouldBePinned","ToggleDialogPin","toggleSavedDialogPinned","ToggleSavedDialogPin","toggleChatArchived","folders","EditPeerFolders","InputFolderPeer","fetchChatFolders","GetDialogFilters","defaultFolderPosition","findIndex","DialogFilterDefault","byId","fetchRecommendedChatFolders","GetSuggestedDialogFilters","editChatFolder","folderUpdate","nonContacts","groups","excludeArchived","excludeMuted","excludeRead","buildFilterFromApiFolder","deleteChatFolder","isActionSuccessful","recommendedChatFolders","sortChatFolders","UpdateDialogFiltersOrder","toggleDialogUnread","MarkDialogUnread","getChatByPhoneNumber","processResolvedPeer","ResolvePhone","getChatByUsername","togglePreHistoryHidden","TogglePreHistoryHidden","updateChatDefaultBannedRights","EditChatDefaultBannedRights","updateChatMemberBannedRights","EditBanned","updateChatAdmin","EditAdmin","updateChatTitle","EditTitle","EditChatTitle","updateChatAbout","EditChatAbout","toggleSignatures","ToggleSignatures","memberFilter","ChannelParticipantsKicked","ChannelParticipantsAdmins","ChannelParticipantsRecent","GetParticipants","ChannelParticipantsNotModified","fetchGroupsForDiscussion","GetGroupsForDiscussion","setDiscussionGroup","SetDiscussionGroup","migrateChat","MigrateChat","newChannelId","openChatByInvite","CheckChatInvite","isChannel","addChatMembers","addChatUsersResult","all","AddChatUser","flat","deleteChatMember","viewMessages","sendMessages","sendMedia","sendStickers","sendGifs","sendGames","sendInline","embedLinks","sendPolls","changeInfo","inviteUsers","pinMessages","manageTopics","sendPhotos","sendVideos","sendRoundvideos","sendAudios","sendVoices","sendDocs","sendPlain","toggleJoinToSend","ToggleJoinToSend","toggleJoinRequest","ToggleJoinRequest","currentStore","store","importChatInvite","ImportChatInvite","setChatEnabledReactions","SetChatAvailableReactions","ChatReactionsNone","toggleIsProtected","ToggleNoForwards","toggleParticipantsHidden","ToggleParticipantsHidden","toggleForum","ToggleForum","createTopic","CreateForumTopic","fetchTopics","offsetTopicId","offsetId","GetForumTopics","offsetTopic","orderByCreateDate","topics","shouldOrderByCreateDate","topic","ForumTopic","readInboxMessageIdByTopicId","fetchTopicById","GetForumTopicsByID","deleteTopic","DeleteTopicHistory","togglePinnedTopic","UpdatePinnedForumTopic","editTopic","EditForumTopic","checkChatlistInvite","chatlists","CheckChatlistInvite","ChatlistInvite","ChatlistInviteAlready","filterId","missingPeerIds","missingPeers","alreadyPeerIds","alreadyPeers","buildApiChatlistInvite","joinChatlistInvite","JoinChatlistInvite","fetchLeaveChatlistSuggestions","GetLeaveChatlistSuggestions","chatlist","InputChatlistDialogFilter","leaveChatlist","LeaveChatlist","createChalistInvite","ExportChatlistInvite","deleteChatlistInvite","DeleteExportedInvite","editChatlistInvite","EditExportedInvite","fetchChatlistInvites","GetExportedInvites","invites","togglePeerTranslations","TogglePeerTranslations","disabled","setViewForumAsMessages","ToggleViewForumAsMessages","fetchChannelRecommendations","GetChannelRecommendations","similarChannels","_chat","ChatsSlice","eligibleUpdates","UpdateGroupInvitePrivacyForbidden","reportPeer","ReportPeer","reportProfilePhoto","ReportProfilePhoto","changeSessionSettings","isConfirmed","ChangeAuthorizationSettings","confirmed","changeSessionTtl","days","SetAuthorizationTTL","authorizationTtlDays","fileBits","_defineProperty","FAST_SEND_TIMEOUT","fetchMessages","isSavedDialog","pagination","RequestClass","MAIN_THREAD_ID","GetHistory","GetSavedHistory","GetReplies","Messages","fetchMessage","MESSAGE_DELETED","mediaQueue","sendMessage","scheduledAt","noWebPage","shouldUpdateStickerSetOrder","wasDrafted","resultReplyInfo","inputInfo","buildLocalMessage","sendingState","groupIndex","groupedUploads","counter","singleMediaByIndex","localMessages","prevMediaQueue","uploadMedia","inputMedia","uploadedMedia","messageMedia","UploadMedia","fileReference","InputMediaPhoto","fetchInputMedia","InputSingleMedia","multiMedia","handleMultipleLocalMessagesUpdate","sendGroupedMedia","messagePromise","pollParams","buildInputPoll","InputMediaStory","buildInputStory","InputMediaContact","vcard","noWebpage","updateStickersetsOrder","handleLocalMessageUpdate","editMessage","newContent","mediaUpdate","mtpEntities","EditMessage","messageErr","rescheduleMessage","patchedOnProgress","progress","isCanceled","previousLocalId","buildMessageKey","getMessageKey","fetchAndUpload","fetchBlob","lastModified","blobToFile","fetchFile","shouldUploadThumb","inputFile","InputMediaUploadedPhoto","InputMediaUploadedDocument","forceFile","pinMessage","isUnpin","isOneSide","UpdatePinnedMessage","unpin","pmOneside","unpinAllMessages","UnpinAllMessages","deleteMessages","shouldDeleteForAll","DeleteMessages","revoke","deleteScheduledMessages","DeleteScheduledMessages","deleteHistory","DeleteHistory","just_clear","deleteSavedHistory","DeleteSavedHistory","reportMessages","Report","sendMessageAction","gramAction","buildSendMessageAction","SetTyping","markMessageListRead","fixedMaxId","ReadHistory","ReadDiscussion","markMessagesRead","ReadMessageContents","fetchMessageViews","shouldIncrement","chunks","chunkIds","GetMessagesViews","increment","viewsList","flatMap","viewsInfo","threadInfo","fetchDiscussionMessage","GetDiscussionMessage","addOffset","topMessages","firstMessageId","searchMessagesLocal","savedTag","minDate","maxDate","InputMessagesFilterPhotoVideo","InputMessagesFilterDocument","InputMessagesFilterUrl","InputMessagesFilterMusic","InputMessagesFilterRoundVoice","InputMessagesFilterChatPhotos","InputMessagesFilterEmpty","savedReaction","nextOffsetId","totalCount","MessagesSlice","ChannelMessages","searchMessagesGlobal","offsetRate","SearchGlobal","nextRate","fetchWebPagePreview","textWithEntities","GetWebPagePreview","sendPollVote","SendVote","closePoll","loadPollOptionResults","shouldResetVoters","GetPollVotes","votes","vote","fetchExtendedMedia","GetExtendedMedia","forwardMessages","fromChat","toChat","toThreadId","withMyScore","noAuthors","noCaptions","isCurrentUserPremium","randomIds","isAudio","asIncomingInChatWithSelf","shouldHideText","shouldDropCustomEmoji","strippedText","updatedContent","isToMainThread","buildLocalForwardedMessage","ForwardMessages","fromPeer","toPeer","dropAuthor","dropMediaCaptions","findFirstMessageIdAfterDate","fetchScheduledHistory","GetScheduledHistory","sendScheduledMessages","SendScheduledMessages","isServiceMessageWithMedia","fetchPinnedMessages","InputMessagesFilterPinned","fetchSeenBy","GetMessageReadParticipants","readDate","fetchSendAs","GetSendAs","saveDefaultSendAs","SaveDefaultSendAs","fetchSponsoredMessages","GetSponsoredMessages","SponsoredMessagesEmpty","viewSponsoredMessage","ViewSponsoredMessage","clickSponsoredMessage","ClickSponsoredMessage","readAllMentions","ReadMentions","readAllReactions","ReadReactions","fetchUnreadMentions","GetUnreadMentions","fetchUnreadReactions","GetUnreadReactions","transcribeAudio","TranscribeAudio","translateText","isMessageTranslation","toLanguageCode","TranslateText","toLang","formattedText","buildApiFormattedText","translations","isSentBefore","fetchOutboxReadDate","GetOutboxReadDate","exportMessageLink","shouldIncludeThread","shouldIncludeGrouped","ExportMessageLink","thread","grouped","inputGifBot","fetchFullUser","input","fetchCommonChats","commonChats","GetCommonChats","mtpChat","isFullyLoaded","fetchNearestCountry","dcInfo","GetNearestDc","fetchTopUsers","correspondents","fetchContactList","GetContacts","ContactsNotModified","fetchUsers","importContact","ImportContacts","ImportedContacts","updateContact","shouldSharePhoneNumber","AddContact","addPhonePrivacyException","deleteContact","DeleteContacts","fetchProfilePhotos","GetUserPhotos","userOrChat","ReportSpam","updateEmojiStatus","UpdateEmojiStatus","saveCloseFriends","userIds","EditCloseFriends","fetchCustomEmojiSets","allStickers","GetEmojiStickers","AllStickersNotModified","sets","fetchStickerSets","GetAllStickers","fetchRecentStickers","GetRecentStickers","RecentStickersNotModified","fetchFavoriteStickers","GetFavedStickers","FavedStickersNotModified","fetchFeaturedStickers","GetFeaturedStickers","FeaturedStickersNotModified","fetchFeaturedEmojiStickers","GetFeaturedEmojiStickers","faveSticker","unfave","FaveSticker","removeRecentSticker","SaveRecentSticker","unsave","clearRecentStickers","ClearRecentStickers","fetchStickers","GetStickerSet","fetchCustomEmoji","GetCustomEmojiDocuments","fetchAnimatedEmojis","InputStickerSetAnimatedEmoji","fetchAnimatedEmojiEffects","InputStickerSetAnimatedEmojiAnimations","fetchGenericEmojiEffects","InputStickerSetEmojiGenericAnimations","fetchPremiumGifts","InputStickerSetPremiumGifts","fetchDefaultTopicIcons","InputStickerSetEmojiDefaultTopicIcons","fetchDefaultStatusEmojis","InputStickerSetEmojiDefaultStatuses","searchStickers","SearchStickerSets","FoundStickerSetsNotModified","fetchSavedGifs","GetSavedGifs","SavedGifsNotModified","gifs","processGifResult","saveGif","shouldUnsave","SaveGif","installStickerSet","stickerSetId","InstallStickerSet","uninstallStickerSet","UninstallStickerSet","searchGifs","foundGif","fetchStickersForEmoji","GetStickers","StickersNotModified","fetchEmojiKeywords","fromVersion","GetEmojiKeywordsDifference","keywords","emojiKeyword","keyword","emoticons","fetchRecentEmojiStatuses","GetRecentEmojiStatuses","EmojiStatusesNotModified","documentIds","statuses","emojiStatuses","ACCEPTABLE_USERNAME_ERRORS","checkChatUsername","CheckUsername","errorMessage","setChatUsername","UpdateUsername","deactivateAllUsernames","DeactivateAllUsernames","updatePrivateLink","ExportChatInvite","fetchExportedChatInvites","admin","exportedInvites","GetExportedChatInvites","editExportedChatInvite","EditExportedChatInvite","ExportedChatInvite","replaceInvite","oldInvite","newInvite","ExportedChatInviteReplaced","exportChatInvite","deleteExportedChatInvite","DeleteExportedChatInvite","deleteRevokedExportedChatInvites","DeleteRevokedExportedChatInvites","fetchChatInviteImporters","offsetUser","isRequested","GetChatInviteImporters","InputUserEmpty","importers","importer","viaChatlist","isFromChatList","buildChatInviteImporter","hideChatJoinRequest","isApproved","HideChatJoinRequest","approved","hideAllChatJoinRequests","HideAllChatJoinRequests","hideChatReportPanel","HidePeerSettingsBar","buildEmojiSounds","appConfig","emojies_sounds","l","access_hash","alloc","getLimit","fallbackKey","BETA_LANG_CODES","updateProfile","UpdateProfile","checkUsername","updateUsername","updateProfilePhoto","isFallback","InputPhotoEmpty","UpdateProfilePhoto","fallback","uploadProfilePhoto","videoTs","UploadProfilePhoto","uploadContactProfilePhoto","isSuggest","UploadContactProfilePhoto","suggest","deleteProfilePhotos","photoIds","DeletePhotos","fetchWallpapers","GetWallPapers","WallPapersNotModified","filteredWallpapers","wallpapers","WallPaper","pattern","uploadWallpaper","UploadWallPaper","WallPaperSettings","fetchBlockedUsers","isOnlyStories","GetBlocked","myStoriesFrom","blockedIds","BlockedSlice","blockUser","Block","unblockUser","Unblock","fetchAuthorizations","GetAuthorizations","authorizations","ttlDays","terminateAuthorization","ResetAuthorization","terminateAllAuthorizations","ResetAuthorizations","fetchWebAuthorizations","GetWebAuthorizations","webAuthorizations","terminateWebAuthorization","ResetWebAuthorization","terminateAllWebAuthorizations","ResetWebAuthorizations","fetchNotificationExceptions","GetNotifyExceptions","compareSound","fetchNotificationSettings","isMutedContactSignUpNotification","privateContactNotificationsSettings","groupNotificationsSettings","broadcastNotificationsSettings","GetContactSignUpNotification","GetNotifySettings","InputNotifyUsers","InputNotifyChats","InputNotifyBroadcasts","privateSilent","privateMuteUntil","privateShowPreviews","groupSilent","groupMuteUntil","groupShowPreviews","broadcastSilent","broadcastMuteUntil","broadcastShowPreviews","hasContactJoinedNotifications","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","updateContactSignUpNotification","SetContactSignUpNotification","updateNotificationSettings","fetchLanguages","langpack","GetLanguages","langPack","fetchLangPack","sourceLangPacks","collections","GetLangPack","reverse","fetchLangStrings","GetStrings","fetchPrivacySettings","GetPrivacy","registerDevice","secret","getAuthKey","getKey","RegisterDevice","tokenType","appSandbox","otherUids","unregisterDevice","UnregisterDevice","setPrivacySettings","SetPrivacy","updateIsOnline","isOnline","UpdateStatus","offline","fetchContentSettings","GetContentSettings","isSensitiveEnabled","sensitiveEnabled","canChangeSensitive","sensitiveCanChange","updateContentSettings","SetContentSettings","fetchAppConfig","GetAppConfig","AppConfigNotModified","config","resultHash","emojiSounds","seenByMaxChatMembers","chat_read_mark_size_threshold","seenByExpiresAt","chat_read_mark_expire_period","readDateExpiresAt","pm_read_date_expire_period","autologinDomains","autologin_domains","urlAuthDomains","url_auth_domains","maxUniqueReactions","reactions_uniq_max","premiumBotUsername","premium_bot_username","premiumInvoiceSlug","premium_invoice_slug","premiumPromoOrder","premium_promo_order","isPremiumPurchaseBlocked","premium_purchase_blocked","defaultEmojiStatusesStickerSetId","default_emoji_statuses_stickerset_id","topicsPinnedLimit","topics_pinned_limit","maxUserReactionsDefault","reactions_user_max_default","maxUserReactionsPremium","reactions_user_max_premium","hiddenMembersMinCount","hidden_members_group_size_min","canDisplayAutoarchiveSetting","autoarchive_setting_available","limits","stories_all_hidden","storyExpirePeriod","story_expire_period","storyViewersExpirePeriod","story_viewers_expire_period","storyChangelogUserId","stories_changelog_user_id","groupTranscribeLevelMin","group_transcribe_level_min","buildAppConfig","fetchConfig","GetConfig","defaultReaction","reactionsDefault","gifSearchUsername","maxGroupSize","chatSizeMax","autologinToken","buildApiConfig","fetchPeerColors","GetPeerColors","wrapper","PeerColors","colorId","darkColors","buildApiPeerColors","fetchCountryList","countryList","GetCountriesList","CountriesList","nonHiddenCountries","phoneCodes","countryCodes","localeCompare","general","buildApiCountryList","fetchGlobalPrivacySettings","GetGlobalPrivacySettings","shouldArchiveAndMuteNewNonContact","archiveAndMuteNewNoncontactPeers","shouldHideReadMarks","hideReadMarks","shouldNewNonContactPeersRequirePremium","newNoncontactPeersRequirePremium","updateGlobalPrivacySettings","SetGlobalPrivacySettings","GlobalPrivacySettings","toggleUsername","ToggleUsername","reorderUsernames","ReorderUsernames","EMAIL_UNCONFIRMED","EMAIL_HASH_EXPIRED","NEW_SALT_INVALID","NEW_SETTINGS_INVALID","CODE_INVALID","emailCodeController","getPasswordInfo","GetPassword","hasPassword","onRequestEmailCode","checkPassword","currentPassword","isCheckPassword","onError","clearPassword","updatePassword","email","newPassword","emailCodeCallback","onEmailCodeError","updateRecoveryEmail","provideRecoveryEmailCode","sendWatchingEmojiInteraction","sendEmojiInteraction","v","fetchAvailableReactions","GetAvailableReactions","AvailableReactionsNotModified","sendReaction","shouldAddToRecent","SendReaction","addToRecent","fetchMessageReactions","GetMessagesReactions","fetchMessageReactionsList","GetMessageReactionsList","setDefaultReaction","SetDefaultReaction","fetchTopReactions","GetTopReactions","ReactionsNotModified","fetchRecentReactions","GetRecentReactions","clearRecentReactions","ClearRecentReactions","fetchDefaultTagReactions","GetDefaultTagReactions","fetchSavedReactionTags","GetSavedReactionTags","SavedReactionTagsNotModified","tags","updateSavedReactionTag","UpdateSavedReactionTag","buildApiPostInteractionCounter","PostInteractionCountersMessage","PostInteractionCountersStory","buildPostsStatistics","stats","viewsGraph","buildGraph","reactionsGraph","reactionsByEmotionGraph","buildMessagePublicForwards","buildApiMessagePublicForward","buildStoryPublicForwards","forward","PublicForwardMessage","isPercentage","columns","hasSecondYAxis","y_scaled","types","y0","zoomToken","labelFormatter","xTickFormatter","tooltipFormatter","xTooltipFormatter","labels","hideCaption","subchart","show","isStacked","stacked","datasets","names","substring","indexOf","calculateMinimapRange","defaultZoom","range","minIndex","maxIndex","minimapRange","begin","labelFromIndex","labelToIndex","buildStatisticsOverview","previous","change","percentage","abs","buildStatisticsPercentage","part","total","fetchChannelStatistics","GetBroadcastStats","growthGraph","followersGraph","muteGraph","topHoursGraph","languagesGraph","viewsBySourceGraph","newFollowersBySourceGraph","interactionsGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","followers","viewsPerPost","sharesPerPost","enabledNotifications","reactionsPerPost","viewsPerStory","sharesPerStory","reactionsPerStory","recentPosts","recentPostsInteractions","fetchGroupStatistics","GetMegagroupStats","membersGraph","messagesGraph","actionsGraph","viewers","posters","fetchMessageStatistics","GetMessageStats","fetchMessagePublicForwards","GetMessagePublicForwards","fetchStatisticsAsyncGraph","LoadAsyncGraph","fetchStoryStatistics","GetStoryStats","fetchStoryPublicForwards","GetStoryPublicForwards","publicForwards","currentPhoneCallState","PhoneCallState","waitForState","resolveState","pBN","Helpers","randomBN","pLast","randomLast","emojiData","emojiOffsets","authKey","fingerprint","emojiCount","partOffset","byteLength","and","shiftLeft","or","modPow","generateEmojiFingerprint","AuthKey","setKey","MTProtoState","Logger","encode","seqArray","Uint32Array","encodedData","encryptMessageData","decode","decryptMessageData","createPhoneCallState","destroyPhoneCallState","encodePhoneCallData","decodePhoneCallData","confirmPhoneCall","acceptPhoneCall","requestPhoneCall","fetchAllStories","stateHash","isFirstRequest","GetAllStories","AllStoriesNotModified","peerStories","allUserStories","buildApiPeerStories","pinnedIds","lastUpdatedAt","dataAcc","maxReadId","hasMore","fetchPeerStories","GetPeerStories","lastReadStoryId","fetchPeerPinnedStories","fetchCommonStoriesRequest","method","GetPinnedStories","fetchStoriesArchive","GetStoriesArchive","fetchPeerStoriesByIds","currentId","viewStory","IncrementStoryViews","markStoryRead","ReadStories","deleteStory","DeleteStories","toggleStoryPinned","TogglePinned","fetchStoryViewList","areJustContacts","areReactionsFirst","GetStoryViewsList","justContacts","reactionsFirst","fetchStoriesViews","storyIds","GetStoriesViews","fetchStoryLink","ExportStoryLink","reportStory","editStoryPrivacy","EditStory","toggleStoriesHidden","TogglePeerStoriesHidden","fetchStoriesMaxIds","GetPeerMaxIDs","sendStoryReaction","activateStealthMode","isForPast","isForFuture","ActivateStealthMode","past","future","buildShippingOptions","shippingOptions","prices","ac","cur","label","buildApiReceipt","receipt","shipping","credentialsTitle","tipAmount","mappedPrices","shippingPrices","shippingMethod","buildApiPaymentForm","form","formId","canSaveCredentials","passwordMissing","isPasswordMissing","providerId","nativeProvider","nativeParams","savedInfo","savedCredentials","nameRequested","isNameRequested","phoneRequested","isPhoneRequested","emailRequested","isEmailRequested","shippingAddressRequested","isShippingAddressRequested","flexible","isFlexible","phoneToProvider","shouldSendPhoneToProvider","emailToProvider","shouldSendEmailToProvider","cleanedInfo","nativeData","invoiceContainer","needCardholderName","need_cardholder_name","needCountry","need_country","needZip","need_zip","publishableKey","publishable_key","publicToken","public_token","credentials","buildApiInvoiceFromForm","recurring","termsUrl","maxTipAmount","suggestedTipAmounts","isRecurring","tip","buildApiPremiumPromo","promo","statusText","statusEntities","videoSections","periodOptions","buildApiPremiumSubscriptionOption","canPurchaseUpgrade","buildApiMyBoost","myBoost","slot","buildApiCheckedGiftCode","giftcode","giveawayMsgId","toId","usedDate","usedAt","isFromGiveaway","giveawayMessageId","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","payments","ValidateRequestedInfo","sendPaymentForm","requestedInfoId","shippingOptionId","savedCredentialId","temporaryPassword","inputCredentials","InputPaymentCredentialsSaved","tmpPassword","InputPaymentCredentials","SendPaymentForm","PaymentVerificationNeeded","getPaymentForm","GetPaymentForm","getReceipt","GetPaymentReceipt","fetchPremiumPromo","GetPremiumPromo","fetchTemporaryPaymentPassword","ttl","getTmpPassword","getTemporaryPaymentPassword","validUntil","fetchMyBoosts","GetMyBoosts","myBoosts","applyBoost","slots","ApplyBoost","fetchBoostsStatus","GetBoostsStatus","boostStatus","boostUrl","currentLevelBoosts","nextLevelBoosts","premiumAudience","hasMyBoost","premiumSubscribers","buildApiBoostsStatus","fetchBoostsList","GetBoostsList","userBoosts","boost","boosterIds","boosters","fetchGiveawayInfo","GetGiveawayInfo","GiveawayInfo","adminDisallowedChatId","disallowedCountry","joinedTooEarlyDate","participating","preparingResults","isParticipating","isPreparingResults","activatedCount","finishDate","giftCodeSlug","isWinner","buildApiGiveawayInfo","checkGiftCode","CheckGiftCode","applyGiftCode","ApplyGiftCode","initApi","_onUpdate","initialArgs","initialLocalDb","initUpdater","handleUpdate","initAuth","initChats","initMessages","initUsers","initStickers","initManagement","initTwoFaSettings","initBots","initCalls","initPayments","userAgent","maxBufferSize","webAuthToken","mockScenario","shouldForceHttpTransport","shouldAllowHttpTransport","shouldDebugExportedSenders","sessions","CallbackSession","TelegramClient","deviceModel","navigator","systemVersion","appVersion","useWSS","additionalDcsDisabled","testServers","addEventHandler","setPingCallback","phoneCode","firstAndLastNames","initialMethod","shouldThrowIfUnauthorized","webAuthTokenFailed","getSessionData","invokeReq","initUpdatesManager","initClient","flushUpdatesOnTickEnd","throttleId","pendingUpdates","currentThrottleId","currentUpdates","flushUpdatesThrottled","ORIGINAL_FUNCTIONS","onerror","sendToOrigin","addEventListener","callbackState","onmessage","withCallback","callbackArgs","lastArg","fnName","methods","callApi","sendUpdatesOnTickEnd","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","TypeError","UserFull","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","stripped","header","getDC","downloadDC","ipAddress","Deferred","promise","resolved","EMOJI_EXCEPTIONS","fixNonStandardEmoji","EMOJI_REGEX","regex","replacement","RE_EMOJI_ONLY","RegExp","twemojiRegex","lines","textWithoutNewlines","DETECT_UP_TO","countPerLine","line","exec","lastIndex","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","m","__webpack_exports__","O","priority","notFulfilled","Infinity","fulfilled","j","getter","__esModule","d","definition","defineProperty","enumerable","f","chunkId","promises","miniCssF","globalThis","Function","obj","prototype","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime"],"sourceRoot":""}