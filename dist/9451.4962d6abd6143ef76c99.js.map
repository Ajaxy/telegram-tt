{"version":3,"file":"9451.4962d6abd6143ef76c99.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.module.scss?d42b","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModalHeader.module.scss?2307","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModalHeader.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.module.scss?525c","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.tsx"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { type MediaViewerMedia, MediaViewerOrigin } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isGif?: boolean;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(\n  global: GlobalState, origin?: MediaViewerOrigin, params?: MediaViewerItem,\n): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    const media = params.media[params.mediaIndex];\n    return {\n      media,\n      isGif: media.mediaType === 'video' && media.isGif,\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n        isGif: extendedVideo?.isGif,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isGif: video?.isGif,\n      isSingle: video?.isGif && origin !== MediaViewerOrigin.SharedMedia,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat, type ApiMessageSearchType } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const contentType: ApiMessageSearchType = isGif ? 'gif' : 'media';\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize || FALLBACK_DIMENSIONS;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    contentType,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, origin, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, origin, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageContentIds,\n  getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    contentType,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getMessageContentIds(chatMessages || {}, collectedMessageIds || [], contentType);\n  }, [chatMessages, collectedMessageIds, contentType, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div\n        className=\"media-viewer-head\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, origin, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n        chatId,\n        threadId,\n        messageId,\n        message: undefined,\n        collectedMessageIds: undefined,\n        chatMessages: undefined,\n        sponsoredMessage: undefined,\n        withDynamicLoading,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, origin, currentItem);\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const resultsByType = currentSearch?.resultsByType;\n        const { foundIds } = (viewableMedia?.isGif ? resultsByType?.gif : resultsByType?.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n      canUpdateMedia: undefined,\n      avatar: undefined,\n      avatarOwner: undefined,\n      profilePhotos: undefined,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): Complete<StateProps> => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): Complete<StateProps> => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig.storyChangelogUserId,\n    viewersExpirePeriod: appConfig.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpireDate?: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpireDate,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(viewersExpireDate) && viewersExpireDate < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n  const storyExpireDate = story?.['@type'] === 'story' ? story.expireDate : undefined;\n\n  return {\n    views,\n    viewersExpireDate: storyExpireDate ? (storyExpireDate + appConfig.storyViewersExpirePeriod) : undefined,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      isLowStackPriority={isLowStackPriority}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang(\n          'AreYouSureShareMyContactInfoBot',\n          undefined,\n          { withNodes: true, withMarkdown: true, renderTextFilters: ['br', 'emoji'],\n          })}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      changeWebAppModalState({ state: 'minimized' });\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={lang('AriaMiniApp', { bot: bot?.firstName })}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title}\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n          hasAbsoluteCloseButton\n          onClose={handleAppPopupModalClose}\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        textParts={lang(\n          'AreYouSureShareMyContactInfoBot',\n          undefined,\n          { withNodes: true, withMarkdown: true, renderTextFilters: ['br', 'emoji'],\n          })}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma, hex2rgbaObj } from '../../../util/colors';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hex2rgbaObj(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hex2rgbaObj, lerpRgbaObj } from '../../../util/colors.ts';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hex2rgbaObj);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgbaObj(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_COLORS = ['#A667FF', '#55A5FF'];\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_STROKE_WIDTH = 0.25 * REM;\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + CIRCLE_STROKE_WIDTH;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE,\n      strokeWidth: CIRCLE_STROKE_WIDTH,\n      segmentsCount: CIRCLE_SEGMENTS,\n      colorStops: STORY_COLORS,\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectCustomEmoji,\n  selectIsCurrentUserPremium,\n  selectStickerSet,\n  selectTabState,\n  selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift && gift.type !== 'starGiftUnique' && gift.perUserTotal) {\n      return lang('DescriptionGiftPremiumRequired2', { count: gift.perUserTotal }, {\n        pluralValue: gift.perUserTotal,\n      });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? selectCustomEmoji(global, fromUser.emojiStatus.documentId)\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig.limits,\n    premiumSlug: global.appConfig.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig.premiumBotUsername,\n    premiumPromoOrder: global.appConfig.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CountryPickerModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CountryPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CountryPickerModal = useModuleLoader(Bundles.Extra, 'CountryPickerModal', !isOpen);\n\n  return CountryPickerModal ? <CountryPickerModal {...props} /> : undefined;\n};\n\nexport default CountryPickerModalAsync;\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): Complete<StateProps> => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {\n      members: undefined,\n      adminMembersById: undefined,\n    };\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal.async';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): Complete<StateProps> => {\n    const { limits } = global.appConfig;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport GiftEffectWrapper from './gift/GiftEffectWrapper';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = stickerSet.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            const component = (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n              />\n            );\n\n            if (withSparkles) {\n              return (\n                <GiftEffectWrapper className=\"gift-effect-wrapper\" withSparkles>\n                  {component}\n                </GiftEffectWrapper>\n              );\n            }\n\n            return component;\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): Complete<StateProps> => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const minLevelToRestrictAds = global.appConfig.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            onClearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\n// Add 1 minute if time is less than server min, to allow user to send the message\nconst FUTURE_TIME_ADJUSTMENT = 1 * 60;\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate\n        ? Math.max(scheduleDate / 1000, getServerTime() + futureMin + FUTURE_TIME_ADJUSTMENT)\n        : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig.starsSuggestedPostAmountMax;\n    const minStarsAmount = appConfig.starsSuggestedPostAmountMin;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n\n    const tonMaxAmount = appConfig.tonSuggestedPostAmountMax;\n    const tonMinAmount = appConfig.tonSuggestedPostAmountMin;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig.starsSuggestedPostCommissionPermille;\n    const tonCommissionPermille = appConfig.tonSuggestedPostCommissionPermille;\n    const minAge = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('ChatPermissionNotAvailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('SendMediaPermissionPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('SendMediaPermissionVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('SendMediaPermissionStickersGifs')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('SendMediaPermissionAudios')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('SendMediaPermissionFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('SendMediaPermissionVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('SendMediaPermissionRoundVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('SendMediaPermissionWebPages')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('SendMediaPermissionPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('UserRestrictionsCreateTopics')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasIpRevealingMedia,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutFiles?: boolean;\n  hasIpRevealingMedia?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutFiles,\n  hasIpRevealingMedia,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutFiles && hasIpRevealingMedia) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasIpRevealingMedia = selectedMessageIds && chatId\n      ? selectHasIpRevealingMedia(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutFiles,\n      hasIpRevealingMedia,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {\n        seenByDates: undefined,\n      };\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): Complete<StateProps> => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): Complete<StateProps> => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutFiles?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutFiles,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback.ts';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, []);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView, updateChatMutedState, openQuickPreview } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const handleUnmute = useLastCallback(() => {\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey && chat && !chat.isForum) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId });\n      return;\n    }\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(() => {\n    onClick(chatId);\n  });\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(oldLang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const { openQuickPreview } = getActions();\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    if (e.altKey) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId, threadId: topicId });\n      return;\n    }\n    onClick(topicId);\n  }, [chatId, topicId, onClick, openQuickPreview]);\n\n  const buttonRef = useSelectWithEnter(() => onClick(topicId));\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): Complete<StateProps> => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatListSearchNoResults')}\n            description={lang('ChatListSearchNoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchResultTopics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={lang('ChatListSearchNoResults')}\n          description={lang('ChatListSearchNoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchResultMyChannels' : 'DialogListSearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang('DialogListSearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchResultRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {lang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutFiles,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={lang('ChatListSearchNoResults')}\n                description={lang('ChatListSearchNoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { FOLDER_TITLE_MAX_LENGTH, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n  isCurrentUserPremium: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst FOLDER_COLORS = [0, 1, 2, 3, 4, 5, 6];\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            maxLength={FOLDER_TITLE_MAX_LENGTH}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3 color-picker-title\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorTitle')}\n            <div className={buildClassName(\n              'color-picker-selected-color',\n              isCurrentUserPremium && state.folder.color !== undefined && state.folder.color !== -1\n                ? getApiPeerColorClass({ color: state.folder.color })\n                : 'color-picker-item-disabled',\n            )}\n            >\n              {renderTextWithEntities({\n                text: state.folder.title.text,\n                entities: state.folder.title.entities,\n                noCustomEmojiPlayback: state.folder.noTitleAnimations,\n              })}\n            </div>\n          </h4>\n          <div className=\"color-picker\">\n            {FOLDER_COLORS.map((color) => (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => {\n                  if (!isCurrentUserPremium) {\n                    openPremiumModal();\n                    return;\n                  }\n\n                  dispatch({ type: 'setColor', payload: color });\n                }}\n                className={buildClassName(\n                  'color-picker-item',\n                  getApiPeerColorClass({ color }),\n                  !isCurrentUserPremium && 'color-picker-item-hover-disabled',\n                  color === state.folder.color && isCurrentUserPremium && 'color-picker-item-active',\n                )}\n              />\n            ))}\n            <button\n              type=\"button\"\n              onClick={() => {\n                if (!isCurrentUserPremium) {\n                  openPremiumModal();\n                  return;\n                }\n\n                dispatch({ type: 'setColor', payload: undefined });\n              }}\n              className={buildClassName(\n                'color-picker-item',\n                'color-picker-item-none',\n                (state.folder.color === undefined || state.folder.color === -1 || !isCurrentUserPremium)\n                && 'color-picker-item-active',\n              )}\n            >\n              {isCurrentUserPremium ? (\n                <Icon name=\"close\" className=\"color-picker-item-none-icon\" />\n              ) : (\n                <Icon name=\"lock-badge\" className=\"color-picker-item-none-icon\" />\n              )}\n            </button>\n          </div>\n          <p className=\"settings-item-description mb-0\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorHint')}\n          </p>\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): Complete<StateProps> => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n      isCurrentUserPremium,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n  areTagsEnabled?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n  areTagsEnabled,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n    toggleDialogFilterTags,\n    openPremiumModal,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        color: folder.color,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleToggleTags = useCallback(() => {\n    if (!isPremium) {\n      return;\n    }\n\n    toggleDialogFilterTags({ isEnabled: !areTagsEnabled });\n  }, [areTagsEnabled, isPremium, toggleDialogFilterTags]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Move icon into button prop\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            const shouldRenderColor = folder?.color !== undefined && folder.color !== -1 && isPremium;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: ${shouldRenderColor ? '3.5rem' : '3rem'};`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n\n                  {\n                    shouldRenderColor && (\n                      <div className={buildClassName(\n                        'settings-folders-color-circle',\n                        getApiPeerColorClass({ color: folder.color }),\n                      )}\n                      />\n                    )\n                  }\n\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              {lang('SettingsFoldersEmpty')}\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n      <div className=\"settings-item pt-3\">\n        <div className=\"settings-item-relative\">\n          <Checkbox\n            label={lang('ShowFolderTags')}\n            subLabel={lang('ShowFolderTagsHint')}\n            checked={isPremium && areTagsEnabled}\n            onChange={handleToggleTags}\n            onClickLabel={(event) => {\n              if (!isPremium) {\n                event.preventDefault();\n                openPremiumModal();\n              }\n            }}\n          />\n          {!isPremium && <Icon name=\"lock-badge\" className=\"settings-folders-lock-icon\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n      areTagsEnabled,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      areTagsEnabled,\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title: { text: title } } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    dispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [dispatch, handleReset]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  isActive?: boolean;\n  onSubmit: (password: string) => void;\n  onClearError?: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder,\n  hint,\n  submitLabel,\n  onSubmit,\n  onClearError,\n  onReset,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(lang('SettingsPasswordEqual'));\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword, lang]);\n\n  const handleClearError = useCallback(() => {\n    if (onClearError) {\n      onClearError();\n    }\n    setValidationError('');\n  }, [onClearError]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder || lang('CurrentPasswordPlaceholder')}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel}\n          onClearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onStart: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          {lang('SettingsPasscodeStart1', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SettingsPasscodeStart2', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.passcode } as Complete<StateProps>),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreviewTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreviewTerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettingsLastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreviewApp')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n        {renderingSession?.ip && (\n          <>\n            <dt>{lang('SessionPreviewIp')}</dt>\n            <dd>{renderingSession.ip}</dd>\n          </>\n        )}\n\n        <dt>{lang('SessionPreviewLocation')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreviewIpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessionsViewAcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptSecret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptCalls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['activeSessions'];\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', { count: 1 }, { pluralValue: 1 }),\n      value: '7',\n    }, {\n      label: lang('Months', { count: 1 }, { pluralValue: 1 }),\n      value: '30',\n    }, {\n      label: lang('Months', { count: 3 }, { pluralValue: 3 }),\n      value: '90',\n    }, {\n      label: lang('Months', { count: 6 }, { pluralValue: 6 }),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', { count: 1 }, { pluralValue: 1 }),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessionsCurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: lang('SessionTerminate'),\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(oldLang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => global.activeSessions as Complete<StateProps>,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): Complete<StateProps> => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser || {};\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = currentUser && getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental = ({\n  isActive,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n  onReset,\n}: OwnProps & StateProps) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const accounts = useMultiaccountInfo();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true, true);\n  }, [accounts]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          href={newAccountUrl}\n          icon=\"add-user\"\n        >\n          <div className=\"title\">Login on Test Server</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((averageColor) => {\n          setThemeSettings({\n            theme: themeRef.current!,\n            backgroundColor: rgb2hex(averageColor),\n            patternColor: getPatternColor(averageColor),\n          });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsv2rgb, rgb2hex, rgb2hsv,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSV = rgb2hsv(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsv, setHsv] = useState(getInitialHsv(backgroundColor));\n  // Cache for drag handlers\n  const hsvRef = useRef(hsv);\n  useEffect(() => {\n    hsvRef.current = hsv;\n  }, [hsv]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsv2positions(hsvRef.current, rectsRef.current!);\n\n      setHsv(positions2hsv({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsv2positions(hsvRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsv(positions2hsv({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsv2positions(hsv, rectsRef.current) : {};\n  const hex = rgb2hex(hsv2rgb(hsv));\n  const hue = hsv[0];\n  const hueHex = rgb2hex(hsv2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsv2rgb(hsv);\n    const color = rgb2hex(rgb);\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsv, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsv(rgb2hsv(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsv(rgb2hsv(hex2rgb(hexValue)));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsv(rgb2hsv(hex2rgb(e.currentTarget.dataset.color!)));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: ${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: ${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === hex ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsv(backgroundColor?: string) {\n  return backgroundColor?.startsWith('#')\n    ? rgb2hsv(hex2rgb(backgroundColor))\n    : DEFAULT_HSV;\n}\n\nfunction hsv2positions(hsv: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsv[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsv[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsv[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsv(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsv2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsv2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/profile/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            isForSettings\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const areChannelsMuted = Boolean(notifyDefaults?.channels?.mutedUntil);\n  const areGroupsMuted = Boolean(notifyDefaults?.groups?.mutedUntil);\n  const areUsersMuted = Boolean(notifyDefaults?.users?.mutedUntil);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(!areUsersMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areUsersMuted}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areUsersMuted}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(!areGroupsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areGroupsMuted}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areGroupsMuted}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(!areChannelsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areChannelsMuted}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areChannelsMuted}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n      notifyDefaults: global.settings.notifyDefaults,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">{lang('SettingsPerformanceGranularTitle')}</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: appConfig.canDisplayAutoarchiveSetting || isCurrentUserPremium,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      } as Complete<StateProps>;\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: ApiReaction;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction?.type === 'emoji' ? selectedReaction.emoticon : undefined}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  codeLength?: number;\n  recoveryEmail?: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.twoFaSettings } as Complete<StateProps>),\n)(SettingsTwoFa));\n","import type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MUTE_INDEFINITE_TIMESTAMP } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MUTE_INDEFINITE_TIMESTAMP;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { UNMUTE_TIMESTAMP } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {} as Complete<StateProps>;\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const chatInfo = selectTabState(global).chatInfo;\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: chatInfo.isOpen && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig;\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig;\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type React from '../../../lib/teact/teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachment, ApiChatMember, ApiMessage, ApiSticker } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n  shouldSaveAttachmentsCompression?: boolean;\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSaveAttachmentsCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        ...(shouldSaveAttachmentsCompression && {\n          defaultAttachmentCompression: attachmentSettings.shouldCompress ? 'compress' : 'original',\n        }),\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const anyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, anyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(\n    lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    },\n  ) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      hasAbsoluteCloseButton={Boolean(renderingAttachments)}\n      noBackdropClose\n      isLowStackPriority\n      onClose={onClear}\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const { shouldSaveAttachmentsCompression } = selectTabState(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n      shouldSaveAttachmentsCompression,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount: number;\n  maxTitleLength: number;\n  maxItemLength: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount,\n  maxTitleLength,\n  maxItemLength,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const modalTitle = isAddTaskMode ? 'TitleAppendToDoList'\n      : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(modalTitle)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  const moreTasksCount = maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount2', {\n          count: moreTasksCount,\n        }, {\n          pluralValue: moreTasksCount,\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig.todoItemsMax,\n      maxTitleLength: appConfig.todoTitleLengthMax,\n      maxItemLength: appConfig.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(SymbolMenuTabs.Stickers);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentCustomEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip no-scrollbar',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  const lang = useLang();\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=\"${formattedLinkUrl}\" class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      if (!linkUrl.trim()) return;\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingSpoilerAria')}\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingBoldAria')}\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingItalicAria')}\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingUnderlineAria')}\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingStrikethroughAria')}\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingMonospaceAria')}\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('FormattingAddLinkAria')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder={lang('FormattingEnterUrl')}\n              autoComplete=\"off\"\n              spellCheck={IS_TAURI ? false : undefined}\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...emojis, ...customEmojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip no-scrollbar',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm || switchWebview)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): Complete<StateProps> => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang(\n            'ChannelStatsViewsCount',\n            { count: postStatistic.viewsCount },\n            { pluralValue: postStatistic.viewsCount },\n          )}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): Complete<StateProps> => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  currentBio,\n  isActive,\n  maxBioLength,\n  onClose,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): Complete<StateProps> => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                className=\"align-checkbox-with-list-buttons\"\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions } = global.appConfig;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { MUTE_INDEFINITE_TIMESTAMP, SERVICE_NOTIFICATIONS_USER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n    updateChatMutedState,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, markProfileFieldsTouched, unmarkProfileFieldsTouched] = useFlag();\n  const [error, setError] = useState<string | undefined>();\n  const [isNotificationsTouched, markNotificationsTouched, unmarkNotificationsTouched] = useFlag();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    unmarkProfileFieldsTouched();\n    unmarkNotificationsTouched();\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileFieldsTouched();\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    markProfileFieldsTouched();\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    markNotificationsTouched();\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n\n    if (isNotificationsTouched) {\n      updateChatMutedState({\n        chatId: userId, mutedUntil: isNotificationsEnabled ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP,\n      });\n    }\n  }, [firstName, isNotificationsEnabled, isNotificationsTouched, lastName, userId]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index';\nimport type { ManagementScreens } from '../../../types/index';\nimport { ChatCreationProgress } from '../../../types/index';\n\nimport { getActions, withGlobal } from '../../../global/index';\nimport { selectChat, selectTabState } from '../../../global/selectors/index';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        onClearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport focusNoScroll from '../../util/focusNoScroll';\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n  isActive?: boolean;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange, isActive }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!isActive || IS_TOUCH_ENV) {\n      return;\n    }\n\n    requestMeasure(() => {\n      focusNoScroll(cardNumberRef.current);\n    });\n  }, [isActive]);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n  isActive?: boolean;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n  isActive,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n          isActive={isActive}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport focusNoScroll from '../../util/focusNoScroll';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [inputRef]);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (form?.savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: form.savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, form?.savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep, isActive?: boolean) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={form!.savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n            isActive={isActive}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          {lang('PaymentsProvidesNotSupported', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          {(isActive) => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step, isActive)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const freezeUntilDate = global.appConfig.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ndqkeHwR\",\"header\":\"ChJT6ggP\",\"description\":\"ravQhVQQ\",\"descriptionPreview\":\"_K5HhOM0\",\"negative\":\"X6iX4F56\",\"previewLink\":\"yY4hj8r_\",\"backLink\":\"dcNVNCXo\",\"title\":\"IvsV0tkW\",\"ratingProgress\":\"XYpzs7CQ\",\"withPreview\":\"UgviXkNW\",\"subtitle\":\"OvdHupR0\",\"footer\":\"XtZPIDLP\",\"badge\":\"JdeFDQBI\",\"understoodIcon\":\"Lwz8rpdL\",\"badgeAdded\":\"Lr6JUU14\",\"badgeDeducted\":\"OxZxdqcn\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsRating, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress, { type AnimationDirection } from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './ProfileRatingModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['profileRatingModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  currentUserId?: string;\n  starsRating?: ApiStarsRating;\n  pendingRating?: ApiStarsRating;\n  pendingRatingDate?: number;\n};\n\nconst ProfileRatingModal = ({\n  modal,\n  user,\n  currentUserId,\n  starsRating,\n  pendingRating,\n  pendingRatingDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeProfileRatingModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const [showFutureRating, setShowFutureRating] = useState(false);\n\n  const handleClose = useLastCallback(() => {\n    closeProfileRatingModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShowFutureRating(false);\n    }\n  }, [isOpen]);\n\n  const handleShowFuture = useLastCallback(() => {\n    setShowFutureRating(true);\n  });\n\n  const handleShowCurrent = useLastCallback(() => {\n    setShowFutureRating(false);\n  });\n\n  const renderBadge = (type: 'added' | 'deducted') => {\n    const isAdded = type === 'added';\n    const badgeText = isAdded ? lang('RatingBadgeAdded') : lang('RatingBadgeDeducted');\n    const badgeClass = isAdded ? styles.badgeAdded : styles.badgeDeducted;\n\n    return (\n      <span className={buildClassName(styles.badge, badgeClass)}>\n        {badgeText}\n      </span>\n    );\n  };\n\n  const header = useMemo(() => {\n    if (!modal || !user || !starsRating || !isOpen) return undefined;\n\n    const rating = showFutureRating && pendingRating ? pendingRating : starsRating;\n    const currentStars = rating.stars;\n    const currentLevelStars = rating.currentLevelStars;\n    const nextLevelStars = rating.nextLevelStars;\n    const currentLevel = rating.level;\n    const nextLevel = currentLevel + 1;\n    const isNegative = currentLevel < 0;\n    const pendingLevel = !showFutureRating && pendingRating ? pendingRating.level : starsRating.level;\n\n    let levelProgress = 0;\n\n    if (!nextLevelStars) {\n      levelProgress = 1;\n    } else if (nextLevelStars > currentLevelStars) {\n      levelProgress = Math.max(0.03, (currentStars - currentLevelStars) / (nextLevelStars - currentLevelStars));\n    } else {\n      levelProgress = 1;\n    }\n\n    const progress = isNegative ? 0.5 : Math.max(0, Math.min(1, levelProgress));\n\n    const waitTime = pendingRatingDate ? pendingRatingDate - Math.floor(Date.now() / 1000) : 0;\n    const pendingPoints = pendingRating ? pendingRating.stars - starsRating.stars : 0;\n    const shouldShowPreview = pendingRating && pendingRatingDate;\n\n    const renderPreviewDescription = () => {\n      if (!shouldShowPreview) return undefined;\n\n      return (\n        <Transition\n          name=\"fade\"\n          className={buildClassName(styles.descriptionPreview, isNegative && styles.negative)}\n          activeKey={showFutureRating ? 1 : 0}\n          shouldCleanup\n          shouldRestoreHeight\n        >\n          {showFutureRating ? (\n            <p>\n              {lang('DescriptionFutureRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.backLink} onClick={handleShowCurrent}>\n                    {lang('LinkDescriptionRatingBack')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          ) : (\n            <p>\n              {lang('DescriptionPendingRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.previewLink} onClick={handleShowFuture}>\n                    {lang('LinkDescriptionRatingPreview')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          )}\n        </Transition>\n      );\n    };\n\n    let animationDirection: AnimationDirection = 'none';\n    if (currentLevel >= 0 && pendingLevel >= 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel > pendingLevel ? 'forward' : 'backward';\n    }\n\n    if (currentLevel < 0 && pendingLevel < 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel < pendingLevel ? 'backward' : 'forward';\n    }\n\n    const userFallbackText = lang('ActionFallbackUser');\n\n    return (\n      <div className={styles.header}>\n        <PremiumProgress\n          leftText={isNegative ? undefined : lang('RatingLevel', { level: currentLevel })}\n          rightText={isNegative ? lang('RatingNegativeLevel') : lang('RatingLevel', { level: nextLevel })}\n          floatingBadgeIcon={isNegative ? 'warning' : 'crown-wear'}\n          floatingBadgeText={isNegative ? currentLevel.toString()\n            : `${lang.number(currentStars)} / ${lang.number(nextLevelStars || currentStars)}`}\n          progress={progress}\n          isPrimary={currentLevel >= 0}\n          isNegative={currentLevel < 0}\n          animationDirection={animationDirection}\n          className={buildClassName(styles.ratingProgress, shouldShowPreview && styles.withPreview)}\n        />\n        {renderPreviewDescription()}\n        <div className={styles.title}>\n          {lang('TitleRating')}\n        </div>\n        <p className={styles.description}>\n          {user?.id === currentUserId\n            ? lang('RatingYourReflectsActivity')\n            : lang('RatingReflectsActivity', { name: getPeerTitle(lang, user) || userFallbackText },\n              { withMarkdown: true, withNodes: true })}\n        </p>\n      </div>\n    );\n  }, [modal, user, currentUserId, starsRating,\n    pendingRating, pendingRatingDate, showFutureRating,\n    lang, handleShowFuture, handleShowCurrent, isOpen]);\n\n  const listItemData = [\n    ['closed-gift', lang('RatingGiftsFromTelegram'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsFromTelegramDesc')}\n      </span>\n    )],\n    ['user-stars', lang('RatingGiftsAndPostsFromUsers'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsAndPostsFromUsersDesc')}\n      </span>\n    )],\n    ['stars-refund', lang('RatingRefundsAndConversions'), (\n      <span className={styles.subtitle}>\n        {renderBadge('deducted')}\n        {lang('RatingRefundsAndConversionsDesc')}\n      </span>\n    )],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          onClick={handleClose}\n        >\n          <Icon name=\"understood\" className={styles.understoodIcon} />\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen, handleClose]);\n\n  return (\n    <TableAboutModal\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId;\n    const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n    const userFullInfo = modal?.userId\n      ? selectUserFullInfo(global, modal.userId) : undefined;\n\n    const starsRating = userFullInfo?.starsRating;\n    const pendingRating = userFullInfo?.starsMyPendingRating;\n    const pendingRatingDate = userFullInfo?.starsMyPendingRatingDate;\n\n    return {\n      user,\n      currentUserId,\n      starsRating,\n      pendingRating,\n      pendingRatingDate,\n    };\n  },\n)(ProfileRatingModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LyrhszzE\",\"closeButton\":\"jHVcj192\",\"markAsReadButton\":\"Bp8eDIso\",\"chatInfoOverride\":\"FsTceiGs\"};","import type { FC } from '@teact';\nimport { memo } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiTypingStatus, ApiUpdateConnectionStateType } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getIsSavedDialog } from '../../../global/helpers';\nimport { selectChat, selectThreadParam, selectTopic } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\n\nimport styles from './QuickPreviewModalHeader.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  onClose: VoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSavedDialog?: boolean;\n  unreadCount?: number;\n  hasUnreadMark?: boolean;\n};\n\nconst EMOJI_STATUS_SIZE = 22;\n\nconst QuickPreviewModalHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  chat,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  typingStatus,\n  isSavedDialog,\n  unreadCount,\n  hasUnreadMark,\n  onClose,\n}) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { markChatMessagesRead } = getActions();\n  const {\n    connectionStatusText,\n  } = useConnectionStatus(oldLang, connectionState, isSyncing || isFetchingDifference, true);\n\n  const handleMarkAsRead = useLastCallback(() => {\n    markChatMessagesRead({ id: chatId });\n  });\n\n  const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n  const realChatId = isSavedDialog ? String(MAIN_THREAD_ID) : chatId;\n  const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n\n  return (\n    <div className={styles.root}>\n      {Boolean(unreadCount || hasUnreadMark) && (\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('ChatListContextMaskAsRead')}\n          onClick={handleMarkAsRead}\n          className={styles.markAsReadButton}\n        >\n          <Icon name=\"readchats\" />\n        </Button>\n      )}\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n        className={styles.closeButton}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className=\"modal-title\">\n        <div className={styles.chatInfoOverride}>\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={false}\n              withMediaViewer={false}\n              withStory={false}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={false}\n              withFullInfo={false}\n              withUpdatingStatus\n              withStory={false}\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const typingStatus = selectThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'typingStatus');\n    const isSavedDialog = getIsSavedDialog(chatId, threadId || MAIN_THREAD_ID, global.currentUserId);\n    const unreadCount = chat?.isForum && threadId\n      ? selectTopic(global, chatId, threadId)?.unreadCount\n      : chat?.unreadCount;\n\n    return {\n      chat,\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      typingStatus,\n      isSavedDialog,\n      unreadCount,\n      hasUnreadMark: chat?.hasUnreadMark,\n    };\n  },\n)(QuickPreviewModalHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJTLQd8O\",\"content\":\"zUonvDbp\",\"column\":\"NYlix6SL\",\"messagesLayout\":\"IJ0EBwJk\"};","import type { FC } from '@teact';\nimport { memo, useEffect } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MessageList from '../../middle/MessageList';\nimport Modal from '../../ui/Modal';\nimport QuickPreviewModalHeader from './QuickPreviewModalHeader';\n\nimport backgroundStyles from '../../../styles/_patternBackground.module.scss';\nimport styles from './QuickPreviewModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['quickPreview'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isBackgroundBlurred?: boolean;\n};\n\nconst QuickPreviewModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  customBackground,\n  backgroundColor,\n  patternColor,\n  isBackgroundBlurred,\n}) => {\n  const { closeQuickPreview, openChat, openThread } = getActions();\n\n  const chatId = modal?.chatId;\n  const threadId = modal?.threadId;\n  const isOpen = Boolean(chatId);\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleClose = useLastCallback(() => {\n    closeQuickPreview();\n  });\n\n  const handleContentClick = useLastCallback(() => {\n    if (chatId) {\n      if (threadId) {\n        openThread({ chatId, threadId, shouldReplaceHistory: true });\n      } else {\n        openChat({ id: chatId, shouldReplaceHistory: true });\n      }\n      closeQuickPreview();\n    }\n  });\n\n  useEffect(() => isOpen ? captureEscKeyListener(handleClose) : undefined, [isOpen, handleClose]);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: handleClose,\n  });\n\n  const { chatId: renderingChatId, threadId: renderingThreadId } = useCurrentOrPrev(modal, true) || {};\n\n  const bgClassName = buildClassName(\n    backgroundStyles.background,\n    customBackground && backgroundStyles.customBgImage,\n    backgroundColor && backgroundStyles.customBgColor,\n    customBackground && isBackgroundBlurred && backgroundStyles.blurred,\n  );\n\n  if (!renderingChatId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={<QuickPreviewModalHeader chatId={renderingChatId} threadId={renderingThreadId} onClose={handleClose} />}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={styles.column}\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n        onClick={handleContentClick}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <div className={styles.messagesLayout}>\n          <MessageList\n            chatId={renderingChatId}\n            threadId={renderingThreadId || MAIN_THREAD_ID}\n            type=\"thread\"\n            canPost={false}\n            isReady\n            withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n            isQuickPreview\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal: chatId }): Complete<StateProps> => {\n  const theme = selectTheme(global);\n  const {\n    isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n  } = selectThemeValues(global, theme) || {};\n\n  return {\n    theme,\n    customBackground,\n    backgroundColor,\n    patternColor,\n    isBackgroundBlurred,\n  };\n})(QuickPreviewModal));\n"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","_jsxs","id","className","children","_jsx","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","origin","params","isGif","mediaType","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","MediaViewerOrigin","SharedMedia","createGhost","source","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","contentType","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","collectedMessageIds","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","gif","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getMessageContentIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","IS_TAURI","IS_MAC_OS","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","storyExpireDate","viewersExpireDate","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","withMarkdown","renderTextFilters","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasAbsoluteCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","headerRef","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hex2rgbaObj","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgbaObj","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_COLORS","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_STROKE_WIDTH","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","strokeWidth","segmentsCount","colorStops","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","selectCustomEmoji","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","renderHeader","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","props","CountryPickerModal","useModuleLoader","Bundles","Extra","GiveawayChannelPickerModal","giveawayChatId","selectionLimit","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","concat","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","newSelectedIds","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","Set","sortUserIds","has","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","selectedCountryIds","setSelectedCountryIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","subLabel","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","setEmojiStatus","isFree","hasEffect","isCustomEmoji","isLocked","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","withSparkles","component","GiftEffectWrapper","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","onClearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemClassName","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","minStarsAmount","starsSuggestedPostAmountMin","ageMinSeconds","starsSuggestedPostAgeMin","futureMin","starsSuggestedPostFutureMin","futureMax","starsSuggestedPostFutureMax","tonMaxAmount","tonSuggestedPostAmountMax","tonMinAmount","tonSuggestedPostAmountMin","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","tonCommissionPermille","tonSuggestedPostCommissionPermille","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutFiles","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasIpRevealingMedia","selectHasIpRevealingMedia","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleFileIpConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","ItemPicker","notFoundText","noScrollRestore","isViewOnly","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","focusNoScroll","selectedValues","selectedValue","lockedSelectedValuesSet","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","pickerSelector","pickerTitle","main","picker","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","updateChatMutedState","openQuickPreview","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","useChatContextActions","altKey","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","PublicPostsSearchLauncher","searchFlood","onSearch","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","checkSearchPostsFlood","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","noForcedUpperCase","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","PublicPostsResults","resolveTransitionName","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","FOLDER_COLORS","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","FOLDER_TITLE_MAX_LENGTH","getApiPeerColorClass","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","areTagsEnabled","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","toggleDialogFilterTags","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleToggleTags","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","shouldRenderColor","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","accounts","useMultiaccountInfo","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","newAccountUrl","freeIndex","getAccountSlotUrl","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","GeneralChatBackground","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","averageColor","rgb2hex","getPatternColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSV","rgb2hsv","hex2rgb","PREDEFINED_COLORS","hsv2positions","hsv","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsv","colorPickerRef","huePickerRef","isFirstRunRef","setHsv","getInitialHsv","hsvRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsv2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","isForSettings","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","notifyDefaults","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","areChannelsMuted","areGroupsMuted","groups","areUsersMuted","handleSettingsChange","peerType","setting","currentIsMuted","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","clearError","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","MUTE_INDEFINITE_TIMESTAMP","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","chatInfo","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","shouldSaveAttachmentsCompression","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","defaultAttachmentCompression","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","moreTasksCount","tasksToRender","stateIndex","renderItems","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","spellCheck","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","isGraphReady","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","markProfileFieldsTouched","unmarkProfileFieldsTouched","isNotificationsTouched","markNotificationsTouched","unmarkNotificationsTouched","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","renderModalContent","currentStep","isShippingAddressRequested","ConfirmPassword","isPasswordMissing","isEmailRequested","isEmailSentToProvider","isPhoneRequested","isPhoneSentToProvider","isNameRequested","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","shouldFillRequestedData","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop","starsRating","pendingRating","starsMyPendingRating","pendingRatingDate","starsMyPendingRatingDate","ProfileRatingModal","closeProfileRatingModal","showFutureRating","setShowFutureRating","handleShowFuture","handleShowCurrent","renderBadge","badgeClass","rating","currentStars","currentLevelStars","nextLevelStars","nextLevel","isNegative","pendingLevel","waitTime","pendingPoints","shouldShowPreview","animationDirection","userFallbackText","renderPreviewDescription","shouldRestoreHeight","typingStatus","selectThreadParam","unreadCount","connectionState","isSyncing","isFetchingDifference","hasUnreadMark","QuickPreviewModalHeader","markChatMessagesRead","connectionStatusText","useConnectionStatus","handleMarkAsRead","savedMessagesStatus","realChatId","displayChatId","withDots","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","withMonoforumStatus","QuickPreviewModal","closeQuickPreview","handleContentClick","renderingChatId","renderingThreadId","backgroundStyles","customBgImage","customBgColor","blurred","MessageList","withDefaultBg","isQuickPreview"],"sourceRoot":""}