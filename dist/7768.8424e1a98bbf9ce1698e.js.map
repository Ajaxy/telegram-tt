{"version":3,"file":"7768.8424e1a98bbf9ce1698e.js","mappings":"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AyxG,gBACAl8D,yBAEFw9D,gBACAl9D,KAAM9iD,EAAO2iD,mBAAmB7V,MAChCuzE,sBACAC,kBACA5gE,UACAtzC,QACD,GAzNemiE,EA90CuBuzC,EACzC9gH,UACA+gH,+BACArkB,gCACAqZ,gCACAhkD,QACAihC,YACAsoB,aACAD,iBACA2F,aACAhP,YACAiP,kBACAC,cACA1F,iBACA7tF,YACAwzF,gBACAC,yBACA7F,wBACA2E,iBACAC,kBACAkB,eACAh5E,QACA4zE,kBACA9zE,SACAg0E,gBACAC,eACAtyE,YACAwyE,cACAI,kBACAxkG,eACA0kG,qBACAE,4BACAC,mBACAI,aACAH,iBACAI,cACAzL,iBACArR,iBACA5gD,oBACA+gE,oBACAnnB,cACAkmB,kBACAlC,YACAE,iBACAE,eACAD,mBACAj8D,wBACAv1C,uBACAyM,gBACAu1E,kBACAyxB,iBACA9D,uBACAzxB,aACAjoC,WACAm3C,YACAukB,aACAG,iBACAC,uBACAe,sBACAuB,iBACAlnB,kBACAqF,cACAkhB,mBACA74G,YACAu3G,mBACA7/D,sBACA4C,mBACAn0C,2BACA0B,mBACAkxG,gBACAxwG,YACAyxF,iBACAuF,oBACAyZ,oBACAE,sBACAD,yBACAjO,qBACAwM,qBACAgD,wBACAjF,qBACAmC,gBACAD,gBACAE,oBACAI,0BACAuB,4BACAzB,gCACAC,oCACA4B,uBACAxE,gBACApP,eACAjT,yBACAinB,sBACA5B,gBACAl9D,QACAu9D,sBACAC,kBACA5gE,UACAtzC,QACAm2G,gCAEA,MAAM,uBACJ9wD,GAAsB,qBACtB61C,GAAoB,uBACpB31C,GAAsB,sBACtB6wD,GAAqB,iBACrBnzD,GAAgB,iBAChBozD,KACEp6F,EAAAA,EAAAA,MAGE6nD,IAAMF,EAAAA,GAAAA,IAAuB,MAE7B0yC,IAAkB1yC,EAAAA,GAAAA,IAAuB,MAEzCyqB,IAAmBzqB,EAAAA,GAAAA,IAAuB,MAE1CtjB,IAAOqgB,EAAAA,GAAAA,MAEN41C,GAAuBC,KAA0B91C,EAAAA,GAAAA,KAAS,IAC1D+1C,GAAwBC,KAA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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/fragment/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId, type WebPageMediaSize } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageBatches = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      messageBatches.forEach((batch) => {\n        callApi('forwardMessages', {\n          fromChat,\n          toChat,\n          toThreadId,\n          messages: batch,\n          isSilent,\n          scheduledAt,\n          sendAs,\n          withMyScore,\n          noAuthors,\n          noCaptions,\n          isCurrentUserPremium,\n          wasDrafted: Boolean(draft),\n          lastMessageId,\n        });\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatusId, referrerWebAppKey, expires, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatusId, expires);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatusId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftUpgrade, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n  actions.closeGiftModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoiceStarGiftUpgrade = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldRefresh } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = global.peers.giftsById[peerId];\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = global.peers.giftsById[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  actions.loadPeerSavedGifts({ peerId, shouldRefresh: true });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadPeerSavedGifts({ peerId: global.currentUserId!, shouldRefresh: true });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id, tabId });\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedPosition: position,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedSize: size,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getPeerTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiMessageActionStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment, selectTabState } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    giftModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type === 'starGiftUnique') {\n    actions.openGiftInfoModal({ gift: action.starGift?.gift!, tabId });\n    return;\n  }\n\n  if (action.type !== 'starGift') return;\n\n  const starGift = action.starGift! as ApiMessageActionStarGift;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n    upgradeMsgId: starGift.upgradeMsgId,\n    canUpgrade: starGift.canUpgrade,\n    alreadyPaidUpgradeStars: starGift.alreadyPaidUpgradeStars,\n    inputGift: starGift.inputSavedGift,\n  } satisfies ApiSavedStarGift;\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftUpgradeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftUpgradeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, requestLangPackDifference } from '../../../util/localization';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectPeerStories, selectPeerStory, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const actionStarGift = update.message.content?.action?.starGift;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (actionStarGift?.type !== 'starGiftUnique') return undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.gift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          global = updateTabState(global, {\n            giftModal: {\n              ...giftModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n\n        actions.requestConfetti({ withStars: true, tabId });\n      }\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatusId: sticker.id });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile, isDesktop } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (!isDesktop && !isMessageListOpen) && (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getPeerTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from './icons/Icon';\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <Icon name=\"lock\" />}\n      <Icon name=\"next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Icon from '../../../common/icons/Icon';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <Icon name=\"select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Icon\n        name=\"comments-sticker\"\n        className={buildClassName(\n          'CommentButton_icon-comments',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n      />\n      {!recentRepliers?.length && <Icon name=\"comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <Icon\n          name=\"next\"\n          className={buildClassName(\n            'CommentButton_icon-open',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"medium\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              size=\"tiny\"\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                size=\"tiny\"\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <Icon name=\"lock\" className={styles.lock} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n\n  const [isActivated, markActivated] = useFlag();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: {\n        key: 'ImportedInfo',\n      },\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const dateTitle = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, oldLang.code, undefined, oldLang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        oldLang.code,\n        undefined,\n        oldLang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipEditedDate', { date: editDateTime });\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('MessageTooltipForwardedDate', { date: forwardedDateTime });\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, oldLang, message, oldLang.timeFormat]);\n\n  const viewsTitle = useMemo(() => {\n    if (!message.viewsCount) return undefined;\n    let text = lang('MessageTooltipViews', { count: message.viewsCount }, { pluralValue: message.viewsCount });\n    if (message.forwardsCount) {\n      text += '\\n';\n      text += lang('MessageTooltipForwards', { count: message.forwardsCount }, { pluralValue: message.forwardsCount });\n    }\n\n    return text;\n  }, [lang, message.forwardsCount, message.viewsCount]);\n\n  const repliesTitle = useMemo(() => {\n    const count = repliesThreadInfo?.messagesCount;\n    if (!count) return undefined;\n    return lang('MessageTooltipReplies', { count }, { pluralValue: count });\n  }, [lang, repliesThreadInfo]);\n\n  const date = useMemo(() => {\n    const time = formatTime(oldLang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(oldLang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [oldLang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\" title={viewsTitle}>\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\" title={repliesTitle}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={dateTitle} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('MessageMetaImported')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('MessageMetaEdited')} `}\n        {message.isVideoProcessingPending && `${lang('MessageMetaApproximate')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <Icon name={isVideo ? 'video-outlined' : 'phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <Icon\n            name=\"arrow-right\"\n            className={buildClassName(\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <Icon name=\"lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getPeerTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getPeerTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  FocusDirection,\n  IAlbum,\n  ISettings,\n  MessageListType,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getPeerTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { calculateDimensionsForMessageMedia, getStickerDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n    && !((sticker || hasAnimatedEmoji) && asForwarded)\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n  && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const messageColorPeer = asForwarded ? originSender : sender;\n  const noUserColors = isOwn && !isCustomShape;\n\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    const isPartialAlbumDelete = message.isInAlbum && album?.messages.some((msg) => !msg.isDeleting);\n    if (message.isDeleting && element && !isPartialAlbumDelete) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Only start animation on `isDeleting` change\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n    !canShowActionButton && 'no-action-button',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasCommentButton: withCommentButton,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors, true),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    isQuote: Boolean(focusedQuote),\n    scrollTargetPosition,\n  });\n\n  const viaBusinessBotTitle = viaBusinessBot ? getPeerTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  useMessageResizeObserver(ref, isLastInList);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={messageColorPeer?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {lang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderSenderName(shouldSkipRenderForwardTitle:boolean = false, shouldSkipRenderAdminTitle: boolean = false) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getPeerTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getPeerTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.usernames?.length;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <span className=\"interactive\">\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n\n    if (webPage.gift) {\n      classNames.push('gift');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {withAvatar && (\n        <div className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getPeerTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getPeerTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getPeerTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport GiftWithdrawModal from './gift/fragment/GiftWithdrawModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"avatar\":\"we2fpVuo\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  fromPeer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n\n  return (\n    <div ref={ref} className={styles.root} onClick={handleClick}>\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      {totalIssued && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(totalIssued))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n\n    return {\n      fromPeer,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsText', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <SavedGift\n              peerId={chatId}\n              key={`${gift.date}-${gift.fromId}-${gift.gift.id}`}\n              gift={gift}\n              observeIntersection={observeIntersectionForMedia}\n            />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = global.peers.giftsById[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, onClick && styles.clickable, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","peer","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectPeer","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageBatches","config","maxForwardedCount","splitMessagesForForwarding","batch","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatusId","referrerWebAppKey","expires","sendWebAppEvent","webAppKey","event","eventType","eventData","customEmojiIconId","isCloseFriend","customEmojiId","duration","botId","suggestedStatusModal","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","amount","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","peers","giftsById","localNextOffset","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","recipientId","sampleAttributes","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","icon","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","starGift","giftReceiverId","starsToConvert","isNameHidden","isSaved","fromId","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","giftInfoModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","emojiStatus","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","paidReactionPrivacy","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","useLang","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isDesktop","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","resolve","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","handleBeforeContextMenu","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","handleClick","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","onMouseDown","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","isSelected","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","audio","remove","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","disabled","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","getContactName","countryList","phoneCodes","phoneCodeList","Contact","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","emojiIconClassName","formatPhoneNumberWithCode","isText","COLOR","FactCheck","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","peerColor","Separator","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","dateTitle","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","viewsTitle","pluralValue","repliesTitle","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","PaidMediaOverlay","children","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","pill","STARS_CURRENCY_CODE","getPercentage","total","toFixed","PollOption","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","Poll","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","containerSelector","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","getReadableVotersCount","Sticker","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","messageSender","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","isPartialAlbumDelete","animateSnap","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","useMessageResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","Reactions","metaChildren","noRecentReactors","renderWebPage","WebPage","backgroundEmojiId","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","shouldRenderSenderName","renderForwardTitle","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","MessageEffect","shouldPlay","onStop","RoundVideo","onReadMedia","onHideTranscription","isTranscribed","canTranscribe","AudioOrigin","isSelectable","onPlay","Document","Story","StoryMention","DotAnimation","footerClass","hasContentAfterText","isMetaInText","renderInvertedMediaContent","MessageAppendix","isOutside","ContextMenuContainer","anchor","targetHref","SenderGroupContainer","handleAvatarClick","hiddenName","renderAvatar","SponsoredMessageContextMenuContainer","SponsoredMessage","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","handleHideSponsoredMessage","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","renderMediaContent","isRecommended","BadgeButton","isRectangular","canReport","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","senderGroupElements","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","lastMessageOrAlbum","firstMessageOrAlbum","firstMessage","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","top","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","customIcon","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","renderingPinnedMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","confirmLabel","isFullVideo","asSpoiler","shouldRenderVideo","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","emojiStatusSticker","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","isBackButtonActive","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","kind","isImage","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","isBlockingAnimation","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","SavedGift","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","totalIssued","getTotalGiftAvailability","GiftRibbon","PreviewMedia","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","withNodes","withMarkdown","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR"],"sourceRoot":""}