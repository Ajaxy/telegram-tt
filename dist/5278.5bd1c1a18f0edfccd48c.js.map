{"version":3,"file":"5278.5bd1c1a18f0edfccd48c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx","webpack://telegram-t/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/Gift.tsx","webpack://telegram-t/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGift.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostApproval.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostBalanceTooLow.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPostRejected.tsx","webpack://telegram-t/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://telegram-t/./src/components/middle/message/SimilarChannels.tsx","webpack://telegram-t/./src/hooks/useAverageColor.ts","webpack://telegram-t/./src/components/middle/message/ActionMessage.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx","webpack://telegram-t/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://telegram-t/./src/components/common/gift/GiftRibbon.tsx","webpack://telegram-t/./src/components/common/MiniTable.tsx","webpack://telegram-t/./src/components/common/MiniTable.module.scss?145f"],"sourcesContent":["import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPriceInStars : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: 0 });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n}: OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftPremium, ApiMessageActionGiftStars } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          )}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message && (lang(action.type === 'giftPremium' ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiPeer, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  sender?: ApiPeer;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  currentUserId,\n  action,\n  sender,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  const peerLink = useMemo(() => {\n    const peer = channel || sender;\n    const peerTitle = peer && getPeerTitle(lang, peer);\n    const peerFallbackText = lang('ActionFallbackChat');\n\n    return renderPeerLink(peer?.id, peerTitle || peerFallbackText);\n  }, [channel, sender, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>\n          {lang(action.type !== 'giftCode' || action.isViaGiveaway\n            ? 'ActionGiveawayResultTitle' : 'GiftInfoTitle')}\n        </h3>\n        <div>\n          {action.type === 'giftCode' && (\n            action.isViaGiveaway ? lang(\n              'ActionGiveawayResultPremiumText',\n              { channel: channelLink, months: action.months },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              })\n              : translateWithYou(\n                lang,\n                'ActionGiftCodeSubscriptionText',\n                sender?.id === currentUserId,\n                { peer: peerLink, months: action.months },\n                {\n                  pluralValue: action.months,\n                  renderTextFilters: ['br'],\n                })\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = action.boostPeerId ? selectChat(global, action.boostPeerId) : undefined;\n\n    return {\n      currentUserId,\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { isChatChannel } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {Boolean(action.gift.availabilityTotal) && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', {\n            total: formatIntegerCompact(lang, action.gift.availabilityTotal),\n          })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const shouldShowFrom = !isOutgoing || action.isUpgrade;\n  const peer = shouldShowFrom && !action.isUpgrade ? sender : recipient;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            shouldShowFrom ? 'ActionStarGiftFrom' : 'ActionStarGiftTo',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'openSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","import { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { STARS_SUGGESTED_POST_AGE_MIN } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\nimport { selectIsMonoforumAdmin, selectMonoforumChannel,\n  selectReplyMessage,\n  selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport renderText from '../../../common/helpers/renderText';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiPeer;\n  originalSender?: ApiPeer;\n  ageMinSeconds: number;\n  isAdmin: boolean;\n};\n\nconst SuggestedPostApproval = ({\n  message,\n  action,\n  sender,\n  chat,\n  originalSender,\n  ageMinSeconds,\n  isAdmin,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { scheduleDate, amount } = action;\n\n  const chatTitle = chat && getPeerFullTitle(lang, chat);\n  const renderChatLink = () => renderPeerLink(chat?.id, chatTitle || lang('ActionFallbackChat'));\n\n  const originalSenderTitle = originalSender && getPeerFullTitle(lang, originalSender);\n  const originalSenderLink = renderPeerLink(originalSender?.id, originalSenderTitle || lang('ActionFallbackUser'));\n\n  const publishDate = scheduleDate\n    ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n    : lang('TitleAnytime');\n\n  const isPostPublished = scheduleDate ? scheduleDate <= getServerTime() : false;\n\n  const starsText = amount?.amount ? formatStarsAsText(lang, amount.amount) : undefined;\n\n  const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostApprovalTitle}>\n        {renderText(lang('SuggestedPostAgreementReached'))}\n      </div>\n\n      <div className={styles.suggestedPostApprovalSection}>\n        {translateWithYou(\n          lang,\n          isPostPublished ? 'SuggestedPostPublished' : 'SuggestedPostPublishSchedule',\n          !isAdmin,\n          { peer: renderChatLink(), date: publishDate },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {starsText && (\n        <div className={styles.suggestedPostApprovalSection}>\n          {translateWithYou(lang,\n            'SuggestedPostCharged',\n            !isAdmin,\n            {\n              user: originalSenderLink,\n              amount: starsText,\n            },\n            { withMarkdown: true },\n          )}\n        </div>\n      )}\n\n      {isPostPublished && starsText && (\n        <>\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostReceiveAmount', !isAdmin, {\n              peer: renderChatLink(), duration, currency: lang('CurrencyStars'),\n            }, { withMarkdown: true })}\n          </div>\n\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostRefund', !isAdmin, {\n              peer: renderChatLink(), duration, currency: lang('CurrencyStars'),\n            }, { withMarkdown: true })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectMonoforumChannel(global, message.chatId);\n\n    const replyInfo = getMessageReplyInfo(message);\n    let originalSender: ApiPeer | undefined;\n\n    if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n      const replyMessage = selectReplyMessage(global, message);\n      if (replyMessage) {\n        originalSender = selectSender(global, replyMessage);\n      }\n    }\n\n    const { appConfig } = global;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const isAdmin = chat ? Boolean(selectIsMonoforumAdmin(global, message.chatId)) : false;\n\n    return {\n      sender,\n      chat,\n      originalSender,\n      ageMinSeconds,\n      isAdmin,\n    };\n  },\n)(SuggestedPostApproval));\n","import { memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Sparkles from '../../../common/Sparkles';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  replyMessageSender?: ApiPeer;\n};\n\nconst SuggestedPostBalanceTooLow = ({\n  onClick,\n  message,\n  sender,\n  replyMessageSender,\n}: OwnProps & StateProps) => {\n  const { openStarsBalanceModal } = getActions();\n  const lang = useLang();\n\n  const handleGetMoreStars = useLastCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openStarsBalanceModal({});\n  });\n\n  const targetPeer = replyMessageSender || sender;\n  const peerTitle = targetPeer && getPeerFullTitle(lang, targetPeer);\n  const peerLink = renderPeerLink(targetPeer?.id, peerTitle || lang('ActionFallbackUser'));\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostBalanceTooLowBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostBalanceTooLowTitle}>\n        {lang('SuggestedPostBalanceTooLow', {\n          peer: peerLink,\n          currency: lang('CurrencyStars'),\n        }, { withNodes: true, withMarkdown: true })}\n      </div>\n\n      {!message.isOutgoing && (\n        <div className={styles.actionButton} onClick={handleGetMoreStars}>\n          <Sparkles preset=\"button\" />\n          {lang('ButtonBuyStars')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    const replyMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n      ? selectChatMessage(global, message.chatId, message.replyInfo.replyToMsgId)\n      : undefined;\n\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage) : undefined;\n\n    return {\n      sender,\n      replyMessageSender,\n    };\n  },\n)(SuggestedPostBalanceTooLow));\n","import { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n};\n\nconst SuggestedPostRejected = ({\n  message,\n  action,\n  sender,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const { isOutgoing } = message;\n  const { rejectComment } = action;\n\n  const senderTitle = sender && getPeerTitle(lang, sender);\n  const senderLink = renderPeerLink(sender?.id, senderTitle || lang('ActionFallbackUser'));\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostRejectedContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostRejectedTitle}>\n        <Icon className={styles.rejectedIcon} name=\"close\" />\n        {translateWithYou(\n          lang,\n          rejectComment ? 'SuggestedPostRejectedWithReason' : 'SuggestedPostRejected',\n          isOutgoing,\n          { peer: senderLink },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {rejectComment && (\n        <div className={styles.suggestedPostRejectedComment}>\n          {lang('SuggestedPostRejectedComment', { comment: rejectComment })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return {\n      sender,\n    };\n  },\n)(SuggestedPostRejected));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  const ref = useRef<HTMLDivElement>();\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n    && (isExpanded || isAnimating)\n    && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n  const lang = useLang();\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>\n          {formatIntegerCompact(lang, channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): StateProps => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID, IS_ELECTRON, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport GiveawayPrize from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport SuggestedPostApproval from './actions/SuggestedPostApproval';\nimport SuggestedPostBalanceTooLow from './actions/SuggestedPostBalanceTooLow';\nimport SuggestedPostRejected from './actions/SuggestedPostRejected';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n  isResizingContainer?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isAccountFrozen?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS = new Set<ApiMessageAction['type']>([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'todoCompletions',\n  'todoAppendTasks',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS = new Set<ApiMessageAction['type']>(['giftCode', 'prizeStars',\n  'suggestProfilePhoto', 'suggestedPostApproval']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  isResizingContainer,\n  scrollTargetPosition,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isAccountFrozen,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n    focusMessage,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n  const isClickableText = action.type === 'suggestedPostSuccess';\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    scrollTargetPosition,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ chatId, messageIds: [id] });\n    }\n  }, [hasUnreadReaction, chatId, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n\n      case 'suggestedPostApproval': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n\n      case 'suggestedPostSuccess': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <GiveawayPrize\n            action={action}\n            sender={sender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      case 'suggestedPostApproval':\n        if (action.isBalanceTooLow) {\n          return (\n            <SuggestedPostBalanceTooLow\n              message={message}\n              action={action}\n              onClick={handleClick}\n            />\n          );\n        }\n        return action.isRejected ? (\n          <SuggestedPostRejected\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        ) : (\n          <SuggestedPostApproval\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, message, observeIntersectionForLoading, sender, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        'message-list-item',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isAccountFrozen={isAccountFrozen}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const tabState = selectTabState(global);\n    const { themes } = global.settings;\n\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n      isResizingContainer, scrollTargetPosition,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n      isResizingContainer,\n      scrollTargetPosition,\n      isAccountFrozen,\n    };\n  },\n)(ActionMessage));\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n  purple: [['#E367D7', '#757BF6'], ['#E367D7', '#757BF6']],\n  green: [['#52D553', '#4BB121'], ['#52D553', '#4BB121']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\ntype GradientColor = readonly [string, string];\n\ntype OwnProps = {\n  color: ColorKey | GradientColor | (string & {});\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor: GradientColor | undefined\n  = Array.isArray(color)\n    ? color as GradientColor\n    : colorKey\n      ? COLORS[colorKey][isDarkTheme ? 1 : 0]\n      : undefined;\n\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};"],"names":["memo","GiftMenuItems","peerId","canManage","gift","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","showNotification","openChatWithDraft","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","closeGiftInfoModal","getActions","lang","useLang","oldLang","useOldLang","isSavedGift","savedGift","undefined","starGiftUniqueSlug","type","slug","starGiftUniqueLink","useMemo","TME_LINK_PREFIX","userCollectibleStatus","find","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","resellPriceInStars","hasPinOptions","isUnsaved","handleTriggerVisibility","useLastCallback","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","message","handleLinkShare","text","handleTransfer","canTransferAt","getServerTime","key","variables","date","formatDateAtTime","handleSell","canResellAt","handleUnsell","price","icon","title","number","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","_jsxs","_Fragment","children","_jsx","MenuItem","isPinned","onClick","Boolean","AVATAR_SIZE","REM","ChannelPhotoAction","action","observeIntersection","Avatar","className","styles","channelPhoto","photo","loopIndefinitely","withVideo","size","withGlobal","global","sticker","selectGiftStickerForDuration","months","selectGiftStickerForStars","stars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","GiftAction","observeIntersectionForLoading","observeIntersectionForPlaying","stickerRef","useRef","contentBox","tabIndex","role","ref","stickerWrapper","style","StickerView","containerRef","noLoad","info","pluralValue","amount","renderTextWithEntities","actionButton","Sparkles","preset","currentUserId","channel","boostPeerId","selectChat","GiveawayPrizeAction","sender","channelLink","channelTitle","getPeerTitle","channelFallbackText","renderPeerLink","id","peerLink","peer","peerTitle","peerFallbackText","isViaGiveaway","withNodes","withMarkdown","renderTextFilters","translateWithYou","currentUser","selectUser","messageSender","selectSender","giftSender","fromId","selectPeer","messageRecipient","isOutgoing","chatId","recipient","starGiftMaxConvertPeriod","appConfig","StarGiftAction","getStickerFromGift","isChannel","isApiPeerChat","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","fallbackPeerTitle","isSelf","giftDescription","starsAmount","starsToConvert","formatStarsAsText","isUpgraded","alreadyPaidUpgradeStars","isConverted","buildClassName","starGift","GiftRibbon","color","total","formatIntegerCompact","subtitle","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","slice","tableData","name","shouldShowFrom","isUpgrade","uniqueGift","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","clearBottomSector","textColor","MiniTable","data","valueClassName","uniqueValue","buildStyle","SuggestedPhotoAction","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","useState","isVideoModalOpen","openVideoModal","closeVideoModal","useFlag","suggestedPhotoUrl","useMedia","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","user","showAvatarNotification","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","file","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","l","videoStartTs","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","suggestedAvatar","suggestedText","CropModal","onClose","onChange","ConfirmDialog","isOpen","confirmHandler","chat","selectMonoforumChannel","replyInfo","getMessageReplyInfo","originalSender","replyToMsgId","replyMessage","selectReplyMessage","ageMinSeconds","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","isAdmin","selectIsMonoforumAdmin","SuggestedPostApproval","scheduleDate","chatTitle","getPeerFullTitle","renderChatLink","originalSenderTitle","originalSenderLink","publishDate","formatScheduledDateTime","isPostPublished","starsText","duration","formatShortDuration","suggestedPostContentBox","suggestedPostApprovalTitle","renderText","suggestedPostApprovalSection","currency","selectChatMessage","replyMessageSender","SuggestedPostBalanceTooLow","openStarsBalanceModal","handleGetMoreStars","e","preventDefault","stopPropagation","targetPeer","suggestedPostBalanceTooLowBox","suggestedPostBalanceTooLowTitle","SuggestedPostRejected","rejectComment","senderTitle","senderLink","suggestedPostRejectedContentBox","suggestedPostRejectedTitle","Icon","rejectedIcon","suggestedPostRejectedComment","comment","SimilarChannel","openChat","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","useEffect","averageColor","getAverageColor","rgb2hex","useAverageColor","membersCount","MoreChannels","channelsCount","isCurrentUserPremium","openPremiumModal","openChatWithInfo","shouldReplaceHistory","profileTab","forceScrollProfileTab","similarChannelIds","isExpanded","count","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","channelJoinInfo","joinInfo","SimilarChannels","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","map","filter","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","length","shouldRenderChannels","useHorizontalScroll","useTimeout","setTimeout","clearTimeout","current","scrollIntoView","behavior","handleToggle","joinedDate","Skeleton","width","height","viewBox","fill","xmlns","d","Button","i","SHOW_CHANNELS_NUMBER","SINGLE_LINE_ACTIONS","Set","HIDDEN_TEXT_ACTIONS","tabState","selectTabState","themes","settings","isInsideTopic","isForum","replyToPeerId","isFocused","selectIsMessageFocused","direction","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","scrollTargetPosition","focusedMessage","hasUnreadReaction","unreadReactions","includes","isAccountFrozen","selectIsCurrentUserFrozen","isInSelectMode","selectIsInSelectMode","selectTheme","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","onIntersectPinnedMessage","observeIntersectionForBottom","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","focusMessage","content","isLocal","isLocalMessageId","isTextHidden","has","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","isClickableText","messageReplyInfo","withServiceReactions","areReactionsPossible","reactions","results","shouldSkipRender","isTouchScreen","useAppLayout","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","IS_ELECTRON","IS_ANDROID","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","useFluidBackgroundFilter","handleClick","ChannelAvatar","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","GiveawayPrize","Gift","StarGift","StarGiftUnique","isBalanceTooLow","isRejected","getMessageHtmlId","root","singleLine","fluidMultiline","hasFullContent","onMouseDown","preventMessageInputBlur","onContextMenu","inlineWrapper","hoverable","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","SVG_MAP","Map","SvgFluidBackgroundFilter","referenceCount","constructor","this","filterId","addSvgDefinition","SVG_NAMESPACE","in","stdDeviation","result","mode","values","in2","operator","getFilterId","removeReference","removeSvgDefinition","isUsed","asValue","colorFilter","get","delete","prepareStyle","svg","set","COLORS","red","blue","purple","green","COLOR_KEYS","Object","keys","theme","validSvgRandomId","useUniqueId","colorKey","isDarkTheme","gradientColor","Array","isArray","startColor","endColor","ribbon","x1","y1","x2","y2","gradientUnits","offset","keyClassName","value"],"sourceRoot":""}