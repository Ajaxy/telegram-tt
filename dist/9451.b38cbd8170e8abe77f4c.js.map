{"version":3,"file":"9451.b38cbd8170e8abe77f4c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +\n              {formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption))\n              && Boolean(perUserStarCount) && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\ntype ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function getViewableMedia(params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, webPage, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  if (webPage) {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n};\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = getViewableMedia(item) || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectMessageTimestampableDuration, selectTabState,\n} from '../../global/selectors';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = getViewableMedia(item) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia, { getMediaViewerItem, type MediaViewerItem } from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const currentItem = getMediaViewerItem({\n    message, avatarOwner, standaloneMedia, profilePhotos, mediaIndex, sponsoredMessage,\n  });\n  const { media, isSingle } = getViewableMedia(currentItem) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const peer = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (peer) {\n        canUpdateMedia = isUserId(peer.id) ? peer.id === currentUserId : isChatAdmin(peer as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner: peer,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSection, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {(fromUserStatusEmoji && !isGift) ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {getHeaderText()}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={onReactionSelect}\n              onReactionContext={onReactionContext}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_AMOUNT_MAX,\n  STARS_SUGGESTED_POST_AMOUNT_MIN,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN } from '../../../config';\nimport { selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxAmount: number;\n  minAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n};\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  peer,\n  currentDraft,\n  maxAmount,\n  minAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [starsAmount, setStarsAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    setStarsAmount(currentSuggestedPostInfo?.price?.amount || undefined);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), maxAmount);\n\n    setStarsAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const isDisabled = Boolean(starsAmount) && starsAmount < minAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = starsAmount || 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    const currentBalance = starBalance?.amount || 0;\n\n    if (neededAmount > currentBalance) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: neededAmount,\n        },\n      });\n      return;\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate ? scheduleDate / 1000 : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={starsAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled\n          />\n          <div className={styles.description}>\n            {starsAmount !== undefined && starsAmount > 0 && starsAmount < minAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: formatStarsAsText(lang, minAmount) },\n              { withNodes: true, withMarkdown: true })\n              : lang('SuggestMessagePriceDescription', {\n                currency: lang('CurrencyStars'),\n              })}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName('input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang) : lang('TitleAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('TitleAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : starsAmount ? lang('ButtonOfferAmount', {\n              amount: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxAmount = appConfig?.starsSuggestedPostAmountMax || STARS_SUGGESTED_POST_AMOUNT_MAX;\n    const minAmount = appConfig?.starsSuggestedPostAmountMin || STARS_SUGGESTED_POST_AMOUNT_MIN;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n\n    return {\n      peer,\n      starBalance,\n      currentDraft,\n      maxAmount,\n      minAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_COMMISSION_PERMILLE,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const amount = message?.suggestedPostInfo?.price?.amount;\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const commission = (commissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const starsText = formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: starsText,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: starsText,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig?.starsSuggestedPostCommissionPermille\n      || STARS_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const minAge = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = (appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN) * 2;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDownloadableMedia } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = getMessageDownloadableMedia(message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content LeftSearch--media\">\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dates/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { CHAT_HEIGHT_PX, STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'chat-item-clickable small-icon', className)}\n      style={`height: ${CHAT_HEIGHT_PX}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings, ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings, LangCode, SharedSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadContentSettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMarkScrolled from '../../../hooks/useMarkScrolled/useMarkScrolled';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useMarkScrolled({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      {!isForEffects && (\n        <div ref={headerRef} className={headerClassName}>\n          <div className=\"shared-canvas-container\">\n            <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n            {allSets.map(renderCover)}\n          </div>\n        </div>\n      )}\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={\n          buildClassName(\n            styles.main,\n            IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n            !isForEffects && styles.hasHeader,\n          )\n        }\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n            shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {oldLang('PreviewSender.MoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {oldLang(('PreviewSender.MoveTextDown'))}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport {\n  TODO_ITEM_LENGTH_LIMIT,\n  TODO_ITEMS_LIMIT,\n  TODO_TITLE_LENGTH_LIMIT,\n} from '../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount?: number;\n  maxTitleLength?: number;\n  maxItemLength?: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount = TODO_ITEMS_LIMIT,\n  maxTitleLength = TODO_TITLE_LENGTH_LIMIT,\n  maxItemLength = TODO_ITEM_LENGTH_LIMIT,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const title = isAddTaskMode ? 'TitleAppendToDoList' : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount', {\n          count: maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0),\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig?.todoItemsMax,\n      maxTitleLength: appConfig?.todoTitleLengthMax,\n      maxItemLength: appConfig?.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const ref = useMediaTransition<HTMLImageElement>(photoUrl);\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","import { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n  withBalanceBar?: boolean;\n  isLowStackPriority?: true;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n  withBalanceBar,\n  isLowStackPriority,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n      withBalanceBar={withBalanceBar}\n      isLowStackPriority={isLowStackPriority}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {Boolean(label) && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n"],"names":["memo","StarTopupOptionList","isActive","className","options","selectedStarOption","selectedStarCount","starsNeeded","onClick","oldLang","useOldLang","lang","useLang","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","useFlag","useEffect","renderingOptions","canExtend","useMemo","undefined","maxOption","reduce","max","option","stars","forceShowAll","result","currentStackedStarsCount","canExtendOptions","forEach","index","isExtended","push","starsCount","Math","min","isWide","length","_jsxs","buildClassName","styles","children","map","isOdd","isActiveOption","perUserStarCount","winner","winners","find","opt","users","perUserStars","wideOption","active","optionTop","formatInteger","_jsx","stackedStars","dir","isRtl","Array","from","StarIcon","stackedStar","type","size","optionBottom","formatCurrency","amount","currency","Boolean","renderText","Button","moreOptions","isText","noForcedUpperCase","Icon","iconDown","name","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","id","AnimatedSticker","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","TableAboutModal","isOpen","listItemData","headerIconName","header","footer","buttonText","hasBackdrop","withSeparator","onClose","onButtonClick","contentClassName","Modal","hasAbsoluteCloseButton","absoluteCloseButtonColor","icon","title","subtitle","ListItem","isStatic","multiline","iconClassName","Separator","getViewableMedia","params","media","mediaIndex","isSingle","avatar","profilePhotos","photos","action","document","photo","video","webPage","paidMedia","getMessageContent","message","isDocumentPhoto","isDocumentVideo","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","peerId","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","REPORT_OPTIONS","label","onEnter","RadioGroup","onChange","selected","InputText","color","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","global","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarOwner","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","stopPropagation","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","sponsoredMessage","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","shouldSkipHistoryAnimations","withDynamicLoading","standaloneMedia","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","currentItem","getMediaViewerItem","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","isSlim","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","perMonthPrice","price","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","CustomEmoji","PremiumLogo","template","first","second","emoji","thumbCustomEmojiId","link","getHeaderText","statusText","entities","statusEntities","renderFooterText","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","gift","selectedStarsGift","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winnerCountOptions","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","subLabelClassName","formatDateTimeToString","boosts","RangeSliderWithMarks","rangeCount","marks","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxAmount","starsSuggestedPostAmountMax","STARS_SUGGESTED_POST_AMOUNT_MAX","minAmount","starsSuggestedPostAmountMin","STARS_SUGGESTED_POST_AMOUNT_MIN","ageMinSeconds","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","futureMin","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","futureMax","starsSuggestedPostFutureMax","STARS_SUGGESTED_POST_FUTURE_MAX","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","starsAmount","setStarsAmount","scheduleDate","setScheduleDate","defaultSelectedTime","handleAmountChange","number","isNaN","handleAnytimeClick","handleOffer","neededAmount","topup","balanceNeeded","nanos","formatStarsAsText","formatScheduledDateTime","autoComplete","readOnly","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","STARS_SUGGESTED_POST_COMMISSION_PERMILLE","minAge","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","starsText","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","shouldDrawDateDivider","toYearMonth","getMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","getMessageMediaThumbDataUri","mediaBlobUrl","getMessageMediaHash","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","shouldCleanup","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","TABS","GlobalSearchContent","ChannelList","BotApps","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","CHAT_HEIGHT_PX","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useMarkScrolled","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","TODO_ITEMS_LIMIT","TODO_TITLE_LENGTH_LIMIT","TODO_ITEM_LENGTH_LIMIT","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","tasksToRender","stateIndex","renderItems","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","form","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","modalHeader","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","modalProps","hasButton","headerAvatarPeer","withBalanceBar","avatarPeer","avatarWebPhoto","clickable","webPhoto","badge"],"sourceRoot":""}