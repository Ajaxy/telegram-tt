{"version":3,"file":"7768.744abedbeb1d6ff43ccd.js","mappings":"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6F,YACA/nE,WACAspE,cACAx4E,MAAO04E,IAAW14E,MAClB24E,eACAC,mBACAP,iBACAE,kBACAD,aACAhkE,uBACA9L,sBACAywE,YAAajwE,EAAWxlD,OACxB01H,gBAAiBp0H,GAAMsuH,YACvBt+D,WACAuqB,iBACAy3C,uBACAqC,gBAAiBzB,EACjB0B,YAAaxB,EACbM,kBACAtgH,uBACAo/G,cACA58G,gBACAspD,kBACA5kC,SAAUp9B,EAAOo9B,SACjBu6F,mBAAmB/hG,EAAAA,GAAAA,GAAmB51B,EAAQ,uBAC9CwzE,QAASgiD,EAAgBhiD,OAAUjqE,EACnCuqE,iBAAkB0hD,EAAgB1hD,OAAmBvqE,EACrDquH,cAAexvF,GAAap+B,IAC5BmtH,oBACAE,aACAQ,QAASvuF,GAAcuuF,QACvBC,kBAAkBC,EAAAA,EAAAA,KAAuB/3H,EAAQoB,GACjDk2H,qBAlIcj6C,CAx/BJ26C,EACd52H,SACAy/D,WACAh5D,WACAurD,WACA6kE,eACAzoF,QACA2nF,mBACAl6B,YACAqU,QACArvG,gBACAoP,eACAunB,WACA40B,WACAmpE,iBACAE,kBACAD,aACAhkE,uBACA9L,qBACAywE,cACAlC,kBACAe,oBACAK,gBACAjB,gBACAc,qBACAQ,cACAx4E,QACA24E,cACAC,kBACAV,kBACAf,mBACAG,gBACAC,mBACA+B,gBACApkD,UACAM,mBACA42C,YACAhwF,mBACA66F,YACAroB,qBACAvxF,eACAm6G,kBACA0B,kBACA75C,iBACAy3C,uBACAqC,kBACAC,cACAxhH,wBACAyhH,qBACArC,eACA58G,iBACAspD,mBACA5kC,YACAi6F,aACAQ,WACAC,oBACAR,mBACAY,4BAEA,MAAM,yBACJC,GAAwB,gBACxBC,GAAe,gBACfC,GAAe,SACfj0G,GAAQ,0BACRk0G,GAAyB,gBACzBhvD,GAAe,gBACfG,GAAe,aACf18D,GAAY,6BACZwrH,GAA4B,uBAC5B1lE,GAAsB,mBACtB2lE,GAAkB,iBAClB7uG,GAAgB,2BAChB8uG,GAA0B,uBAC1BC,GAAsB,kBACtBC,GAAiB,mBACjB5xE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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/locked/GiftLockedModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.async.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/util/animations/viewTransitionTypes.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/common/AnimatedTabItem.module.scss?3313","webpack://telegram-t/./src/components/common/AnimatedTabItem.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.module.scss?5731","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.tsx","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.module.scss?00be","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.tsx","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.module.scss?ff67","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/hooks/tauri/useTauriEvent.ts","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, true, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, true, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, false, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, false, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateScheduledMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateScheduledMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  isNew: boolean,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  if (!currentMessage && !isNew) return global;\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig.starsSuggestedPostFutureMin;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, false, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !selectCustomEmoji(global, documentId)));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, linkContext, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, linkContext, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n    parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n    window.open(parsedUrl.href, '_blank', 'noopener');\n    return;\n  }\n\n  if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n    actions.closeStoryViewer({ tabId });\n\n    actions.requestLinkUrlAuth({ url, tabId });\n    return;\n  }\n\n  const isWhitelisted = appConfig.whitelistedDomains.includes(parsedUrl.hostname);\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal && !isWhitelisted;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers', {});\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, getMessageContentIds, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getMessageContentIds(byId, newFoundIds, 'inlineMedia');\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', {\n    user,\n    maxId: commonChats?.maxId,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings, ThreadId } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { pick } from '../../../util/iteratees.ts';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId, linkContext: { type: 'message', chatId, messageId, threadId } });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const currentInlineBotSettings = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !currentInlineBotSettings || query !== currentInlineBotSettings.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((currentInlineBotSettings.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...currentInlineBotSettings,\n    ...pick(result, ['help', 'switchPm', 'switchWebview']),\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: currentInlineBotSettings.offset === '' || currentInlineBotSettings.offset === result.nextOffset\n      ? result.results\n      : (currentInlineBotSettings.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, threadId?: ThreadId, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      openGame({\n        url, chatId: chat.id, messageId, tabId,\n      });\n    } else {\n      openUrl({ url, tabId, linkContext: { type: 'message', chatId: chat.id, messageId, threadId } });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL, STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkCanSendGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (gift.type !== 'starGift' || !gift.lockedUntilDate) {\n    onSuccess();\n    return;\n  }\n\n  const result = await callApi('fetchCheckCanSendGift', {\n    giftId: gift.id,\n  });\n\n  if (!result) return;\n\n  if (result?.canSend) {\n    onSuccess();\n  } else {\n    actions.openLockedGiftModalInfo({\n      untilDate: gift.type === 'starGift' ? gift.lockedUntilDate : undefined,\n      reason: result.reason,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, selectedResaleGift, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n      selectedResaleGift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const chat = forUserId ? selectChat(global, forUserId) : undefined;\n  if (forUserId && !chat) return;\n\n  const starsGiftOptions = await callApi('fetchStarsGiftOptions', {\n    chat,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    const result = await callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    global = getGlobal();\n    if (result && global.currentUserId) {\n      actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n    }\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === TON_CURRENCY_CODE;\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n  const currency = isTon ? TON_CURRENCY_CODE : STARS_CURRENCY_CODE;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency, tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency,\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updatePeerStarGiftCollections,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveGiftsCollectionId,\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerCollectionSavedGifts,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: {\n        all: allStarGiftIds,\n        resale: resaleStarGiftIds,\n        myCollectibles: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadMyCollectibleGifts', async (global, actions, payload): Promise<void> => {\n  const { shouldRefresh } = payload || {};\n  const currentUserId = global.currentUserId;\n  if (!currentUserId) return;\n\n  const currentMyCollectibleGifts = global.myCollectibleGifts;\n  const localNextOffset = currentMyCollectibleGifts?.nextOffset;\n\n  if (currentMyCollectibleGifts && !localNextOffset && !shouldRefresh) return;\n\n  const peer = selectPeer(global, currentUserId);\n  if (!peer) return;\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : undefined,\n    filter: {\n      sortType: 'byDate',\n      shouldIncludeUnique: true,\n      shouldIncludeUnlimited: false,\n      shouldIncludeUpgradable: false,\n      shouldIncludeLimited: false,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n    },\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  const gifts = result.gifts;\n\n  const byId = buildCollectionByCallback(gifts, (savedGift) => (\n    [savedGift.gift.id, savedGift]\n  ));\n\n  const ids = gifts.map((gift) => gift.gift.id);\n\n  global = {\n    ...global,\n    myCollectibleGifts: {\n      byId: {\n        ...!shouldRefresh && (global.myCollectibleGifts?.byId || {}),\n        ...byId,\n      },\n      ids: [\n        ...!shouldRefresh ? (global.myCollectibleGifts?.ids || []) : [],\n        ...ids,\n      ],\n      nextOffset: result.nextOffset,\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const fetchingCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const currentGifts = selectPeerCollectionSavedGifts(global, peerId, fetchingCollectionId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n    collectionId: fetchingCollectionId === 'all' ? undefined : fetchingCollectionId,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n  const currentCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  if (!result || currentCollectionId !== fetchingCollectionId || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabState.id);\n    if (selectPeerCollectionSavedGifts(global, peerId, activeCollectionId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  if (peerId === global.currentUserId) {\n    actions.loadMyCollectibleGifts({ shouldRefresh: true });\n  }\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const oldGifts = selectTabState(global, tabId).savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  actions.reloadPeerSavedGifts({ peerId });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n\naddActionHandler('loadStarGiftCollections', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    hash,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStarGiftCollections', {\n    peer,\n    hash,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updatePeerStarGiftCollections(global, peerId, result.collections);\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\nimport { selectActiveStoriesCollectionId } from '../../selectors/stories';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const selectedAlbumId = selectActiveStoriesCollectionId(global, tabId);\n  if (selectedAlbumId !== 'all') {\n    let albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (albumData?.isFullyLoaded) {\n      return;\n    }\n\n    const result = await callApi('fetchAlbumStories', {\n      peer,\n      albumId: selectedAlbumId,\n      offset: offsetId || 0,\n    });\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds, false, selectedAlbumId);\n    peerStories = selectPeerStories(global, peerId);\n\n    albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (Object.values(result.stories).length === 0\n      || (albumData?.ids?.length && albumData.ids.length >= result.count)) {\n      global = updatePeerStoriesFullyLoaded(global, peerId, true, false, selectedAlbumId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('loadStoryAlbums', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const albums = await callApi('fetchAlbums', { peer });\n  if (!albums) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      albumsByPeerId: {\n        ...global.stories.albumsByPeerId,\n        [peerId]: albums,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('selectStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { peerId, albumId, tabId = getCurrentTabId() } = payload;\n\n  if (albumId && peerId) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, false);\n  }\n\n  global = updateTabState(global, {\n    selectedStoryAlbumId: albumId || undefined,\n  }, tabId);\n\n  setGlobal(global);\n\n  actions.loadPeerProfileStories({ peerId, tabId });\n});\n\naddActionHandler('loadAlbumStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, albumId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchAlbumStories', {\n    peer,\n    albumId,\n    offset: offsetId || 0,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('resetSelectedStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    selectedStoryAlbumId: undefined,\n  }, tabId);\n});\n","import type { ProfileTabType } from '../../../types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, execAfterActions, getGlobal, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n      // Reset chat info state for new chat\n      chatInfo: {\n        isOpen: tabState.chatInfo.isOpen,\n      },\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  window.open(hashUrl, '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab, isOwnProfile, tabId = getCurrentTabId(), ...rest } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const isSameMessageList = currentMessageList?.chatId === rest.id\n    && currentMessageList?.threadId === MAIN_THREAD_ID\n    && currentMessageList?.type === (rest.type || 'thread');\n\n  processChatInfoState({ global, isSameMessageList, profileTab, forceScrollProfileTab, isOwnProfile, tabId });\n\n  actions.openChat({ ...rest, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab, isOwnProfile, tabId = getCurrentTabId(), ...rest } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const isSameMessageList = currentMessageList?.chatId === rest.chatId\n    && currentMessageList?.threadId === rest.threadId\n    && currentMessageList?.type === (rest.type || 'thread');\n\n  processChatInfoState({ global, isSameMessageList, profileTab, forceScrollProfileTab, isOwnProfile, tabId });\n\n  actions.openThread({ ...rest, tabId });\n});\n\nfunction processChatInfoState<T extends GlobalState>({\n  global,\n  isSameMessageList,\n  profileTab,\n  forceScrollProfileTab,\n  isOwnProfile,\n  tabId,\n}: {\n  global: T;\n  isSameMessageList: boolean;\n  profileTab?: ProfileTabType;\n  forceScrollProfileTab?: boolean;\n  isOwnProfile?: boolean;\n  tabId: number;\n}) {\n  const currentChatInfo = selectTabState(global, tabId).chatInfo;\n\n  const newProfileTab = profileTab ?? (isSameMessageList ? currentChatInfo.profileTab : undefined);\n  const newForceScrollProfileTab = forceScrollProfileTab\n    ?? (isSameMessageList ? currentChatInfo.forceScrollProfileTab : undefined);\n  const newIsOwnProfile = isOwnProfile ?? (isSameMessageList ? currentChatInfo.isOwnProfile : undefined);\n\n  execAfterActions(() => {\n    global = getGlobal();\n    global = updateTabState(global, {\n      ...selectTabState(global, tabId),\n      chatInfo: {\n        isOpen: true,\n        profileTab: newProfileTab,\n        forceScrollProfileTab: newForceScrollProfileTab,\n        isOwnProfile: newIsOwnProfile,\n      },\n    }, tabId);\n    global = { ...global, lastIsChatInfoShown: true };\n    setGlobal(global);\n  });\n}\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getTranslationFn } from '../../../util/localization';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 7; // 7 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: { key: 'ErrorFocusInaccessibleMessage' }, tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      message: {\n        key: IS_TOUCH_ENV ? 'ContextMenuHintTouch' : 'ContextMenuHintMouse',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (CHANGELOG_DATETIME && Date.now() > CHANGELOG_DATETIME + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = getTranslationFn();\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openQuickPreview', (global, actions, payload): ActionReturnType => {\n  const { id: chatId, threadId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    quickPreview: { chatId, threadId },\n  }, tabId);\n});\n\naddActionHandler('closeQuickPreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    quickPreview: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\n\nimport { type LangFn } from '../../util/localization';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n\naddActionHandler('openProfileRatingModal', (global, actions, payload): ActionReturnType => {\n  const { userId, level, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    profileRatingModal: {\n      userId,\n      level,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeProfileRatingModal', 'profileRatingModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_TAURI } from './browser/globalEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport async function setPageTitleInstant(nextTitle: string) {\n  if (IS_TAURI) {\n    await window.tauri?.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n  PAGE_TITLE_TAURI,\n} from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const chatInfo = selectTabState(global, tabId).chatInfo;\n  const willChatInfoBeShown = force !== undefined ? force : !chatInfo.isOpen;\n\n  if (willChatInfoBeShown !== chatInfo.isOpen) {\n    global = updateTabState(global, {\n      chatInfo: {\n        ...chatInfo,\n        isOpen: willChatInfoBeShown,\n      },\n    }, tabId);\n  }\n  global = { ...global, lastIsChatInfoShown: willChatInfoBeShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('changeProfileTab', (global, actions, payload): ActionReturnType => {\n  const { profileTab, shouldScrollTo, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const chatInfo = selectTabState(global, tabId).chatInfo;\n\n  return updateTabState(global, {\n    chatInfo: {\n      ...chatInfo,\n      isOpen: true,\n      profileTab,\n      forceScrollProfileTab: shouldScrollTo,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('updateShouldSaveAttachmentsCompression', (global, actions, payload): ActionReturnType => {\n  const { shouldSave, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldSaveAttachmentsCompression: shouldSave,\n  }, tabId);\n});\n\naddActionHandler('applyDefaultAttachmentsCompression', (global): ActionReturnType => {\n  const { defaultAttachmentCompression } = global.attachmentSettings;\n  const shouldCompress = defaultAttachmentCompression === 'compress';\n\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      shouldCompress,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  const defaultTitle = IS_TAURI ? PAGE_TITLE_TAURI : PAGE_TITLE;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${defaultTitle} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  // Show blinking title in browser tab\n  if (!IS_TAURI && global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(`${prefix}${defaultTitle}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig;\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ApiSavedGifts } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique\n    && !updatedFilter.shouldIncludeUpgradable) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      shouldIncludeUpgradable: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { getPromiseActions } from '../../../global';\n\nimport type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await getPromiseActions().loadMessage({ chatId, messageId });\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openLockedGiftModalInfo', (global, actions, payload): ActionReturnType => {\n  const {\n    untilDate, reason, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    lockedGiftModal: {\n      untilDate,\n      reason,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeLockedGiftModal', 'lockedGiftModal');\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftInMarket', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  actions.closeGiftInfoValueModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: gift,\n      },\n    }, tabId);\n  }\n\n  actions.openGiftModal({\n    forUserId: global.currentUserId!,\n    selectedResaleGift: gift,\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('closeResaleGiftsMarket', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  actions.resetResaleGifts({ tabId });\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: undefined,\n      },\n    }, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftInfoValueModal', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('fetchUniqueStarGiftValueInfo', { slug: gift.slug });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftInfoValueModal: {\n      valueInfo: result,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftInfoValueModal', 'giftInfoValueModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n\naddActionHandler('openGiftTransferConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftTransferConfirmModal: {\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferConfirmModal', 'giftTransferConfirmModal');\n\naddActionHandler('updateSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, collectionId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: collectionId,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: undefined,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n\n          actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.reloadPeerSavedGifts({ peerId: starGiftModalState.forPeerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftUpgrade' && global.currentUserId) {\n        actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        withTags\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_TAURI && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, isOwnProfile: true });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener,noreferrer');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('TelegramFeaturesUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={handleSelectMyProfile}\n      >\n        {lang('MenuMyProfile')}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('MenuSavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('MenuArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {lang('MenuContacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('MenuSettings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('MenuNightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'AriaMenuDisableNightMode' : 'AriaMenuEnableNightMode')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('MenuAnimationsSwitch')}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('MenuTelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport GiftEffectWrapper from '../../common/gift/GiftEffectWrapper';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const collectibleEmojiStatus = emojiStatus?.type === 'collectible' ? emojiStatus : undefined;\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <GiftEffectWrapper\n            withSparkles={Boolean(collectibleEmojiStatus)}\n            sparklesClassName=\"statusSparkles\"\n            sparklesColor={collectibleEmojiStatus?.textColor}\n          >\n            <CustomEmoji\n              key={emojiStatus.documentId}\n              documentId={emojiStatus.documentId}\n              size={EMOJI_STATUS_SIZE}\n              loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            />\n          </GiftEffectWrapper>\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const version = useMemo(() => {\n    let fullVersion = '';\n    if (IS_TAURI && window.tauri.version) {\n      fullVersion = `Tauri ${window.tauri.version} | `;\n    }\n\n    fullVersion += `${APP_NAME} ${versionString}`;\n\n    return fullVersion;\n  }, [versionString]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div\n        id=\"LeftMainHeader\"\n        className=\"left-header\"\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={version}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_TAURI && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { Update } from '@tauri-apps/plugin-updater';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst TAURI_CHECK_UPDATE_INTERVAL = 10 * 60 * 1000;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [tauriUpdate, setTauriUpdate] = useState<Update>();\n  const [isTauriUpdateDownloading, setIsTauriUpdateDownloading] = useState(false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || Boolean(tauriUpdate));\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(async () => {\n    if (tauriUpdate) {\n      try {\n        setIsTauriUpdateDownloading(true);\n        await tauriUpdate.downloadAndInstall();\n        setIsTauriUpdateDownloading(false);\n\n        await window.tauri?.relaunch();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to download and install Tauri update', e);\n      } finally {\n        setIsTauriUpdateDownloading(false);\n      }\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const checkTauriUpdate = useLastCallback(() => {\n    window.tauri?.checkUpdate()\n      .then((update) => setTauriUpdate(update ?? undefined))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error('Tauri update check failed:', e);\n      });\n  });\n\n  useEffect(() => {\n    checkTauriUpdate();\n  }, []);\n\n  useInterval(\n    checkTauriUpdate,\n    (IS_TAURI && !DEBUG) ? TAURI_CHECK_UPDATE_INTERVAL : undefined,\n  );\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n          isLoading={isTauriUpdateDownloading}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  useEffect(() => {\n    if (isPlaying && message?.isDeleting) {\n      playPause();\n    }\n  }, [isPlaying, message?.isDeleting, playPause]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state as Complete<StateProps>;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      } as Complete<StateProps>;\n    }\n\n    return state as Complete<StateProps>;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCustomEmoji,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isDesktop, isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    // Force close My Profile if clicked on Saved Messages header\n    openThreadWithInfo({ chatId, threadId, isOwnProfile: false });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef} data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && selectCustomEmoji(global, emojiStatus.documentId);\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport backgroundStyles from '../../styles/_patternBackground.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    backgroundStyles.background,\n    withRightColumnAnimation && backgroundStyles.withTransition,\n    customBackground && backgroundStyles.customBgImage,\n    backgroundColor && backgroundStyles.customBgColor,\n    customBackground && isBackgroundBlurred && backgroundStyles.blurred,\n    isRightColumnShown && backgroundStyles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale}`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS && !(renderingChatId && renderingThreadId) ? true : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={resolveTransitionName(\n                'slide',\n                animationLevel,\n                shouldSkipHistoryAnimations || !withInterfaceAnimations,\n              )}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage}\n              />\n              <div className={footerClassName}>\n                <FloatingActionButtons\n                  withScrollDown={renderingIsScrollDownShown}\n                  canPost={renderingCanPost}\n                  withExtraShift={withExtraShift}\n                />\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    } as Complete<StateProps>;\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftLockedModal from './gift/locked/GiftLockedModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferConfirmModal from './gift/transfer/GiftTransferConfirmModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftInfoValueModal from './gift/value/GiftInfoValueModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ProfileRatingModal from './profileRating/ProfileRatingModal.async';\nimport QuickPreviewModal from './quickPreview/QuickPreviewModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftInfoValueModal' |\n  'lockedGiftModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'giftTransferConfirmModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen' |\n  'profileRatingModal' |\n  'quickPreview'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftInfoValueModal: GiftInfoValueModal,\n  lockedGiftModal: GiftLockedModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  giftTransferConfirmModal: GiftTransferConfirmModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n  profileRatingModal: ProfileRatingModal,\n  quickPreview: QuickPreviewModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => (\n    pick(selectTabState(global), MODAL_KEYS) as Complete<StateProps>\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal?.isModalOpen);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal?.inputInvoice);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : undefined;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : undefined;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoValueModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoValueModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoValueModal = useModuleLoader(Bundles.Stars, 'GiftInfoValueModal', !modal);\n\n  return GiftInfoValueModal ? <GiftInfoValueModal {...props} /> : undefined;\n};\n\nexport default GiftInfoValueModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftLockedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftLockedModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftLockedModal = useModuleLoader(Bundles.Stars, 'GiftLockedModal', !modal);\n\n  return GiftLockedModal ? <GiftLockedModal {...props} /> : undefined;\n};\n\nexport default GiftLockedModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferConfirmModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferConfirmModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferConfirmModal = useModuleLoader(\n    Bundles.Stars,\n    'GiftTransferConfirmModal',\n    !modal,\n  );\n\n  return GiftTransferConfirmModal ? <GiftTransferConfirmModal {...props} /> : undefined;\n};\n\nexport default GiftTransferConfirmModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', !modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ProfileRatingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ProfileRatingModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ProfileRatingModal = useModuleLoader(Bundles.Extra, 'ProfileRatingModal', !modal);\n\n  return ProfileRatingModal ? <ProfileRatingModal {...props} /> : undefined;\n};\n\nexport default ProfileRatingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './QuickPreviewModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst QuickPreviewModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const QuickPreviewModal = useModuleLoader(Bundles.Extra, 'QuickPreviewModal', !modal);\n\n  return QuickPreviewModal ? <QuickPreviewModal {...props} /> : undefined;\n});\n\nexport default QuickPreviewModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","export class VTTypes {\n  private readonly hierarchy: string[] = [];\n\n  constructor(types: readonly string[]) {\n    this.hierarchy = [...(types || [])];\n  }\n\n  with(type: string): VTTypes {\n    return new VTTypes([...this.hierarchy, type]);\n  }\n\n  getTypes(): readonly string[] {\n    return this.hierarchy;\n  }\n}\n\n// View transition types\nexport const VTT_RIGHT_COLUMN = new VTTypes(['rightColumn']);\nexport const VTT_RIGHT_PROFILE_AVATAR = VTT_RIGHT_COLUMN.with('profileAvatar');\nexport const VTT_RIGHT_PROFILE_EXPAND = VTT_RIGHT_PROFILE_AVATAR.with('profileExpand');\nexport const VTT_RIGHT_PROFILE_COLLAPSE = VTT_RIGHT_PROFILE_AVATAR.with('profileCollapse');\n\nexport const VTT_PROFILE_GIFTS = VTT_RIGHT_COLUMN.with('profileGifts');\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState({\n  containerRef,\n  tabType,\n  profileState,\n  onProfileStateChange,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  tabType: ProfileTabType;\n  profileState: ProfileState;\n  forceScrollProfileTab?: boolean;\n  allowAutoScrollToTabs?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  handleStopAutoScrollToTabs: NoneToVoidFunction;\n}) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    if (state !== profileState) {\n      onProfileStateChange(state);\n    }\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [gifViewportIds, getMoreGifs, noProfileInfoForGifs] = useInfiniteScrollForSharedMedia(\n    'gif', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'gif':\n      viewportIds = gifViewportIds;\n      getMore = getMoreGifs;\n      noProfileInfo = noProfileInfoForGifs;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  className?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  className,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternIcon={pattern.sticker}\n        patternSize={14}\n        ringsCount={1}\n        ovalFactor={1}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root, className)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect\n          noSparkleAnimation\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): Complete<StateProps> => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): Complete<StateProps> => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig;\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"_KBrROQt\",\"icon\":\"Y3vEed9M\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from './AnimatedIconFromSticker';\n\nimport styles from './AnimatedTabItem.module.scss';\n\ntype OwnProps = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n  onClick?: (id: string) => void;\n};\n\nconst AnimatedTabItem = ({\n  id,\n  title,\n  sticker,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(id);\n  });\n\n  return (\n    <div\n      className={styles.item}\n      onClick={handleClick}\n    >\n      {sticker && (\n        <AnimatedIconFromSticker\n          className={styles.icon}\n          sticker={sticker}\n          size={20}\n          forcePreview\n        />\n      )}\n      {title}\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabItem);\n","import { memo, useEffect, useRef, useState } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport AnimatedTabItem from './AnimatedTabItem';\n\nimport styles from './AnimatedTabList.module.scss';\n\nexport type TabItem = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n};\n\ntype OwnProps = {\n  items: TabItem[];\n  selectedItemId?: string;\n  className?: string;\n  animationLevel: AnimationLevel;\n  onItemSelect?: (itemId: string) => void;\n};\n\nconst AnimatedTabList = ({\n  items,\n  selectedItemId,\n  animationLevel,\n  onItemSelect,\n  className,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const clipPathContainerRef = useRef<HTMLDivElement>();\n  const selectedIndex = items.findIndex((item) => item.id === selectedItemId) || 0;\n  const [clipPath, setClipPath] = useState<string>('');\n  const shouldAnimate = animationLevel > ANIMATION_LEVEL_MIN;\n\n  useHorizontalScroll(containerRef, !items.length, true);\n\n  const updateClipPath = useLastCallback(() => {\n    const clipPathContainer = clipPathContainerRef.current;\n    const activeTab = selectedIndex >= 0 && clipPathContainer?.childNodes[selectedIndex] as HTMLElement | null;\n\n    if (clipPathContainer && activeTab && clipPathContainer.offsetWidth > 0) {\n      const { offsetLeft, offsetWidth } = activeTab;\n      const containerWidth = clipPathContainer.offsetWidth;\n      const left = (offsetLeft / containerWidth * 100).toFixed(1);\n      const right = ((containerWidth - (offsetLeft + offsetWidth)) / containerWidth * 100).toFixed(1);\n\n      const newClipPath = `inset(0 ${right}% 0 ${left}% round 1rem)`;\n      setClipPath(newClipPath);\n    }\n  });\n\n  useEffect(() => {\n    updateClipPath();\n  }, [selectedIndex, items]);\n\n  useResizeObserver(clipPathContainerRef, updateClipPath);\n\n  if (!items.length) return undefined;\n\n  return (\n    <div\n      ref={containerRef}\n      className={\n        buildClassName(\n          styles.container,\n          'no-scrollbar',\n          className,\n          clipPath && styles.isVisible,\n        )\n      }\n    >\n      {items.map((item) => (\n        <AnimatedTabItem\n          key={item.id}\n          id={item.id}\n          title={item.title}\n          sticker={item.sticker}\n          onClick={onItemSelect}\n        />\n      ))}\n\n      <div\n        ref={clipPathContainerRef}\n        className={buildClassName(\n          styles.clipPathContainer,\n          'clip-path-container',\n          !shouldAnimate && styles.noAnimation,\n        )}\n        style={clipPath ? `clip-path: ${clipPath}` : undefined}\n        aria-hidden\n      >\n        {items.map((item, i) => (\n          <AnimatedTabItem\n            key={item.id}\n            id={item.id}\n            title={item.title}\n            sticker={item.sticker}\n            onClick={onItemSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabList);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UQ6pUmuC\",\"clipPathContainer\":\"c397ZVz4\",\"isVisible\":\"_Nw3GzkO\",\"noAnimation\":\"zNFdzcTe\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGiftCollection } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StarGiftCollectionList.module.scss';\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  collections?: ApiStarGiftCollection[];\n  activeCollectionId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StarGiftCollectionList = ({\n  peerId,\n  className,\n  collections,\n  activeCollectionId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { updateSelectedGiftCollection, resetSelectedGiftCollection } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedGiftCollection({ peerId });\n    } else {\n      const collectionId = Number(itemId);\n      updateSelectedGiftCollection({ peerId, collectionId });\n    }\n  });\n\n  if (!collections || collections.length === 0) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllGiftsCategory'),\n    },\n    ...collections.map((collection) => ({\n      id: String(collection.collectionId),\n      title: collection.title,\n      sticker: collection.icon,\n    })),\n  ], [collections, lang]);\n\n  const selectedItemId = activeCollectionId ? String(activeCollectionId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { starGiftCollections } = global;\n    const collections = starGiftCollections?.byPeerId?.[peerId];\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId);\n\n    return {\n      collections,\n      activeCollectionId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarGiftCollectionList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"pvf61Tbm\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStoryAlbum } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../../global/selectors/stories';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StoryAlbumList.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  albums?: ApiStoryAlbum[];\n  selectedAlbumId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StoryAlbumList = ({\n  peerId,\n  className,\n  albums,\n  selectedAlbumId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { selectStoryAlbum, resetSelectedStoryAlbum } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedStoryAlbum();\n    } else {\n      const albumId = Number(itemId);\n      selectStoryAlbum({ peerId, albumId });\n    }\n  });\n\n  if (!albums?.length) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllStoriesCategory'),\n    },\n    ...albums.map((album) => ({\n      id: String(album.albumId),\n      title: album.title,\n    })),\n  ], [albums, lang]);\n\n  const selectedItemId = selectedAlbumId ? String(selectedAlbumId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { stories } = global;\n    const albums = stories?.albumsByPeerId?.[peerId];\n    const selectedAlbumId = selectActiveStoriesCollectionId(global);\n\n    return {\n      albums,\n      selectedAlbumId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StoryAlbumList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"GgK8T6WN\"};","import { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiProfileTab,\n  ApiSavedStarGift,\n  ApiStarGiftCollection,\n  ApiStoryAlbum,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { ProfileCollectionKey } from '../../global/selectors/payments';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport { selectActiveGiftsCollectionId } from '../../global/selectors/payments';\n\nconst CONTENT_PANEL_SHOW_DELAY = 300;\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectCanUpdateMainTab,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectPerformanceSettingsValue,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../global/selectors/stories';\nimport {\n  VTT_PROFILE_GIFTS,\n  VTT_RIGHT_PROFILE_COLLAPSE,\n  VTT_RIGHT_PROFILE_EXPAND,\n} from '../../util/animations/viewTransitionTypes.ts';\nimport { areDeepEqual } from '../../util/areDeepEqual';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport { useVtn } from '../../hooks/animations/useVtn.ts';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useTopOverscroll from '../../hooks/scroll/useTopOverscroll.tsx';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useSyncEffectWithPrevDeps from '../../hooks/useSyncEffectWithPrevDeps.ts';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/profile/ProfileInfo.tsx';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList, { type TabWithProperties } from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport StarGiftCollectionList from './gifts/StarGiftCollectionList';\nimport StoryAlbumList from './stories/StoryAlbumList';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  storyAlbums?: ApiStoryAlbum[];\n  giftCollections?: ApiStarGiftCollection[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  selectedStoryAlbumId: ProfileCollectionKey;\n  activeCollectionId: ProfileCollectionKey;\n  giftsFilter?: any;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  chatInfo: TabState['chatInfo'];\n  animationLevel: AnimationLevel;\n  shouldWarnAboutFiles?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  isSavedMessages?: boolean;\n  isSynced?: boolean;\n  hasAvatar?: boolean;\n  mainTab?: ApiProfileTab;\n  canUpdateMainTab?: boolean;\n  canAutoPlayGifs?: boolean;\n};\n\ntype LocalTabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\ntype TabWithPropertiesAndType = TabWithProperties & {\n  type: ProfileTabType;\n};\n\nconst TABS: LocalTabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n  { type: 'gif', key: 'ProfileTabGifs' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst VALID_CHANNEL_MAIN_TAB_TYPES = new Set<StringAutocomplete<ApiProfileTab>>([\n  'stories', 'gifts', 'media', 'documents', 'audio', 'voice', 'links', 'gif',\n]);\nconst VALID_USER_MAIN_TAB_TYPES = new Set<StringAutocomplete<ApiProfileTab>>([\n  'stories', 'gifts',\n]);\nconst SHARED_MEDIA_TYPES = new Set<StringAutocomplete<SharedMediaType>>([\n  'media', 'documents', 'links', 'audio', 'voice', 'gif',\n]);\n\nconst Profile = ({\n  chatId,\n  isActive,\n  threadId,\n  chatInfo,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  selectedStoryAlbumId,\n  activeCollectionId,\n  giftsFilter,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  storyAlbums,\n  giftCollections,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  animationLevel,\n  shouldWarnAboutFiles,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  isSavedMessages,\n  isSynced,\n  hasAvatar,\n  mainTab,\n  canUpdateMainTab,\n  canAutoPlayGifs,\n  onProfileStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n    loadStarGiftCollections,\n    loadStoryAlbums,\n    resetSelectedStoryAlbum,\n    changeProfileTab,\n    setMainProfileTab,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const shouldSkipTransitionRef = useRef(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n  const [isGiftTransitionEnabled, enableGiftTransition, disableGiftTransition] = useFlag();\n\n  const isClosed = !chatInfo.isOpen;\n  const { profileTab, forceScrollProfileTab, isOwnProfile } = chatInfo;\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isGeneralSavedMessages = isSavedMessages && !isSavedDialog;\n  const [isProfileExpanded, expandProfile, collapseProfile] = useFlag();\n\n  const [restoreContentHeightKey, setRestoreContentHeightKey] = useState(0);\n\n  const isUser = isUserId(chatId);\n  const validMainTabTypes = isUser ? VALID_USER_MAIN_TAB_TYPES : VALID_CHANNEL_MAIN_TAB_TYPES;\n\n  const tabs = useMemo(() => {\n    const arr: LocalTabProps[] = [];\n    if (isGeneralSavedMessages) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasStoriesTab && isOwnProfile) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasMembersTab && !isOwnProfile) {\n      arr.push({ type: 'members', key: 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab && !isOwnProfile) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    if (!isOwnProfile) {\n      arr.push(...TABS);\n    }\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo && !isOwnProfile) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab && !isOwnProfile) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length && !isOwnProfile) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length && !isOwnProfile) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    // Fallback to prevent errors in edge cases\n    // TODO: Handle no tabs case, skip shared media block\n    if (!arr.length) {\n      arr.push(TABS[0]);\n    }\n\n    if (mainTab) {\n      const mainTabIndex = arr.findIndex((tab) => tab.type === mainTab);\n      if (mainTabIndex !== -1) {\n        const newFirstTab = arr[mainTabIndex];\n        arr.splice(mainTabIndex, 1);\n        arr.unshift(newFirstTab);\n      }\n    }\n\n    return arr.map((tab) => {\n      const contextActions: MenuItemContextAction[] | undefined = canUpdateMainTab && mainTab !== tab.type\n        && validMainTabTypes.has(tab.type) ? [{\n          title: lang('ProfileMenuSetMainTab'),\n          icon: 'replace',\n          handler: () => {\n            setMainProfileTab({ chatId, tab: tab.type as ApiProfileTab });\n          },\n        }] : undefined;\n\n      return {\n        type: tab.type,\n        title: lang(tab.key),\n        contextActions,\n      } satisfies TabWithPropertiesAndType;\n    });\n  }, [\n    isGeneralSavedMessages, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang, isOwnProfile,\n    mainTab, chatId, canUpdateMainTab, validMainTabTypes,\n  ]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const setActiveTab = useLastCallback((type: ProfileTabType) => {\n    if (isClosed) return;\n    changeProfileTab({ profileTab: type });\n    setSharedMediaSearchType({ mediaType: SHARED_MEDIA_TYPES.has(type) ? type as SharedMediaType : undefined });\n  });\n\n  useEffect(() => {\n    if (isClosed) return;\n    if (profileTab) {\n      // Force reset scroll marker\n      changeProfileTab({ profileTab, shouldScrollTo: undefined });\n      return;\n    };\n\n    setActiveTab(tabs[0].type); // Set default tab\n  }, [isClosed, profileTab, tabs]);\n\n  useEffectWithPrevDeps(([prevMainTab]) => {\n    if (prevMainTab || !mainTab) return;\n    setActiveTab(mainTab); // Only focus when loading full info\n  }, [mainTab]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(tabs[index].type);\n  }, [tabs]);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  useEffect(() => {\n    resetSelectedStoryAlbum();\n  }, [chatId]);\n\n  useSyncEffect(() => {\n    enableGiftTransition();\n  }, [giftsFilter]);\n\n  useSyncEffect(() => {\n    disableGiftTransition();\n  }, [gifts]);\n\n  useEffect(() => {\n    if (hasGiftsTab && isSynced) {\n      loadStarGiftCollections({ peerId: chatId });\n      loadStoryAlbums({ peerId: chatId });\n    }\n  }, [chatId, hasGiftsTab, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition } = useViewTransition();\n  const { createVtnStyle } = useVtn();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const activeTabIndex = useMemo(() => {\n    const index = tabs.findIndex(({ type }) => type === profileTab);\n    return index === -1 ? 0 : index;\n  }, [profileTab, tabs]);\n\n  // Reset skip transition flag from previous render\n  if (shouldSkipTransitionRef.current) {\n    shouldSkipTransitionRef.current = false;\n  }\n\n  useSyncEffectWithPrevDeps(([prevProfileTab, prevActiveTabIndex]) => {\n    if (prevProfileTab === profileTab && prevActiveTabIndex !== activeTabIndex) {\n      shouldSkipTransitionRef.current = true;\n    }\n  }, [profileTab, activeTabIndex]);\n\n  const tabType = tabs[activeTabIndex].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (areDeepEqual(gifts, prevGifts)) {\n      return;\n    }\n\n    if (!gifts || !prevGifts || !isGiftTransitionEnabled) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(VTT_PROFILE_GIFTS, () => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition, isGiftTransitionEnabled]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n\n  const shouldRenderProfileInfo = !noProfileInfo && !isSavedMessages;\n\n  const isFirstTab = tabs[0].type === resultType;\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const [isGiftCollectionsShowed, markGiftCollectionsShowed, unmarkGiftCollectionsShowed] = useFlag(false);\n  const [isStoryAlbumsShowed, markStoryAlbumsShowed, unmarkStoryAlbums] = useFlag(false);\n\n  const hasGiftsCollections = giftCollections && giftCollections.length > 0;\n  const hasStoryAlbums = storyAlbums && storyAlbums.length > 0;\n  const isGiftsResult = resultType === 'gifts';\n  const isStoriesResult = resultType === 'stories';\n  const shouldShowContentPanel = (isGiftsResult && hasGiftsCollections) || (isStoriesResult && hasStoryAlbums);\n\n  useEffect(() => {\n    if (hasGiftsCollections) {\n      setTimeout(() => {\n        markGiftCollectionsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkGiftCollectionsShowed();\n    }\n\n    if (hasStoryAlbums) {\n      setTimeout(() => {\n        markStoryAlbumsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkStoryAlbums();\n    }\n  }, [hasGiftsCollections, hasStoryAlbums, markGiftCollectionsShowed, markStoryAlbumsShowed]);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const handleExpandProfile = useLastCallback(() => {\n    if (isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_EXPAND, () => {\n      expandProfile();\n    });\n  });\n\n  const handleCollapseProfile = useLastCallback(() => {\n    if (!isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_COLLAPSE, () => {\n      collapseProfile();\n    });\n  });\n\n  const { handleScroll } = useProfileState({\n    containerRef,\n    tabType: resultType,\n    profileState,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    onProfileStateChange,\n    handleStopAutoScrollToTabs,\n  });\n\n  useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useTopOverscroll({\n    containerRef,\n    onOverscroll: handleExpandProfile,\n    onReset: handleCollapseProfile,\n    isOverscrolled: isProfileExpanded,\n    isDisabled: !hasAvatar || !shouldRenderProfileInfo,\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          const nextIndex = Math.min(activeTabIndex + 1, tabs.length - 1);\n          setActiveTab(tabs[nextIndex].type);\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          const nextIndex = Math.max(0, activeTabIndex - 1);\n          setActiveTab(tabs[nextIndex].type);\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeTabIndex, tabs]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if ((!viewportIds && !botPreviewMedia) || (!gifts?.length && resultType === 'gifts')) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType,\n    activeTabIndex, activeCollectionId, selectedStoryAlbumId], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n\n    return (\n      <div>\n        {renderCategories()}\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </div>\n    );\n  }\n\n  function renderCategories() {\n    if (resultType === 'gifts') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isGiftCollectionsShowed && 'noTransition',\n          )}\n        >\n          <StarGiftCollectionList peerId={chatId} />\n        </div>\n      );\n    }\n\n    if (resultType === 'stories') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isStoryAlbumsShowed && 'noTransition',\n          )}\n        >\n          <StoryAlbumList peerId={chatId} />\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSpinnerOrContentBase(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text={lang('ChatMemberListNoAccess')} />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? lang('ChatMemberListNoAccess') : lang('NoMembersFound');\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        case 'gif':\n          text = oldLang('lng_media_gif_empty');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    const noTransition = resultType === 'gifts' ? isGiftCollectionsShowed\n      : resultType === 'stories' ? isStoryAlbumsShowed : false;\n    return (\n      <div\n        className={buildClassName(\n          `content ${resultType}-list`,\n          shouldShowContentPanel && 'showContentPanel',\n          noTransition && 'noTransition',\n        )}\n        dir={lang.isRtl && (resultType === 'media' || resultType === 'gif') ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' || resultType === 'gif' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              canAutoPlay={canAutoPlayGifs}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              datetime={messagesById[id].date}\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                <PrivateChatInfo\n                  userId={userId}\n                  avatarSize=\"medium\"\n                />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                className=\"saved-gift\"\n                style={createVtnStyle(getSavedGiftKey(gift))}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'stories' || resultType === 'gifts';\n  const contentTransitionKey = (() => {\n    if (resultType === 'stories') {\n      return selectedStoryAlbumId === 'all' ? 0 : selectedStoryAlbumId;\n    }\n    if (resultType === 'gifts') {\n      return activeCollectionId === 'all' ? 0 : activeCollectionId;\n    }\n    return 0;\n  })();\n\n  const handleOnStop = useLastCallback(() => {\n    setRestoreContentHeightKey(restoreContentHeightKey + 1);\n  });\n\n  function renderProfileInfo(peerId: string, isReady: boolean) {\n    return (\n      <div className=\"profile-info\">\n        <ProfileInfo\n          isExpanded={isProfileExpanded}\n          peerId={peerId}\n          canPlayVideo={isReady}\n          isForMonoforum={Boolean(monoforumChannel)}\n          onExpand={handleExpandProfile}\n        />\n        <ChatExtra\n          chatOrUserId={profileId}\n          isSavedDialog={isSavedDialog}\n          isOwnProfile={isOwnProfile}\n          style={createVtnStyle('chatExtra')}\n        />\n      </div>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    const baseContent = renderSpinnerOrContentBase(noContent, noSpinner);\n\n    const isSpinner = noContent && !noSpinner;\n\n    if (shouldUseTransitionForContent) {\n      return (\n        <Transition\n          className={`${resultType}-list`}\n          activeKey={contentTransitionKey}\n          name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n          shouldCleanup\n          shouldRestoreHeight\n          restoreHeightKey={restoreContentHeightKey}\n          contentSelector=\".Transition > .Transition_slide-active > .content\"\n        >\n          <Transition\n            activeKey={isSpinner ? 0 : 1}\n            name=\"fade\"\n            shouldCleanup\n            shouldRestoreHeight\n            restoreHeightKey={restoreContentHeightKey}\n            contentSelector=\".content\"\n            onStop={handleOnStop}\n          >\n            {baseContent}\n          </Transition>\n        </Transition>\n      );\n    }\n\n    return (\n      <Transition\n        activeKey={isSpinner ? 0 : 1}\n        name=\"fade\"\n        shouldCleanup\n        shouldRestoreHeight\n      >\n        {baseContent}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active`;\n  // eslint-disable-next-line @stylistic/max-len\n  const nestedSelector = `${activeListSelector} > .Transition > .Transition_slide-active > .Transition > .Transition_slide-active`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} .${resultType}-list > .scroll-item`\n    : `${nestedSelector} > .${resultType}-list > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n          style={createVtnStyle('sharedMedia')}\n        >\n          <Transition\n            ref={transitionRef}\n            name={shouldSkipTransitionRef.current ? 'none'\n              : resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStop={resetCacheBuster}\n            restoreHeightKey={shouldUseTransitionForContent ? restoreContentHeightKey : undefined}\n            contentSelector={shouldUseTransitionForContent\n              ? '.Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .content'\n              : undefined}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={activeTabIndex} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const tabState = selectTabState(global);\n    const { chatInfo, savedGifts } = tabState;\n    const { isOwnProfile } = chatInfo;\n\n    const { animationLevel, shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedMessages = chatId === global.currentUserId && !isOwnProfile;\n    const isSavedDialog = !isOwnProfile ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && isGroup && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedMessages\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedMessages;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const selectedStoryAlbumId = selectActiveStoriesCollectionId(global);\n    const storyIds = selectedStoryAlbumId !== 'all'\n      ? peerStories?.idsByAlbumId?.[selectedStoryAlbumId]?.ids\n      : peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedMessages;\n    const activeCollectionId = selectActiveGiftsCollectionId(global, chatId);\n    const peerGifts = savedGifts.collectionsByPeerId[chatId]?.[activeCollectionId];\n\n    const storyAlbums = global.stories.albumsByPeerId?.[chatId];\n    const giftCollections = global.starGiftCollections?.byPeerId?.[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n    const hasAvatar = Boolean(peer?.avatarPhotoId);\n\n    const canAutoPlayGifs = selectPerformanceSettingsValue(global, 'autoplayGifs');\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      storyAlbums,\n      giftCollections,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      selectedStoryAlbumId,\n      activeCollectionId,\n      giftsFilter: savedGifts.filter,\n      isChatProtected: chat?.isProtected,\n      chatInfo,\n      animationLevel,\n      shouldWarnAboutFiles,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSavedMessages,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      members: hasMembersTab ? members : undefined,\n      adminMembersById: hasMembersTab ? adminMembersById : undefined,\n      commonChatIds: commonChats?.ids,\n      monoforumChannel,\n      hasAvatar,\n      mainTab: peerFullInfo?.mainTab,\n      canUpdateMainTab: selectCanUpdateMainTab(global, chatId),\n      canAutoPlayGifs,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, SettingsScreens } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport { useVtn } from '../../hooks/animations/useVtn';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  isOwnProfile?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  isOwnProfile,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n  const { createVtnStyle } = useVtn();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUpgradable: shouldIncludeUpgradableGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleEditProfile = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.EditProfile });\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isOwnProfile) {\n      return lang('MyProfileHeader');\n    }\n\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeLimited: !shouldIncludeLimitedGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUpgradableGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeUpgradable: !shouldIncludeUpgradableGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterUpgradable')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n              {isOwnProfile && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditProfile}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div\n      className=\"RightHeader\"\n      data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      style={createVtnStyle('rightHeader', true)}\n    >\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isOwnProfile = tabState.chatInfo?.isOwnProfile;\n    const isSavedMessages = chatId && !isOwnProfile ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      isOwnProfile,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const tonAmount = availableBalance ? convertTonFromNanos(availableBalance.amount) : 0;\n    const [integerTonPart, decimalTonPart] = tonAmount.toFixed(4).split('.');\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (tonAmount * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  isOwnProfile?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  isOwnProfile,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}_${Boolean(isOwnProfile)}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, shouldCloseRightColumn, chatInfo,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isOwnProfile = chatInfo?.isOwnProfile;\n    const isSavedMessages = chatId && !isOwnProfile ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      isOwnProfile,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): Complete<StateProps> => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['confetti']) as Complete<StateProps>,\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useTauriEvent from '../../hooks/tauri/useTauriEvent';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadMyCollectibleGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadMyCollectibleGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useTauriEvent<string>('deeplink', (event) => {\n    try {\n      const url = event.payload || '';\n      const decodedUrl = decodeURIComponent(url);\n      processDeepLink(decodedUrl);\n    } catch (e) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to process deep link', e);\n      }\n    }\n  });\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, IS_TAURI);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { Event } from '@tauri-apps/api/event';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\n\nexport default function useTauriEvent<T>(name: string, callback: (event: Event<T>) => void) {\n  return useEffect(() => {\n    if (!IS_TAURI) {\n      return undefined;\n    }\n\n    let removeListener: VoidFunction | undefined;\n\n    const setUpListener = async () => {\n      const { listen } = await import('@tauri-apps/api/event');\n      removeListener = await listen<T>(name, (event) => {\n        callback(event);\n      });\n    };\n\n    setUpListener().catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error(`Could not set up window event listener. ${error}`);\n    });\n\n    return () => {\n      removeListener?.();\n    };\n  }, [name, callback]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          onClearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","isNew","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","selectCustomEmoji","customEmoji","customEmojis","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","linkContext","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","isWhitelisted","whitelistedDomains","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","lang","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getMessageContentIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","shouldSharePhoneNumber","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","currentInlineBotSettings","newResults","isGallery","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","lockedUntilDate","canSend","openLockedGiftModalInfo","untilDate","forUserId","selectedResaleGift","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","reloadPeerSavedGifts","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","allStarGiftIds","resaleStarGiftIds","availabilityResale","starGifts","idsByCategory","resale","myCollectibles","shouldRefresh","currentMyCollectibleGifts","myCollectibleGifts","localNextOffset","sortType","shouldIncludeUnique","shouldIncludeUnlimited","shouldIncludeUpgradable","shouldIncludeLimited","shouldIncludeDisplayed","shouldIncludeHidden","buildCollectionByCallback","savedGift","resaleGifts","loadResaleGifts","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","fetchingCollectionId","selectActiveGiftsCollectionId","selectPeerCollectionSavedGifts","fetchingFilter","selectGiftProfileFilter","collectionId","currentFilter","currentCollectionId","replacePeerSavedGifts","activeCollectionId","loadPeerSavedGifts","loadMyCollectibleGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","collectionsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","selectPeerSavedGifts","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","updatePeerStarGiftCollections","collections","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","selectedAlbumId","selectActiveStoriesCollectionId","albumData","idsByAlbumId","albumId","updatePeerStoriesFullyLoaded","profileIds","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","albums","albumsByPeerId","selectedStoryAlbumId","loadPeerProfileStories","processChatInfoState","isSameMessageList","profileTab","forceScrollProfileTab","isOwnProfile","currentChatInfo","chatInfo","newProfileTab","newForceScrollProfileTab","newIsOwnProfile","execAfterActions","lastIsChatInfoShown","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","rest","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","isMuted","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","CHANGELOG_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","quickPreview","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","profileRatingModal","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","IS_TAURI","tauri","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","willChatInfoBeShown","isActive","screen","nextScreen","getIsTablet","messageLists","shouldScrollTo","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldSaveAttachmentsCompression","defaultAttachmentCompression","shouldCompress","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","defaultTitle","PAGE_TITLE_TAURI","PAGE_TITLE","INACTIVE_MARKER","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","getPromiseActions","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","lockedGiftModal","giftResalePriceComposerModal","closeGiftInfoValueModal","openGiftModal","resetResaleGifts","giftInfoValueModal","valueInfo","giftStatusInfoModal","giftTransferModal","giftTransferConfirmModal","activeCollectionByPeerId","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","animationLevel","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","resolveTransitionName","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","withTags","ContactList","ConnectionStatusOverlay","connectionStatus","connectionStatusText","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","location","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectMyProfile","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","collectibleEmojiStatus","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","GiftEffectWrapper","withSparkles","sparklesClassName","sparklesColor","textColor","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","oldLang","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","connectionStatusPosition","useConnectionStatus","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","fullVersion","APP_NAME","IS_MAC_OS","DropdownMenu","trigger","footer","forceOpen","transformOriginX","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","tauriUpdate","setTauriUpdate","isTauriUpdateDownloading","setIsTauriUpdateDownloading","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","downloadAndInstall","relaunch","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","checkTauriUpdate","checkUpdate","useInterval","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","blur","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","MessageSelectToolbar","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderText","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","isDisabled","onStateChange","handleBeforeContextMenu","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isGif","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","alt","draggable","playsInline","disablePictureInPicture","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","currentTransitionKey","MiddleHeader","isComments","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isDesktop","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","target","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","threshold","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","usePreviousDeprecated","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","selectSponsoredMessage","isBot","BotAdPane","viewSponsored","clickSponsored","openAboutAdsModal","renderingSponsoredMessage","withResizeObserver","contextMenuAnchor","handleAboutClick","peerColor","getApiPeerColorClass","BadgeButton","SponsoredMessageContextMenuContainer","anchor","triggerRef","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canAddContact","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","formatStarsAsIcon","asFont","messageStarIcon","containerClassName","messageStars","withMarkdown","withNodes","root","noForcedUpperCase","pill","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","useSignal","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","useSignalEffect","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","handleOpenPremiumModal","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","selectThemeValues","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","ANONYMOUS_USER_ID","isCreator","isUserRightBanned","getHasAdminRight","userFull","isContactRequirePremium","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","useDerivedSignal","pinnedLength","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","shouldCancelWaiting","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","isReady","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","IS_ANDROID","visualViewport","handleResize","isFixNeeded","documentElement","clientHeight","requestMutation","classList","toggle","requestMeasure","offsetTop","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","backgroundStyles","withTransition","customBgImage","customBgColor","blurred","withRightColumn","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","buildStyle","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","MessageList","onScrollDownToggle","onNotchToggle","withBottomShift","withDefaultBg","onIntersectPinnedMessage","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactFastList","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftInfoValueModal","GiftLockedModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","GiftTransferConfirmModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","ProfileRatingModal","QuickPreviewModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","VTTypes","hierarchy","constructor","types","this","with","getTypes","VTT_RIGHT_COLUMN","VTT_RIGHT_PROFILE_AVATAR","VTT_RIGHT_PROFILE_EXPAND","VTT_RIGHT_PROFILE_COLLAPSE","VTT_PROFILE_GIFTS","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","observeIntersection","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","avatarPeer","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","patternSize","ringsCount","ovalFactor","StickerView","shouldLoop","shouldPreloadPreview","observeIntersectionForPlaying","observeIntersectionForLoading","nonInteractive","withSparkleEffect","noSparkleAnimation","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","isIntersecting","useIsIntersecting","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","AnimatedTabItem","AnimatedIconFromSticker","forcePreview","AnimatedTabList","selectedItemId","onItemSelect","clipPathContainerRef","selectedIndex","setClipPath","shouldAnimate","useHorizontalScroll","updateClipPath","clipPathContainer","childNodes","offsetLeft","containerWidth","left","toFixed","right","useResizeObserver","starGiftCollections","StarGiftCollectionList","updateSelectedGiftCollection","resetSelectedGiftCollection","handleItemSelect","collection","StoryAlbumList","selectStoryAlbum","resetSelectedStoryAlbum","TABS","VALID_CHANNEL_MAIN_TAB_TYPES","VALID_USER_MAIN_TAB_TYPES","SHARED_MEDIA_TYPES","shouldWarnAboutFiles","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","activeDownloads","selectActiveDownloads","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","storyAlbums","giftCollections","monoforumChannel","selectMonoforumChannel","hasAvatar","canAutoPlayGifs","giftsFilter","isChatProtected","similarChannels","similarBots","limitSimilarPeers","commonChatIds","mainTab","canUpdateMainTab","selectCanUpdateMainTab","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","loadStarGiftCollections","loadStoryAlbums","changeProfileTab","setMainProfileTab","shouldSkipTransitionRef","deletingUserId","setDeletingUserId","isGiftTransitionEnabled","enableGiftTransition","disableGiftTransition","profileId","isGeneralSavedMessages","isProfileExpanded","expandProfile","collapseProfile","restoreContentHeightKey","setRestoreContentHeightKey","validMainTabTypes","mainTabIndex","tab","newFirstTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","prevMainTab","renderingGifts","setRenderingGifts","startViewTransition","useViewTransition","createVtnStyle","useVtn","giftIds","getSavedGiftKey","activeTabIndex","useSyncEffectWithPrevDeps","prevProfileTab","prevActiveTabIndex","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","gifViewportIds","getMoreGifs","noProfileInfoForGifs","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","shouldRenderProfileInfo","isFirstTab","isGiftCollectionsShowed","markGiftCollectionsShowed","unmarkGiftCollectionsShowed","isStoryAlbumsShowed","markStoryAlbumsShowed","unmarkStoryAlbums","hasGiftsCollections","hasStoryAlbums","shouldShowContentPanel","usePeerStoriesPolling","handleStopAutoScrollToTabs","handleExpandProfile","handleCollapseProfile","handleScroll","prevTabType","tabsEl","scrollTop","forceDuration","prevProfileState","tabListEl","maxDistance","offsetHeight","determineProfileState","useProfileState","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","handleResetGiftsFilter","renderingDelay","useTopOverscroll","onOverscroll","isOverscrolled","nextIndex","SLIDE_TRANSITION_DURATION","canRenderContent","shouldUseTransitionForContent","contentTransitionKey","handleOnStop","renderSpinnerOrContent","noContent","noSpinner","baseContent","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","noLoop","noTransition","Media","canAutoPlay","MediaStory","getMessageDocument","datetime","smaller","isDownloading","getIsDownloading","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","renderSpinnerOrContentBase","isSpinner","shouldRestoreHeight","restoreHeightKey","contentSelector","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","onScroll","ProfileInfo","isExpanded","canPlayVideo","isForMonoforum","onExpand","ChatExtra","chatOrUserId","renderContent","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUpgradableGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","handleEditProfile","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","initialTab","renderingActiveTab","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","tonAmount","convertTonFromNanos","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","close","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","useLayoutEffectWithPrevDeps","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","runDebounced","useRunDebounced","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","focus","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerHeight","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","isAppConfigLoaded","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","callback","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","decodedUrl","removeListener","listen","setUpListener","parsedLocationHash","parseLocationHash","parentNode","childElementCount","addExtraClass","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","beginHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBackgroundMode","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","onClearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","typeGift","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","isSavedGift","starGiftUniqueSlug","starGiftUniqueLink","TME_LINK_PREFIX","userCollectibleStatus","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","hasPinOptions","handleTriggerVisibility","handleCopyLink","handleLinkShare","handleTransfer","canTransferAt","handleSell","canResellAt","handleUnsell","nanos","handleWear","handleTakeOff","DEFAULT_STATUS_ICON_ID","handleTogglePin"],"sourceRoot":""}