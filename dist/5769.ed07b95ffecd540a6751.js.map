{"version":3,"file":"5769.ed07b95ffecd540a6751.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/helpers/payments.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: translate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: translate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const currentUnreadMentions = chat.unreadMentions || [];\n\n  const unreadMentions = currentUnreadMentions.filter((id) => !messageIds.includes(id));\n  const removedCount = currentUnreadMentions.length - unreadMentions.length;\n\n  global = updateChat(global, chat.id, {\n    ...(chat.unreadMentionsCount && {\n      unreadMentionsCount: Math.max(chat.unreadMentionsCount - removedCount, 0) || undefined,\n    }),\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: translate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: translate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: translate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/date/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType, ThreadId } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateChats,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoice, ApiRequestInputInvoice } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const invoice = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users, botId,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = updatePayment(global, {\n    botName: selectUser(global, botId)?.firstName,\n  }, tabId);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { translate } from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getMessageSummaryText, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: translate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.translate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.translate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerColor, buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    message, entities, randomId, recommended, sponsorInfo, additionalInfo, buttonText, canReport, title, url, color,\n  } = mtpMessage;\n\n  let photo: ApiPhoto | undefined;\n  if (mtpMessage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(mtpMessage.photo);\n    photo = buildApiPhoto(mtpMessage.photo);\n  }\n\n  return {\n    randomId: serializeBytes(randomId),\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: recommended,\n    sponsorInfo,\n    additionalInfo,\n    buttonText,\n    canReport,\n    title,\n    url,\n    peerColor: color && buildApiPeerColor(color),\n    photo,\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId' | 'fromBoostsApplied' | 'quickReplyShortcutId' | 'viaBusinessBotId'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: number;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.loadChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: Math.max(chat.unreadMentionsCount - 1, 0) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        if (inputInvoice && inputInvoice.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftPremiumModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftPremiumModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            setGlobal(global);\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/date/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/date/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"image\":\"y7ijMlDf\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelUploadMedia({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/date/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/date/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/date/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/date/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n}> = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasText = textMessage && hasMessageText(textMessage);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n  const text = textMessage && getMessageContent(textMessage).text;\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const signature = viaBusinessBotTitle || (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            onAudioPlay={handleAudioPlay}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {Boolean(senderBoosts) && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isRevenueSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/date/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onScrollDownToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n  areAdsEnabled,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderText(inlineButton.text)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownShown, setIsScrollDownShown] = useState(false);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'webApp'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApp: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/date/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        { type: 'boostList', title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count) },\n        { type: 'giftedBoostList', title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count) },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count, lang]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.giveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.giveaway\n            ? 'lng_prizes_results_link' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          isUnknownUser={!boost.userId}\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.content}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]} alt=\"Giveaway\" />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={styles.boostSection}\n              >\n                <Transition\n                  key={activeKey}\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                  className=\"shared-media-transition\"\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem icon=\"gift\" ripple onClick={handleGiveawayClick}>\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingModal ? <PremiumGiftingModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingModal from './premium/PremiumGiftingModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isAppendModalOpen?: boolean;\n  isGiveawayModalOpen?: boolean;\n  isPremiumGiftingModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isPremiumGiftingModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n      loadSavedReactionTags();\n      loadTimezones();\n      loadQuickReplies();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingModalOpen && <PremiumGiftingModal isOpen={isPremiumGiftingModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      giftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isPremiumGiftingModalOpen: giftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","sort","a","b","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","unreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","currentUnreadMentions","removedCount","unreadMentionsCount","markMessagesRead","previousChatId","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","getRequestInputInvoice","inputInvoice","boostChannelId","amount","currency","purpose","boostChannel","additionalChannelIds","untilDate","areWinnersVisible","countries","isOnlyForNewSubscribers","prizeDescription","additionalChannels","requestInfo","saveInfo","selectPaymentInputInvoice","requestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","updatePayment","botName","getPaymentForm","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","forUserIds","giftPremiumModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","closeGiftCodeModal","giveawayId","paymentPurpose","openBoostStatistics","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","replyToPeerId","quoteText","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","loadChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","giftModalState","isCompleted","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","Contact","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","Separator","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","REACTION_SIZE","ReactionButton","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","AvatarList","counter","Reactions","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","Sticker","observeIntersectionForPlaying","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","textMessage","hasText","hasMessageText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","onAudioPlay","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","SponsoredMessage","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAds","onReportAd","isRevenueSharing","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isBot","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","ChatReportPanel","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownShown","setIsScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","noEmojiStatus","noFake","noVerified","isUnknownUser","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","StatisticsOverview","sectionHeader","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","leftSide","randomX","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","getMessageMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isPremiumGiftingModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}